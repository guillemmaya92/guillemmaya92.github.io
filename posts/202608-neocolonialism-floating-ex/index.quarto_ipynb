{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Neocolonialism: The power of a floating exchange rate market\"\n",
        "\n",
        "description: \"How dominant countries use the free-floating currency markets as strategic tool to exert economic control and perpetuate social inequalities worldwide.\"\n",
        "\n",
        "categories: \"economy\"\n",
        "\n",
        "date: \"2026-08-19\"\n",
        "\n",
        "keywords: [\"neocolonialism\"]\n",
        "\n",
        "image: FIG_EXAPI_Currency_Map.png\n",
        "image-alt: |\n",
        "  Currency_Map\n",
        "\n",
        "jupyter: python3\n",
        "\n",
        "format:\n",
        "  html:\n",
        "    code-fold: true\n",
        "---\n",
        "\n",
        "\n",
        "## Summary\n",
        "\n",
        "The chart shows the evolution of currencies in each country relative to the USD from the year 2001 to 2025.\n"
      ],
      "id": "a879d5b7"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| eval: false\n",
        "#| echo: true\n",
        "#| output: false\n",
        "#| warning: false\n",
        "# Libraries\n",
        "# ============================================\n",
        "from sqlalchemy import create_engine, text\n",
        "import pandas as pd\n",
        "import plotly.express as px\n",
        "import requests\n",
        "import os\n",
        "\n",
        "# Data Extraction\n",
        "# ============================================\n",
        "server = \"DESKTOP-FUOV4IE\\\\MSSQLSERVER_TAB2\"\n",
        "database = \"master\"\n",
        "\n",
        "connection_string = (\n",
        "    f\"mssql+pyodbc://@{server}/{database}\"\n",
        "    \"?driver=ODBC+Driver+17+for+SQL+Server\"\n",
        "    \"&trusted_connection=yes\"\n",
        ")\n",
        "\n",
        "engine = create_engine(connection_string)\n",
        "\n",
        "with engine.connect() as conn:\n",
        "    # Query h_currencies\n",
        "    result = conn.execute(text(\"SELECT right(symbol, 3) as symbol, date, rate FROM h_currencies_exh WHERE date > '2001-01-01'\"))\n",
        "    df = pd.DataFrame(result.fetchall(), columns=result.keys())\n",
        "\n",
        "    # Query d_countries\n",
        "    url = \"https://raw.githubusercontent.com/guillemmaya92/Analytics/refs/heads/master/Data/DIM_Country.json\"\n",
        "    data = pd.read_json(url)\n",
        "    df_countries = pd.DataFrame(data).T.reset_index().rename(columns={\"index\": \"cod_iso3\", \"ISO2\": \"cod_iso2\", \"Cod_Currency\": \"cod_currency\", \"Country_Abr\": \"country\"})\n",
        "    df_countries['currency'] = df_countries['Currency'] + \" (\" + df_countries['Symbol'] + \")\"\n",
        "    df_countries = df_countries[['cod_currency', 'currency', 'cod_iso3', 'country']]\n",
        "    df_countries = df_countries[df_countries['cod_iso3'] != 'ATA']\n",
        "\n",
        "    # Adjust SQS (Somaliland)\n",
        "    sos_lines = [\n",
        "        {\"cod_currency\": \"SQS\", \"currency\": \"Somaliland Shilling (S)\", \"cod_iso3\": 'SOL', \"country\": \"Somaliland\"},\n",
        "    ]\n",
        "    df_countries = pd.concat([df_countries, pd.DataFrame(sos_lines)], ignore_index=True)\n",
        "\n",
        "# Data Manipulation\n",
        "# ============================================\n",
        "# Format date\n",
        "df['date'] = pd.to_datetime(df['date'])\n",
        "\n",
        "# Adjust VES (Venezuela)\n",
        "df['rate'] = df.apply(lambda row: row['rate'] / 100000 if row['symbol'] == 'VEF' else row['rate'], axis=1)\n",
        "df['symbol'] = df['symbol'].apply(lambda x: 'VES' if x == 'VEF' else x)\n",
        "\n",
        "# Adjust ZMW (Zambia)\n",
        "df['rate'] = df.apply(lambda row: row['rate'] / 1000 if row['symbol'] == 'ZMK' else row['rate'], axis=1)\n",
        "df['symbol'] = df['symbol'].apply(lambda x: 'ZMW' if x == 'ZMK' else x)\n",
        "\n",
        "# Adjust USD (United States and others)\n",
        "usa_lines = [\n",
        "    {\"symbol\": \"USD\", \"date\": \"2001-01-01\", \"rate\": 1},\n",
        "    {\"symbol\": \"USD\", \"date\": \"2001-05-28\", \"rate\": 1},\n",
        "]\n",
        "df = pd.concat([df, pd.DataFrame(usa_lines)], ignore_index=True)\n",
        "df['date'] = pd.to_datetime(df['date'])\n",
        "\n",
        "# Adjust SSP (South Sudan)\n",
        "ssp_lines = [\n",
        "    {\"symbol\": \"SSP\", \"date\": \"2008-01-01\", \"rate\": 3.21},\n",
        "    {\"symbol\": \"SSP\", \"date\": \"2025-05-28\", \"rate\": 130},\n",
        "]\n",
        "df = pd.concat([df, pd.DataFrame(ssp_lines)], ignore_index=True)\n",
        "df['date'] = pd.to_datetime(df['date'])\n",
        "\n",
        "# Adjust SQS (Somaliland)\n",
        "ssp_lines = [\n",
        "    {\"symbol\": \"SQS\", \"date\": \"2001-01-01\", \"rate\": 2967},\n",
        "    {\"symbol\": \"SQS\", \"date\": \"2024-01-01\", \"rate\": 9703},\n",
        "]\n",
        "df = pd.concat([df, pd.DataFrame(ssp_lines)], ignore_index=True)\n",
        "df['date'] = pd.to_datetime(df['date'])\n",
        "\n",
        "# Adjust ZWL (Zimbawe)\n",
        "zwl_lines = [\n",
        "    {\"symbol\": \"ZWL\", \"date\": \"2001-01-01\", \"rate\": 1 / (10 ** 25)}\n",
        "]\n",
        "df = pd.concat([df, pd.DataFrame(zwl_lines)], ignore_index=True)\n",
        "df['date'] = pd.to_datetime(df['date'])\n",
        "\n",
        "# Adjust CUP (Cuba)\n",
        "zwl_lines = [\n",
        "    {\"symbol\": \"CUP\", \"date\": \"2001-01-01\", \"rate\": 1}\n",
        "]\n",
        "df = pd.concat([df, pd.DataFrame(zwl_lines)], ignore_index=True)\n",
        "df['date'] = pd.to_datetime(df['date'])\n",
        "\n",
        "# Adjust MRU (Mauritania)\n",
        "mru_lines = [\n",
        "    {\"symbol\": \"MRU\", \"date\": \"2001-01-01\", \"rate\": 23.8}\n",
        "]\n",
        "df = pd.concat([df, pd.DataFrame(mru_lines)], ignore_index=True)\n",
        "df['date'] = pd.to_datetime(df['date'])\n",
        "\n",
        "# Adjust AOA (Angola)\n",
        "mru_lines = [\n",
        "    {\"symbol\": \"AOA\", \"date\": \"2001-01-01\", \"rate\": 18.7}\n",
        "]\n",
        "df = pd.concat([df, pd.DataFrame(mru_lines)], ignore_index=True)\n",
        "df['date'] = pd.to_datetime(df['date'])\n",
        "\n",
        "# Adjust MGA (Madagascar)\n",
        "mru_lines = [\n",
        "    {\"symbol\": \"MGA\", \"date\": \"2001-01-01\", \"rate\": 1.27}\n",
        "]\n",
        "df = pd.concat([df, pd.DataFrame(mru_lines)], ignore_index=True)\n",
        "df['date'] = pd.to_datetime(df['date'])\n",
        "\n",
        "# Get index of min and max date for each symbol\n",
        "min_idx = df.groupby('symbol')['date'].idxmin()\n",
        "max_idx = df.groupby('symbol')['date'].idxmax()\n",
        "\n",
        "# Select rows and rename columns\n",
        "df_min = df.loc[min_idx].rename(columns={'date': 'min_date', 'rate': 'min_rate'})\n",
        "df_max = df.loc[max_idx].rename(columns={'date': 'max_date', 'rate': 'max_rate'})\n",
        "\n",
        "# Merge dataframes minmax\n",
        "df = pd.merge(df_min[['symbol', 'min_date', 'min_rate']],\n",
        "                  df_max[['symbol', 'max_date', 'max_rate']],\n",
        "                  on='symbol')\n",
        "\n",
        "# Merge dataframes currencies\n",
        "df = pd.merge(\n",
        "    df,\n",
        "    df_countries,\n",
        "    how='left',\n",
        "    left_on='symbol',\n",
        "    right_on='cod_currency'\n",
        ")\n",
        "\n",
        "# Filter null currencies\n",
        "df = df[df['cod_iso3'].notna()]\n",
        "\n",
        "# Calculate variation\n",
        "df['variation'] =  ( ( df['max_rate'] / df['min_rate'] ) -1 )\n",
        "\n",
        "# Clasification groups\n",
        "df['class'] = pd.cut(df['variation'], \n",
        "                     bins=[-float('inf'), -0.5, -0.3, -0.01, 0.01, 0.3, 0.5, 5, 12, 150, float('inf')],\n",
        "                     labels=['G1', 'G2', 'G3', 'G4', 'G5', 'G6', 'G7', 'G8', 'G9', 'G10'])\n",
        "\n",
        "# Classification groups names\n",
        "class_name_map = {\n",
        "    'G1': 'Appreciation > 50%',\n",
        "    'G2': 'Appreciation [30-50%]',\n",
        "    'G3': 'Appreciation [1-30%]',\n",
        "    'G4': 'Equal',\n",
        "    'G5': 'Depreciation [1-30%]',\n",
        "    'G6': 'Depreciation [30-50%]',\n",
        "    'G7': 'Depreciation [50-500%]',\n",
        "    'G8': 'Depreciation [500-1000%]',\n",
        "    'G9': 'Depreciation [1000-15000%]',\n",
        "    'G10': 'Depreciation [>15000%]'\n",
        "}\n",
        "df['class_name'] = df['class'].map(class_name_map)\n",
        "\n",
        "# Sort by class\n",
        "df = df.sort_values(by='class')\n",
        "\n",
        "# Rate and date column\n",
        "df['before'] = df['min_rate'].map('{:.4f}'.format) + \" (\" + df['min_date'].dt.strftime('%Y-%m-%d') + \")\"\n",
        "df['after'] = df['max_rate'].map('{:.4f}'.format) + \" (\" + df['max_date'].dt.strftime('%Y-%m-%d') + \")\"\n",
        "\n",
        "# Download to Excel\n",
        "download_folder = os.path.join(os.path.expanduser(\"~\"), \"Downloads\")\n",
        "filename = os.path.join(download_folder, \"FIG_EXAPI_Currency_Map.xlsx\")\n",
        "df.to_excel(filename, index=False)\n",
        "\n",
        "print(df)\n",
        "\n",
        "# Data Manipulation\n",
        "# ============================================\n",
        "# Map\n",
        "url = 'https://raw.githubusercontent.com/guillemmaya92/Analytics/refs/heads/master/Maps/world-countries-plotly.geojson'\n",
        "geojson = requests.get(url).json()\n",
        "\n",
        "# Custom Map Color\n",
        "color_map_name = {\n",
        "    'Appreciation > 50%': '#9CF6D2',\n",
        "    'Appreciation [30-50%]': '#CDFFE8',\n",
        "    'Appreciation [1-30%]': '#EFFFF8',\n",
        "    'Equal': '#FFFFFF',\n",
        "    'Depreciation [1-30%]': '#F2DCDB',\n",
        "    'Depreciation [30-50%]': '#E6B8B7',\n",
        "    'Depreciation [50-500%]': '#DA9694',\n",
        "    'Depreciation [500-1000%]': '#963634',\n",
        "    'Depreciation [1000-15000%]': '#632523',\n",
        "    'Depreciation [>15000%]': \"#291312\"\n",
        "}\n",
        "\n",
        "# Figure map choropleth\n",
        "fig = px.choropleth(\n",
        "    df,\n",
        "    geojson=geojson,\n",
        "    locations='cod_iso3',\n",
        "    featureidkey=\"properties.iso_a3\",\n",
        "    color='class_name',\n",
        "    hover_name='country',\n",
        "    hover_data={\n",
        "        'cod_currency': True,\n",
        "        'currency': True,\n",
        "        'before': True,\n",
        "        'after': True,\n",
        "        'variation': ':,.2%',\n",
        "        'cod_iso3': False,\n",
        "        'class_name': False\n",
        "    },\n",
        "    color_discrete_map=color_map_name,\n",
        "    category_orders={'class': ['G1', 'G2', 'G3', 'G4', 'G5', 'G6', 'G7', 'G8', 'G9', 'G10']},\n",
        "    labels={'class_name': 'Classification'}\n",
        ")\n",
        "\n",
        "# Adjust plot\n",
        "fig.update_geos(fitbounds=\"locations\", visible=False)\n",
        "fig.update_traces(marker_line_width=0.5, marker_line_color=\"#808080\")\n",
        "fig.update_layout(\n",
        "    annotations=[\n",
        "        dict(\n",
        "            text=\"<b>The power of a floating exchange rate market</b>\",\n",
        "            xref=\"paper\",\n",
        "            yref=\"paper\",\n",
        "            x=0,\n",
        "            y=1.05,\n",
        "            showarrow=False,\n",
        "            font=dict(size=20)\n",
        "        ),\n",
        "        dict(\n",
        "            text=\"While USD is getting stronger, the world are feeling pain\",\n",
        "            xref=\"paper\",\n",
        "            yref=\"paper\",\n",
        "            x=0,\n",
        "            y=1.015,\n",
        "            showarrow=False,\n",
        "            font=dict(size=16)\n",
        "        ),\n",
        "        dict(\n",
        "            text=\"(Variation in exchange rates during the period 2001–2025)\",\n",
        "            xref=\"paper\",\n",
        "            yref=\"paper\",\n",
        "            x=0,\n",
        "            y=0.985,\n",
        "            showarrow=False,\n",
        "            font=dict(size=13)\n",
        "        ),\n",
        "        dict(\n",
        "            text=\"<b>Data Source:</b> <a href='https://exchangeratesapi.io' target='_blank' style='color:#3c586b;'>exchangerateapi.io</a>\",\n",
        "            xref=\"paper\",\n",
        "            yref=\"paper\",\n",
        "            x=0,\n",
        "            y=0,\n",
        "            showarrow=False,\n",
        "            font=dict(size=12),\n",
        "            align=\"left\"\n",
        "        )\n",
        "    ],\n",
        "    legend=dict(\n",
        "        title=dict(text='<b>Categories</b>'),\n",
        "        font=dict(size=11),\n",
        "        x=1.02,\n",
        "        y=0.5,\n",
        "        yanchor='middle',\n",
        "        xanchor='left',\n",
        "        bgcolor='rgba(255,255,255,0.8)',\n",
        "        bordercolor=\"#808080\",\n",
        "        borderwidth=1\n",
        "    )\n",
        ")\n",
        "\n",
        "# Save it...\n",
        "download_folder = os.path.join(os.path.expanduser(\"~\"), \"Downloads\")\n",
        "filename = os.path.join(download_folder, f\"FIG_EXAPI_Currency_Map\")\n",
        "fig.write_html(filename + \".html\")\n",
        "\n",
        "# Show the plot!\n",
        "fig.show()"
      ],
      "id": "6b7a4e7c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "```{=html}\n",
        "<div style=\"text-align: left;\">\n",
        "  <iframe width=\"1200\" height=\"750\" \n",
        "    src=\"FIG_EXAPI_Currency_Map.html\" \n",
        "    style=\"border: none;\">\n",
        "  </iframe>\n",
        "</div>\n",
        "```"
      ],
      "id": "6b544f0e"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\guill\\AppData\\Roaming\\Python\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}