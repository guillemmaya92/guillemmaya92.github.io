{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Bitcoin Logarithmic Trends: Analysis since each halving\"\n",
        "\n",
        "description: \"Bitcoin's logarithmic trends track its price movements over time, with each halving event serving as a key point for analysis. Halvings reduce the supply of new Bitcoin, often leading to significant price changes.\"\n",
        "\n",
        "categories: \"stock\"\n",
        "\n",
        "date: \"2024-12-27\"\n",
        "\n",
        "keywords: [\"Bitcoin\"]\n",
        "\n",
        "image: featured.png\n",
        "image-alt: |\n",
        "  Bitcoin trends\n",
        "\n",
        "jupyter: python3\n",
        "\n",
        "format:\n",
        "  html:\n",
        "    code-fold: true\n",
        "---\n",
        "\n",
        "\n",
        "## Summary\n",
        "\n",
        "A plot that shows the logarithmic price of `Bitcoin` over each halving period.\n"
      ],
      "id": "3a1f872e"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| eval: false\n",
        "#| echo: true\n",
        "#| output: false\n",
        "#| warning: false\n",
        "# Libraries\n",
        "# ==============================================================================\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "import requests\n",
        "\n",
        "# Get API Data\n",
        "# ==============================================================================\n",
        "# Create a df with final year dates\n",
        "dp = pd.DataFrame({'date': pd.date_range(start='2010-12-31', end='2024-12-31', freq='Y')})\n",
        "dp['to_ts'] = dp['date'].apply(lambda x: int(pd.to_datetime(x).timestamp()))\n",
        "\n",
        "# Create an empty list\n",
        "dataframes = []\n",
        "\n",
        "# Iterate API with each date\n",
        "for to_ts in dp['to_ts']:\n",
        "    # Build an URL with parameters and transform data\n",
        "    url = f\"https://min-api.cryptocompare.com/data/v2/histoday?fsym=BTC&tsym=USD&limit=365&toTs={to_ts}\"\n",
        "    response = requests.get(url)\n",
        "    data = response.json().get(\"Data\", {}).get(\"Data\", [])\n",
        "    df = pd.DataFrame([\n",
        "        {\n",
        "            \"symbol\": \"BTCUSD\",\n",
        "            \"date\": pd.to_datetime(entry[\"time\"], unit=\"s\").date(),\n",
        "            \"open\": entry[\"open\"],\n",
        "            \"close\": entry[\"close\"],\n",
        "            \"low\": entry[\"low\"],\n",
        "            \"high\": entry[\"high\"],\n",
        "            \"volume\": entry[\"volumeto\"]\n",
        "        }\n",
        "        for entry in data\n",
        "    ])\n",
        "    dataframes.append(df)\n",
        "# Combine all df into one\n",
        "btc = pd.concat(dataframes, ignore_index=True)\n",
        "\n",
        "# DataSet 0 - Halving\n",
        "#================================================================================\n",
        "halving = {'halving': [0 , 1, 2, 3, 4],\n",
        "           'date': ['2009-01-03', '2012-11-28', '2016-07-09', '2020-05-11', '2024-04-20'] \n",
        "           }\n",
        "\n",
        "halving = pd.DataFrame(halving)\n",
        "halving['date'] = pd.to_datetime(halving['date'])\n",
        "\n",
        "# DataSet 1 - BTC Price\n",
        "# ==============================================================================\n",
        "# Prepare dataset\n",
        "btc = btc.drop_duplicates()\n",
        "btc['date'] = pd.to_datetime(btc['date'])\n",
        "btc['year_month'] = btc['date'].dt.strftime('%Y-%m')\n",
        "btc = btc.set_index('date')\n",
        "btc = btc.asfreq('D').ffill()\n",
        "btc = btc.reset_index()\n",
        "btc.sort_values(by=['date'], inplace=True)\n",
        "btc = pd.merge(btc, halving, on='date', how='left')\n",
        "btc['halving'].fillna(method='ffill', inplace=True)\n",
        "btc['halving'].fillna(0, inplace=True)\n",
        "btc['halving'] = btc['halving'].astype(int)\n",
        "btc['first_close'] = btc.groupby('halving')['close'].transform('first')\n",
        "btc['increase'] = (btc['close'] - btc['first_close']) / btc['first_close'] * 100\n",
        "btc['days'] = btc.groupby('halving').cumcount() + 1\n",
        "btc['closelog'] = np.log10(btc['close'])\n",
        "btc = btc[btc['halving'] >= 1]\n",
        "btc['daystotal'] = btc.groupby('symbol').cumcount() + 1\n",
        "\n",
        "# Graph 1 - SEABORN\n",
        "# ==============================================================================\n",
        "# Font Style\n",
        "plt.rcParams.update({'font.family': 'sans-serif', 'font.sans-serif': ['Open Sans'], 'font.size': 10})\n",
        "\n",
        "# Colors Background\n",
        "regions = [\n",
        "    (0, 500, '#6B8E23'), # Green\n",
        "    (500, 1000, '#FF4500'), # Red\n",
        "    (1000, 1500, '#FFA500') # Orange\n",
        "    ]  \n",
        "\n",
        "# Colors Palette Lines\n",
        "lines = {\n",
        "    0: '#E0E0E0',  # Very Light Grey\n",
        "    1: '#C0C0C0',  # Light Grey\n",
        "    2: '#808080',  # Medium Grey\n",
        "    3: '#404040',  # Dark Grey\n",
        "    4: '#8B0000'   # Red\n",
        "}\n",
        "\n",
        "# Seaborn to plot a graph\n",
        "sns.set(style=\"whitegrid\", rc={\"grid.color\": \"0.95\", \"axes.grid.axis\": \"y\"})\n",
        "plt.figure(figsize=(16, 9))\n",
        "sns.lineplot(x='days', y='closelog', hue='halving', data=btc, markers=True, palette=lines, linewidth=1)\n",
        "\n",
        "# Add region colors in the background\n",
        "for start, end, color in regions:\n",
        "    plt.axvspan(start, end, color=color, alpha=0.05)\n",
        "\n",
        "# Title and axis\n",
        "plt.title('Bitcoin Logarithmic Trends: Analysis Since Each Halving', fontsize=16, fontweight='bold', pad=20)\n",
        "plt.xlabel('Days',  fontsize=10, fontweight='bold')\n",
        "plt.ylabel('Log Price', fontsize=10, fontweight='bold')\n",
        "plt.xlim(0, 1500)\n",
        "plt.xticks(range(0, 1501, 125), fontsize=9)\n",
        "plt.tick_params(axis='both', labelsize=8)\n",
        "plt.yticks(fontsize=9)\n",
        "\n",
        "# Custom legend\n",
        "legend = plt.legend(title=\"Halving\", loc='lower right', fontsize=8, title_fontsize='10')\n",
        "new_title = 'Dates:'\n",
        "legend.set_title(new_title)\n",
        "new_labels = ['1st Halving: 2012-11-28 to 2016-07-09', '2nd Halving: 2016-07-09 to 2020-05-11', '3rd Halving: 2020-05-11 to 2024-04-20', '4th Halving: 2024-04-20 to present'] # Adjust the number of labels according to your data\n",
        "for text, new_label in zip(legend.texts, new_labels):\n",
        "    text.set_text(new_label)\n",
        "\n",
        "# Maximo First 750 days\n",
        "btc1 = btc[(btc['days'] >= 0) & (btc['days'] <= 750)]\n",
        "for halving, group in btc1.groupby('halving'):\n",
        "    max_value = group['closelog'].max()\n",
        "    max_row = group[group['closelog'] == max_value].iloc[0]\n",
        "    plt.plot(max_row['days'], max_row['closelog'] +0.05, marker='*', color='darkgoldenrod', markersize=5)\n",
        "    plt.text(max_row['days'], max_row['closelog'] +0.1, f'{max_row[\"close\"]:,.0f} ({max_row[\"increase\"]:,.0f})%', fontsize=7, ha='center', color='darkgoldenrod')\n",
        "\n",
        "# Min Between 500 and 1000 days\n",
        "btc2 = btc[(btc['days'] >= 500) & (btc['days'] <= 1000)]\n",
        "for halving, group in btc2.groupby('halving'):\n",
        "    min_value = group['closelog'].min()\n",
        "    min_row = group[group['closelog'] == min_value].iloc[0]\n",
        "    plt.plot(min_row['days'], min_row['closelog'] - 0.05, marker='v', color='darkred', markersize=5)\n",
        "    plt.text(min_row['days'], min_row['closelog'] -0.15, f'{min_row[\"close\"]:,.0f} ({min_row[\"increase\"]:,.0f})%', fontsize=7, ha='center', color='darkred')\n",
        "\n",
        "# Max After 750 days \n",
        "btc3 = btc[(btc['days'] >= 750) & (btc['days'] <= 1500)]\n",
        "for halving, group in btc3.groupby('halving'):\n",
        "    max_value = group['closelog'].max()\n",
        "    max_row = group[group['closelog'] == max_value].iloc[0]\n",
        "    plt.plot(max_row['days'], max_row['closelog'] +0.05, marker='^', color='darkgreen', markersize=5)\n",
        "    plt.text(max_row['days'], max_row['closelog'] +0.1, f'{max_row[\"close\"]:,.0f} ({max_row[\"increase\"]:,.0f})%', fontsize=7, ha='center', color='darkgreen')\n",
        "\n",
        "# Custom Last Dots\n",
        "max_vals = btc.groupby('halving').agg({'closelog': 'last', 'days': 'max'}).reset_index()\n",
        "for index, row in max_vals.iterrows():\n",
        "    plt.plot(row['days'], row['closelog'], 'ro', markersize=2)\n",
        "\n",
        "# Custom Line labels\n",
        "for halving, group in btc.groupby('halving'):\n",
        "    last_point = group.iloc[-1]\n",
        "    x = last_point['days']\n",
        "    y = last_point['closelog']\n",
        "    max_days = group['days'].max()\n",
        "    plt.text(x + 8, y, f'Halving {halving}\\n{max_days} days', color=lines[halving], fontsize=8, ha='left', va='center')\n",
        "    \n",
        "# Add Year Label\n",
        "current_year_month = btc['year_month'].max() \n",
        "plt.text(1, 1.05, f'{current_year_month}',\n",
        "    transform=plt.gca().transAxes,\n",
        "    fontsize=22, ha='right', va='top',\n",
        "    fontweight='bold', color='#D3D3D3')\n",
        "\n",
        "# Add Data Source\n",
        "plt.text(0, -0.065, 'Data Source: CryptoCompare', \n",
        "         transform=plt.gca().transAxes, \n",
        "         fontsize=8, \n",
        "         color='gray')\n",
        "\n",
        "# Adjust layout\n",
        "plt.tight_layout()\n",
        "\n",
        "# Print it!\n",
        "plt.show()"
      ],
      "id": "395717be",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "![](FIG_Bitcoin.png){.lightbox width=\"125%\"}\n",
        "\n",
        "\n",
        "{{< bluesky-comments at://did:plc:u7zijsa6hoysmuw2cr476odq/app.bsky.feed.post/3lejnowms6223 >}}"
      ],
      "id": "049b3803"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\guill\\AppData\\Roaming\\Python\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}