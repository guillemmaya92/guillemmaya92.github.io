{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Global North: Inequalities in GDP per Capita\"\n",
        "\n",
        "description: \"Absolute inequalities in GDP per capita between the Global North and the rest of the world's regions.\"\n",
        "\n",
        "categories: [economy, python]\n",
        "\n",
        "date: \"2025-11-03\"\n",
        "\n",
        "keywords: [\"wealth-income\"]\n",
        "\n",
        "image: FIG_OWD_Globalization_Eras.png\n",
        "image-alt: |\n",
        "  Globalization_Eras\n",
        "\n",
        "jupyter: python3\n",
        "\n",
        "format:\n",
        "  html:\n",
        "    code-fold: true\n",
        "---\n",
        "\n",
        "\n",
        "## Summary\n",
        "\n",
        "Absolute inequalities in GDP per capita between the Global North and other regions of the world highlight the significant economic divide that persists globally. These disparities emphasize the concrete differences in wealth, living standards, and access to essential resources, underscoring the structural imbalance in global development.\n"
      ],
      "id": "d79fc88b"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| eval: false\n",
        "#| echo: true\n",
        "#| output: false\n",
        "#| warning: false\n",
        "# Libraries\n",
        "# =====================================================================\n",
        "import requests\n",
        "import wbgapi as wb\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import matplotlib.ticker as ticker\n",
        "\n",
        "# Data Extraction (Countries)\n",
        "# =====================================================================\n",
        "# Extract JSON and bring data to a dataframe\n",
        "url = 'https://raw.githubusercontent.com/guillemmaya92/world_map/main/Dim_Country.json'\n",
        "response = requests.get(url)\n",
        "data = response.json()\n",
        "df = pd.DataFrame(data)\n",
        "df = pd.DataFrame.from_dict(data, orient='index').reset_index()\n",
        "df_countries = df.rename(columns={'index': 'ISO3'})\n",
        "\n",
        "# Data Extraction - WBD (1960-1980)\n",
        "# ========================================================\n",
        "# To use the built-in plotting method\n",
        "indicator = ['NY.GDP.PCAP.KD', 'SP.POP.TOTL']\n",
        "countries = df_countries['ISO3'].tolist()\n",
        "data_range = ['1960', '2023']\n",
        "data = wb.data.DataFrame(indicator, countries, data_range, numericTimeKeys=True, labels=False, columns='series').reset_index()\n",
        "df_wb = data.rename(columns={\n",
        "    'economy': 'ISO3',\n",
        "    'time': 'year',\n",
        "    'SP.POP.TOTL': 'pop',\n",
        "    'NY.GDP.PCAP.KD': 'gdpc'\n",
        "})\n",
        "\n",
        "# Filter nulls and create total\n",
        "df_wb = df_wb[~df_wb['gdpc'].isna()]\n",
        "df_wb['gdpt'] = df_wb['gdpc'] * df_wb['pop']\n",
        "\n",
        "# Data Manipulation\n",
        "# =====================================================================\n",
        "# Merge queries\n",
        "df = df_wb.merge(df_countries, how='left', left_on='ISO3', right_on='ISO3')\n",
        "df = df[['Analytical2', 'year', 'pop', 'gdpt']]\n",
        "df = df.rename(columns={'Analytical2': 'group'})\n",
        "df = df[df['group'].notna()]\n",
        "\n",
        "# Summarizing Groups\n",
        "dfg = df.copy()\n",
        "dfg['group'] = np.where(dfg['group'] == 'Global North', 'Global North', 'Rest World')\n",
        "dfg = dfg.groupby(['group', 'year'])[['pop', 'gdpt']].sum().reset_index()\n",
        "dfg['gdpc'] = dfg['gdpt'] / dfg['pop']\n",
        "dfg['gdpcdif'] = dfg['gdpc'] - dfg.groupby('group')['gdpc'].shift()\n",
        "\n",
        "# Summarizing Analytical\n",
        "df = df.groupby(['group', 'year'])[['pop', 'gdpt']].sum().reset_index()\n",
        "df['gdpc'] = df['gdpt'] / df['pop']\n",
        "\n",
        "# Porcentual\n",
        "df['pop%'] = df['pop'] / df.groupby('year')['pop'].transform('sum')\n",
        "\n",
        "df = df.sort_values(by=['pop%', 'year'], ascending=[False, True])\n",
        "\n",
        "# Data Visualization\n",
        "# =====================================================================\n",
        "# Font Style\n",
        "plt.rcParams.update({'font.family': 'sans-serif', 'font.sans-serif': ['Open Sans'], 'font.size': 10})\n",
        "\n",
        "# Filter dataframes\n",
        "df_1960 = df[df['year'] == 1960]\n",
        "df_2023 = df[df['year'] == 2023]\n",
        "\n",
        "# Values\n",
        "rw60 = dfg.loc[(dfg['group'] == 'Rest World') & (dfg['year'] == 1960), 'gdpc'].values[0]\n",
        "gn60 = dfg.loc[(dfg['group'] == 'Global North') & (dfg['year'] == 1960), 'gdpc'].values[0]\n",
        "rw23 = dfg.loc[(dfg['group'] == 'Rest World') & (dfg['year'] == 2023), 'gdpc'].values[0]\n",
        "gn23 = dfg.loc[(dfg['group'] == 'Global North') & (dfg['year'] == 2023), 'gdpc'].values[0]\n",
        "\n",
        "# Colors\n",
        "group_colors = {\n",
        "    'East Asia & Pacific': '#4D93D9',\n",
        "    'Eastern Europe & Central Asia': '#00B050',\n",
        "    'Global North': '#808080',\n",
        "    'Latin America and the Caribbean': '#C00000',\n",
        "    'Middle East & North Africa': '#F1A983',\n",
        "    'South Asia': '#FFC000',\n",
        "    'Sub-Saharan Africa': '#7030A0'\n",
        "}\n",
        "\n",
        "# Define ticks\n",
        "xticks = np.linspace(0, 50000, 5)\n",
        "\n",
        "# Create figure and suplots\n",
        "fig, axes = plt.subplots(2, 1, figsize=(12, 5))\n",
        "\n",
        "# First plot (1960)\n",
        "axes[0].scatter(df_1960['gdpc'], df_1960['year'], s=df_1960['pop%'] * 12000, alpha=0.4, c=df_1960['group'].map(group_colors), edgecolors='w')\n",
        "axes[0].set_yticks([1960])\n",
        "axes[0].set_xlim(0, 50000)\n",
        "axes[0].set_xticks(xticks)\n",
        "axes[0].xaxis.set_major_formatter(ticker.FuncFormatter(lambda x, pos: f'{x:,.0f}'))\n",
        "axes[0].axvline(x=rw60, color='darkred', linewidth=0.5, linestyle='--', label=f'GDPC Global North 1960: {rw60}')\n",
        "axes[0].axvline(x=gn60, color='darkred', linewidth=0.5, linestyle='--', label=f'GDPC Global North 1960: {gn60}')\n",
        "axes[0].text(rw60 +2500, 1960 + 70, f'{rw60:,.0f}$', color='darkred', fontsize=8, \n",
        "             va='bottom', ha='center', rotation=0)\n",
        "axes[0].text(gn60 +1800, 1960 + 70, f'{gn60:,.0f}$', color='darkred', fontsize=8, \n",
        "             va='bottom', ha='center', rotation=0)\n",
        "axes[0].text((gn60-rw60)/2+rw60, 1960 + 50, f'GAP \\n{gn60-rw60:,.0f}$', color='#373737', fontsize=8, fontweight='bold', \n",
        "             va='bottom', ha='center', rotation=0)\n",
        "axes[0].text((gn60-rw60)/2+rw60, 1960 + 25, f'+{(gn60-rw60)/rw60*100:,.0f}%', color='#12330b', fontsize=8, \n",
        "             va='bottom', ha='center', rotation=0)\n",
        "\n",
        "# Second plot (2023)\n",
        "axes[1].scatter(df_2023['gdpc'], df_2023['year'], s=df_2023['pop%'] * 12000, alpha=0.4, c=df_2023['group'].map(group_colors), edgecolors='w')\n",
        "axes[1].set_xlabel('GDP per capita ($US constant 2015)', fontsize=10, fontweight='bold')\n",
        "axes[1].set_yticks([2023])\n",
        "axes[1].set_xlim(0, 50000) \n",
        "axes[1].set_xticks(xticks)\n",
        "axes[1].xaxis.set_major_formatter(ticker.FuncFormatter(lambda x, pos: f'{x:,.0f}'))\n",
        "axes[1].axvline(x=rw23, color='darkred', linewidth=0.5, linestyle='--', label=f'GDPC Global North 1960: {rw23}')\n",
        "axes[1].axvline(x=gn23, color='darkred', linewidth=0.5, linestyle='--', label=f'GDPC Global North 1960: {gn23}')\n",
        "axes[1].text(rw23 +1800, 2023 + 70, f'{rw23:,.0f}$', color='darkred', fontsize=8, \n",
        "             va='bottom', ha='center', rotation=0)\n",
        "axes[1].text(gn23 +1800, 2023 + 70, f'{gn23:,.0f}$', color='darkred', fontsize=8, \n",
        "             va='bottom', ha='center', rotation=0)\n",
        "axes[1].text((gn23-rw23)/2+rw23, 2023 + 50, f'GAP \\n{gn23-rw23:,.0f}$', color='#373737', fontsize=8, fontweight='bold', \n",
        "             va='bottom', ha='center', rotation=0)\n",
        "axes[1].text((gn23-rw23)/2+rw23, 2023 + 25, f'+{(gn23-rw23)/rw23*100:,.0f}%', color='#12330b', fontsize=8, \n",
        "             va='bottom', ha='center', rotation=0)\n",
        "\n",
        "# Configuration\n",
        "yticklabels_1960 = axes[0].get_yticklabels()\n",
        "yticklabels_1960[0].set_fontweight('bold')\n",
        "yticklabels_1960[0].set_fontsize(14)\n",
        "yticklabels_1960[0].set_color('darkgrey')\n",
        "axes[0].set_yticklabels(yticklabels_1960)\n",
        "\n",
        "yticklabels_2023 = axes[1].get_yticklabels()\n",
        "yticklabels_2023[0].set_fontweight('bold')\n",
        "yticklabels_2023[0].set_fontsize(14)\n",
        "yticklabels_2023[0].set_color('darkgrey')\n",
        "axes[1].set_yticklabels(yticklabels_2023)\n",
        "\n",
        "# Grid and labels\n",
        "axes[0].text(0, 1.25, 'Global Inequalities in GDP per Capita', fontsize=13, fontweight='bold', ha='left', transform=axes[0].transAxes)\n",
        "axes[0].text(0, 1.1, 'Evolution by region from 1960 to 2023', fontsize=9, color='#262626', ha='left', transform=axes[0].transAxes)\n",
        "\n",
        "# Add custom legend\n",
        "handles = [plt.Line2D([0], [0], marker='o', color='w', markerfacecolor=color, markersize=10) \n",
        "           for color in group_colors.values()]\n",
        "\n",
        "labels = list(group_colors.keys())\n",
        "\n",
        "legend = axes[0].legend(handles, labels, title=\"Regions\", bbox_to_anchor=(1.05, 0.5), loc='upper left', \n",
        "                        frameon=False, fontsize='8', title_fontsize='10')\n",
        "\n",
        "plt.setp(legend.get_title(), fontweight='bold')\n",
        "\n",
        "# Add Data Source\n",
        "axes[1].text(0, -0.5, 'Data Source: World Bank.', \n",
        "    transform=plt.gca().transAxes, \n",
        "    fontsize=8, \n",
        "    color='gray')\n",
        "\n",
        "# Add Notes\n",
        "axes[1].text(0, -0.6, 'Notes: The size corresponds to the percentage of the total population.', \n",
        "    transform=plt.gca().transAxes, \n",
        "    fontsize=8, \n",
        "    color='gray')\n",
        "\n",
        "# Add Global North\n",
        "axes[1].text(0, -0.7, 'Global North: US, European Union, Canada, Australia, New Zealand, Russia, Switzerland, Iceland, Israel, Greenland, Norway, Japan', \n",
        "    transform=plt.gca().transAxes, \n",
        "    fontsize=8, \n",
        "    color='gray')\n",
        "\n",
        "# Adjusting plot...\n",
        "plt.tight_layout()\n",
        "\n",
        "plt.savefig(\"C:/Users/guill/Downloads/FIG_WORLDBANK_Global_North.png\", dpi=300, bbox_inches='tight') \n",
        "\n",
        "# Print it!\n",
        "plt.show()"
      ],
      "id": "d99a55b3",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "![](FIG_WORLDBANK_Global_North.png){.lightbox width=\"100%\"}\n",
        "\n",
        "\n",
        "{{< bluesky-comments at://did:plc:u7zijsa6hoysmuw2cr476odq/app.bsky.feed.post/3lejnowms6223 >}}"
      ],
      "id": "862a5a64"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\guill\\AppData\\Roaming\\Python\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}