{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Global Patterns in Wealth-Income Ratios\"\n",
        "\n",
        "description: \"An overview of the economic situation\"\n",
        "\n",
        "categories: \"economy\"\n",
        "\n",
        "date: \"2025-09-21\"\n",
        "\n",
        "keywords: [\"wealth-income\"]\n",
        "\n",
        "image: FIG_WID_Beta_2023.png\n",
        "image-alt: |\n",
        "  Beta_2023\n",
        "\n",
        "jupyter: python3\n",
        "\n",
        "format:\n",
        "  html:\n",
        "    code-fold: true\n",
        "---\n",
        "\n",
        "\n",
        "## Summary\n",
        "\n",
        "A plot that shows a snapshot of the `wealth-income` ratio in 2023, offering insight into the current economic landscape.\n"
      ],
      "id": "80ed9a63"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| eval: false\n",
        "#| echo: true\n",
        "#| output: false\n",
        "#| warning: false\n",
        "# Libraries\n",
        "# ===================================================\n",
        "import requests\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import plotly.graph_objects as go\n",
        "\n",
        "# Extract Data (Countries)\n",
        "# ===================================================\n",
        "# Extract JSON and bring data to a dataframe\n",
        "url = 'https://raw.githubusercontent.com/guillemmaya92/world_map/main/Dim_Country.json'\n",
        "response = requests.get(url)\n",
        "data = response.json()\n",
        "df = pd.DataFrame(data)\n",
        "df = pd.DataFrame.from_dict(data, orient='index').reset_index()\n",
        "df_countries = df.rename(columns={'index': 'ISO3'})\n",
        "\n",
        "# Extract Data (WID)\n",
        "# ===================================================\n",
        "# URL del archivo Parquet en GitHub\n",
        "url = \"https://raw.githubusercontent.com/guillemmaya92/Analytics/master/Data/WID_Values.parquet\"\n",
        "df = pd.read_parquet(url, engine=\"pyarrow\")\n",
        "df = df[df['year'].isin([1980, 2023])]\n",
        "\n",
        "# Transform Data\n",
        "# ===================================================\n",
        "df['tincome'] = df['tincome2'] / df['xusd'] / 1000\n",
        "df['twealth'] = df['twealth2'] / df['xusd'] / 1000\n",
        "df['gdptotal'] = df['gdptotal'] / df['xusd']\n",
        "df['tincomeVAR'] = (df['tincome'] / df.groupby('country')['tincome'].shift(1) -1) * 100\n",
        "df['twealthVAR'] = (df['twealth'] / df.groupby('country')['twealth'].shift(1) -1) * 100\n",
        "df['wiratioVAR'] = (df['wiratio'] - df.groupby('country')['wiratio'].shift(1))\n",
        "df = df[df['year'] == 2023]\n",
        "df = df[df['wiratio'].notna() & df['tincome'].notna()]\n",
        "df = pd.merge(df, df_countries, left_on='country', right_on='ISO2', how='inner')\n",
        "df = df[['year', 'country', 'Country_Abr', 'gdptotal', 'tincome', 'twealth', 'wiratio', 'tincomeVAR', 'twealthVAR', 'wiratioVAR']]\n",
        "df = df[(df['tincome'] >= 0) & (df['tincome'] <= 120000)]\n",
        "df = df.sort_values(by='gdptotal', ascending=True)\n",
        "df = df.rename(\n",
        "        columns={\n",
        "            'year': 'year',\n",
        "            'Country_Abr': 'country_name',\n",
        "            'gdptotal': 'total_income',\n",
        "            'tincome': 'incomeCY',\n",
        "            'twealth': 'wealthCY', \n",
        "            'wiratio': 'betaCY',\n",
        "            'tincomeVAR': 'incomeVAR',\n",
        "            'twealthVAR': 'wealthVAR',\n",
        "            'wiratioVAR': 'betaVAR'\n",
        "        }\n",
        "    )\n",
        "print(df)\n",
        "\n",
        "# Data Visualization\n",
        "# ===================================================\n",
        "# Crea la figura\n",
        "fig = go.Figure()\n",
        "\n",
        "# Marker size y line width calculados\n",
        "marker_size = np.sqrt(df[\"total_income\"] / df[\"total_income\"].max()) * 100 + 3\n",
        "line_width  = np.sqrt(df[\"total_income\"] / df[\"total_income\"].max()) * 4 + 0.5\n",
        "\n",
        "# Primero agregamos los puntos del scatter\n",
        "fig.add_trace(go.Scatter(\n",
        "    x=df[\"betaCY\"],\n",
        "    y=df[\"incomeCY\"],\n",
        "    mode='markers',\n",
        "    text=df[\"country_name\"],\n",
        "    customdata=np.vstack((df[\"incomeCY\"], df[\"wealthCY\"], df[\"incomeVAR\"], df[\"wealthVAR\"], df[\"betaCY\"], df[\"betaVAR\"])).T,\n",
        "    marker=dict(\n",
        "        size=marker_size,\n",
        "        color=\"rgba(0,0,0,0)\",\n",
        "        line=dict(\n",
        "            width=line_width,\n",
        "            color='black'\n",
        "        )\n",
        "    ),\n",
        "    hovertemplate=\"<b>Country:</b> %{text}<br>\" +\n",
        "                  \"<b>Income Avg ($):</b> %{y:.0f}k | <b>Var. 1980:</b> %{customdata[2]:.2f}%<br>\" + \n",
        "                  \"<b>Wealth Avg ($):</b> %{customdata[1]:.0f}k | <b>Var. 1980:</b> %{customdata[3]:.2f}%<br>\" +\n",
        "                  \"<b>Ratio:</b> %{customdata[4]:.2f} | <b>Var. 1980:</b> %{customdata[5]:.2f}pp<extra></extra>\",\n",
        "    showlegend=False\n",
        "))\n",
        "\n",
        "# Ahora agregamos las im치genes de las banderas\n",
        "for i, row in df.iterrows():\n",
        "    country_iso = row[\"country\"]\n",
        "    \n",
        "    # Calcular tama침o de la imagen\n",
        "    image_size = marker_size[i] * 0.205\n",
        "\n",
        "    # A침adir la imagen de la bandera, asegur치ndose de que el orden es correcto\n",
        "    fig.add_layout_image(\n",
        "        dict(\n",
        "            source=f\"https://raw.githubusercontent.com/guillemmaya92/world_flags_round/refs/heads/master/flags/{country_iso}.png\",\n",
        "            xref=\"x\",\n",
        "            yref=\"y\",\n",
        "            xanchor=\"center\",\n",
        "            yanchor=\"middle\",\n",
        "            x=row[\"betaCY\"],\n",
        "            y=row[\"incomeCY\"],\n",
        "            sizex=image_size,\n",
        "            sizey=image_size,\n",
        "            sizing=\"contain\",\n",
        "            opacity=0.8\n",
        "        )\n",
        "    )\n",
        "\n",
        "# Add red and green shapes\n",
        "fig.add_shape(\n",
        "    type=\"rect\",\n",
        "    xref=\"x\", yref=\"paper\",\n",
        "    x0=0, x1=6,\n",
        "    y0=0, y1=1,\n",
        "    fillcolor=\"green\",\n",
        "    opacity=0.04,\n",
        "    layer=\"below\",\n",
        "    line_width=0\n",
        ")\n",
        "fig.add_shape(\n",
        "    type=\"rect\",\n",
        "    xref=\"x\", yref=\"paper\",\n",
        "    x0=6, x1=12,\n",
        "    y0=0, y1=1,\n",
        "    fillcolor=\"red\",\n",
        "    opacity=0.04,\n",
        "    layer=\"below\",\n",
        "    line_width=0\n",
        ")\n",
        "\n",
        "# Configuration plot\n",
        "fig.update_layout(\n",
        "    title=\"<b>Wealth-Income Ratio</b>\",\n",
        "    title_x=0.11,\n",
        "    title_y=0.93,\n",
        "    title_font=dict(size=16),\n",
        "    annotations=[\n",
        "        dict(\n",
        "            text=\"Global Patterns in Wealth-Income Ratios and Average Income per Capita\",\n",
        "            xref=\"paper\",\n",
        "            yref=\"paper\",\n",
        "            x=0,\n",
        "            y=1.06,\n",
        "            showarrow=False,\n",
        "            font=dict(size=11)\n",
        "        ),\n",
        "        dict(\n",
        "            text=\"<b>Data Source:</b> World Inequality Database (WID)\",\n",
        "            xref=\"paper\",\n",
        "            yref=\"paper\",\n",
        "            x=0,\n",
        "            y=-0.12,\n",
        "            showarrow=False,\n",
        "            font=dict(size=10),\n",
        "            align=\"left\"\n",
        "        ),\n",
        "        dict(\n",
        "            text=f\"<b>Currency:</b> Official exchange rate {df[\"year\"].max()} of the local currency to USD.\",\n",
        "            xref=\"paper\",\n",
        "            yref=\"paper\",\n",
        "            x=0,\n",
        "            y=-0.14,\n",
        "            showarrow=False,\n",
        "            font=dict(size=10),\n",
        "            align=\"left\"\n",
        "        ),\n",
        "        dict(\n",
        "            text=f\"<i>@guillemmaya</i>\",\n",
        "            xref=\"paper\",\n",
        "            yref=\"paper\",\n",
        "            x=1,\n",
        "            y=-0.14,\n",
        "            showarrow=False,\n",
        "            font=dict(size=11),\n",
        "            align=\"right\"\n",
        "        ),\n",
        "        dict(\n",
        "            text=str(df[\"year\"].max()),\n",
        "            xref=\"paper\", \n",
        "            yref=\"paper\",\n",
        "            x=1, \n",
        "            y=1.08,\n",
        "            showarrow=False,\n",
        "            font=dict(size=22, color='lightgray', weight='bold'),\n",
        "            align=\"right\"\n",
        "        )\n",
        "    ],\n",
        "    xaxis=dict(\n",
        "        title=\"<b>Wealth-Income Ratio</b>\",\n",
        "        range=[0, 12],\n",
        "        tickvals=[i *  4 / 2 for i in range(7)],\n",
        "        ticktext=[f\"{int(i * 4 / 2)}\" for i in range(7)],\n",
        "        showline=True,\n",
        "        linewidth=1,\n",
        "        linecolor=\"black\",\n",
        "        gridcolor=\"#ebebeb\"\n",
        "    ),\n",
        "    yaxis=dict(\n",
        "        title=\"<b>Average Income per Capita ($US)</b>\",\n",
        "        range=[0, 120],\n",
        "        tickvals=[i * 120 / 6 for i in range(7)],\n",
        "        ticktext=[f\"{int(i * 120 / 6)}k\" for i in range(7)],\n",
        "        showline=True,\n",
        "        linewidth=1,\n",
        "        linecolor=\"black\",\n",
        "        gridcolor=\"#ebebeb\"\n",
        "    ),\n",
        "    height=750,\n",
        "    width=750,\n",
        "    plot_bgcolor=\"white\",   \n",
        "    paper_bgcolor=\"white\"\n",
        ")\n",
        "\n",
        "# Add a custom legend\n",
        "size_legend = ['Smaller', 'Middle', 'Bigger']\n",
        "size_values = [5, 10, 20]\n",
        "\n",
        "for label, size in zip(size_legend, size_values):\n",
        "    fig.add_trace(go.Scatter(\n",
        "        x=[None],\n",
        "        y=[None],\n",
        "        mode='markers',\n",
        "        marker=dict(\n",
        "            size=size,\n",
        "            color=\"rgba(0,0,0,0)\",\n",
        "            line=dict(\n",
        "                width=1,\n",
        "                color='black'\n",
        "            )\n",
        "        ),\n",
        "        legendgroup='size',\n",
        "        showlegend=True,\n",
        "        name=f'{label}'\n",
        "    ))\n",
        "\n",
        "fig.update_layout(\n",
        "    legend=dict(\n",
        "        title=dict(text='<b>  Total Income</b>'), \n",
        "        font=dict(size=11),\n",
        "        x=0.025,\n",
        "        y=0.95,\n",
        "        xanchor='left',\n",
        "        bgcolor='white',\n",
        "        bordercolor='black',\n",
        "        borderwidth=1\n",
        "    )\n",
        ")\n",
        "\n",
        "# Save as HTML file!\n",
        "fig.write_html(\"C:/Users/guill/Desktop/FIG_WID_CapitalisBack_Flag.html\")\n",
        "fig.write_image(\"C:/Users/guill/Desktop/FIG_WID_CapitalisBack_Flag.png\")\n",
        "\n",
        "# Show the plot!\n",
        "fig.show()"
      ],
      "id": "a860100f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "```{=html}\n",
        "<iframe width=\"800\" height=\"800\" \n",
        "  src=\"FIG_WID_Beta_2023.html\" \n",
        "  style=\"border:none;\">\n",
        "</iframe>\n",
        "```"
      ],
      "id": "bbd972a2"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\guill\\AppData\\Roaming\\Python\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}