{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Middle-Income Trap\"\n",
        "\n",
        "description: \"The global structure that limits countries' income growth beyond the middle-income level.\"\n",
        "\n",
        "categories: \"economy\"\n",
        "\n",
        "date: \"2026-07-11\"\n",
        "\n",
        "keywords: [\"middle-income\"]\n",
        "\n",
        "image: FIG_WB_Middle_Income_Trap.png\n",
        "image-alt: |\n",
        "  Middle_Income_Trap\n",
        "\n",
        "jupyter: python3\n",
        "\n",
        "format:\n",
        "  html:\n",
        "    code-fold: true\n",
        "---\n",
        "\n",
        "\n",
        "## Summary\n",
        "\n",
        "In development economics, the middle income trap is a situation where a country has developed until GDP per capita has reached a middle level of income, but the country does not develop further and it does not attain high income country status.\n"
      ],
      "id": "aa7b45ec"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| eval: false\n",
        "#| echo: true\n",
        "#| output: false\n",
        "#| warning: false\n",
        "# Libraries\n",
        "# =====================================================================\n",
        "import os\n",
        "import requests\n",
        "import wbgapi as wb\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import plotly.graph_objects as go\n",
        "\n",
        "# Data Extraction (Countries)\n",
        "# =====================================================================\n",
        "# Extract JSON and bring data to a dataframe\n",
        "url = 'https://raw.githubusercontent.com/guillemmaya92/world_map/main/Dim_Country.json'\n",
        "response = requests.get(url)\n",
        "data = response.json()\n",
        "df = pd.DataFrame(data)\n",
        "df = pd.DataFrame.from_dict(data, orient='index').reset_index()\n",
        "df_countries = df.rename(columns={'index': 'cod_country'})\n",
        "\n",
        "# Data Extraction - WBD (1960-1980)\n",
        "# ========================================================\n",
        "# To use the built-in plotting method\n",
        "indicator = ['NY.GDP.PCAP.CD', 'SP.POP.TOTL']\n",
        "countries = df_countries['cod_country'].tolist()\n",
        "data_range = list(range(1960, 1971))\n",
        "data = wb.data.DataFrame(indicator, countries, data_range, numericTimeKeys=True, labels=False, columns='series').reset_index()\n",
        "df_wb = data.rename(columns={\n",
        "    'economy': 'cod_country',\n",
        "    'time': 'year',\n",
        "    'NY.GDP.PCAP.CD': 'gdpc',\n",
        "    'SP.POP.TOTL': 'pop',\n",
        "})\n",
        "\n",
        "# First value in period 1960-1970\n",
        "df_wb = df_wb[df_wb['gdpc'].notna()]\n",
        "\n",
        "# Filter First data (except USA)\n",
        "df_list = []\n",
        "\n",
        "for country in df_wb['cod_country'].unique():\n",
        "    df_country = df_wb[df_wb['cod_country'] == country]\n",
        "    if country == 'USA':\n",
        "        # For USA Keep all years\n",
        "        df_list.append(df_country)\n",
        "    else:\n",
        "        # Another countries keep first data\n",
        "        df_country = df_country[df_country['gdpc'].notna()]\n",
        "        if not df_country.empty:\n",
        "            first_year_idx = df_country['year'].idxmin()\n",
        "            df_list.append(df_country.loc[[first_year_idx]])\n",
        "            \n",
        "# Concatenar todo de nuevo\n",
        "df_wb = pd.concat(df_list, ignore_index=True)\n",
        "\n",
        "# Data Extraction - IMF (1980-2030)\n",
        "# =====================================================================\n",
        "#Parametro\n",
        "parameters = ['LP', 'NGDPDPC']\n",
        "\n",
        "# Create an empty list\n",
        "records = []\n",
        "\n",
        "# Iterar sobre cada parámetro\n",
        "for parameter in parameters:\n",
        "    # Request URL\n",
        "    url = f\"https://www.imf.org/external/datamapper/api/v1/{parameter}/?periods=2024\"\n",
        "    response = requests.get(url)\n",
        "    data = response.json()\n",
        "    values = data.get('values', {})\n",
        "\n",
        "    # Iterate over each country and year\n",
        "    for country, years in values.get(parameter, {}).items():\n",
        "        for year, value in years.items():\n",
        "            records.append({\n",
        "                'parameter': parameter,\n",
        "                'cod_country': country,\n",
        "                'year': int(year),\n",
        "                'value': float(value)\n",
        "            })\n",
        "    \n",
        "# Create dataframe\n",
        "df_imf = pd.DataFrame(records)\n",
        "\n",
        "# Pivot Parameter to columns and filter nulls\n",
        "df_imf = df_imf.pivot(index=['cod_country', 'year'], columns='parameter', values='value').reset_index()\n",
        "\n",
        "# Rename columns\n",
        "df_imf = df_imf.rename(columns={'NGDPDPC': 'gdpc', 'LP': 'pop'})\n",
        "\n",
        "# Adjust LP to worldbank\n",
        "df_imf['pop'] = df_imf['pop'] * 1000000\n",
        "\n",
        "# Data Merging\n",
        "# =====================================================================\n",
        "# Concat and filter dataframes\n",
        "df_wb = pd.concat([df_wb, df_imf], ignore_index=True)\n",
        "df_wb = df_wb.dropna(subset=['gdpc', 'pop'], how='any')\n",
        "\n",
        "# Data Manipulation\n",
        "# ========================================================\n",
        "# Filter nulls and both years\n",
        "df_wb = df_wb[~df_wb['gdpc'].isna()]\n",
        "df_unique = df_wb.groupby('cod_country')['year'].nunique()\n",
        "country_ok = df_unique[df_unique >= 2].index\n",
        "df_wb = df_wb[df_wb['cod_country'].isin(country_ok)]\n",
        "\n",
        "# Add gdpc_usa\n",
        "usa_gdpc = df_wb[df_wb['cod_country'] == 'USA'][['year', 'gdpc']].rename(columns={'gdpc': 'gdpc_usa'})\n",
        "df_wb = df_wb.merge(usa_gdpc, on='year', how='left')\n",
        "df_wb['gdpc_usa_rel'] = df_wb['gdpc'] / df_wb['gdpc_usa'] * 100\n",
        "df_wb['ln_gdpc_usa_rel'] = np.log(df_wb['gdpc_usa_rel'])\n",
        "df_wb = df_wb[~((df_wb['cod_country'] == 'USA') & (~df_wb['year'].isin([1960, 2024])))]\n",
        "\n",
        "# Select columns\n",
        "df_wb = df_wb[['cod_country', 'year', 'pop', 'gdpc', 'gdpc_usa_rel', 'ln_gdpc_usa_rel']]\n",
        "\n",
        "# Rename year row values\n",
        "df_wb['year'] = np.where(df_wb['year'] == 2024, 'end', 'start')\n",
        "\n",
        "# Unpivot to columns\n",
        "df_wb = df_wb.pivot_table(index='cod_country', columns='year', values=['pop', 'gdpc', 'gdpc_usa_rel', 'ln_gdpc_usa_rel'])\n",
        "df_wb.columns = [f'{var}_{year}' for var, year in df_wb.columns]\n",
        "df_wb = df_wb.reset_index()\n",
        "df_wb = df_wb.rename(columns={'ln_gdpc_usa_rel_start': 'start', 'ln_gdpc_usa_rel_end': 'end'})\n",
        "\n",
        "# Merge queries\n",
        "df = df_wb.merge(df_countries, how='left', left_on='cod_country', right_on='cod_country')\n",
        "df = df[['Region', 'Country_Abr', 'cod_country', 'pop_end', 'gdpc_start', 'gdpc_end', 'gdpc_usa_rel_start', 'gdpc_usa_rel_end', 'start', 'end']]\n",
        "df = df.rename(columns={'Region': 'region', 'Country_Abr': 'country'})\n",
        "df = df[df['region'].notna()]\n",
        "\n",
        "# Population Log\n",
        "df['pop_end_log'] = np.log(df_wb['pop_end'])\n",
        "\n",
        "# Palette dot\n",
        "color_map_dot = {\n",
        "    'Oceania': \"#AFEBFF\",\n",
        "    'Europe':  \"#C0FFD8\",\n",
        "    'Africa':  \"#FFC1A9\",\n",
        "    'Americas': \"#FFBEBE\",\n",
        "    'Asia':    '#FFFFE0'\n",
        "}\n",
        "\n",
        "# Palette dot line\n",
        "color_map_dot_line = {\n",
        "    'Oceania': \"#001CB9\",\n",
        "    'Europe': \"#00AA3E\",\n",
        "    'Africa': \"#D16500\",\n",
        "    'Americas': \"#BB0000\",\n",
        "    'Asia': \"#D6D600\"\n",
        "}\n",
        "\n",
        "# Add columns with colors\n",
        "df['color_line'] = df['region'].map(color_map_dot_line)\n",
        "df['color_dot'] = df['region'].map(color_map_dot)\n",
        "\n",
        "print(df)\n",
        "\n",
        "# Data Visualization\n",
        "# ========================================================\n",
        "# Figure\n",
        "fig = go.Figure()\n",
        "\n",
        "labels = df['cod_country'].apply(lambda x: x.upper() if x.lower() in ['usa', 'chn'] else \"\")\n",
        "\n",
        "# Obtener los valores únicos de color y su región asociada (asumimos que la relación es uno a uno)\n",
        "for color in df['color_dot'].unique():\n",
        "    df_color = df[df['color_dot'] == color]\n",
        "    region_name = df_color['region'].iloc[0]\n",
        "    \n",
        "    fig.add_trace(go.Scatter(\n",
        "        x=df_color['start'],\n",
        "        y=df_color['end'],\n",
        "        mode='markers+text',\n",
        "        name=region_name,\n",
        "        marker=dict(\n",
        "            size=df_color['pop_end'],\n",
        "            color=color,\n",
        "            line=dict(color=df_color['color_line'].iloc[0], width=2),\n",
        "            sizemode='area',\n",
        "            sizeref=2 * max(df['pop_end']) / (60. ** 2),\n",
        "            sizemin=2\n",
        "        ),\n",
        "        text=labels[df_color.index],  # Asegúrate que labels está indexado correctamente\n",
        "        textposition='top center',\n",
        "        showlegend=True,\n",
        "        customdata=df_color[['country', 'gdpc_start', 'gdpc_usa_rel_start', 'gdpc_end', 'gdpc_usa_rel_end']],\n",
        "        hovertemplate=(\n",
        "            \"<b>%{customdata[0]}</b><br>\"\n",
        "            \"GDP Capita (1960): %{customdata[1]:,.0f} (%{customdata[2]:,.2f}%)<br>\"\n",
        "            \"GDP Capita (2024): %{customdata[3]:,.0f} (%{customdata[4]:,.2f}%)<extra></extra>\"\n",
        "        )\n",
        "    ))\n",
        "\n",
        "# Axis Labels\n",
        "fig.update_layout(\n",
        "    xaxis=dict(\n",
        "        tickmode='array',\n",
        "        tickvals=[0.9, 1.8, 2.7, 3.6, 4.6052],\n",
        "        ticktext=['2%', '6%', '15%', '36%', '100%']\n",
        "    ),\n",
        "    yaxis=dict(\n",
        "        tickmode='array',\n",
        "        tickvals=[0.9, 1.8, 2.7, 3.6, 4.6052],\n",
        "        ticktext=['2%', '6%', '15%', '36%', '100%']\n",
        "    )\n",
        ")\n",
        "\n",
        "# Font Type\n",
        "fig.update_layout(\n",
        "    font=dict(\n",
        "        family=\"sans-serif\",\n",
        "        size=12,\n",
        "        color=\"black\"\n",
        "    )\n",
        ")\n",
        "\n",
        "# Configuration\n",
        "fig.update_layout(\n",
        "    xaxis=dict(range=[0, 5.4], title='Start', showgrid=False),\n",
        "    yaxis=dict(range=[0, 5.4], title='End', showgrid=False),\n",
        "    title=dict(\n",
        "        text=(\n",
        "            \"<b style='font-size:22px;'>The Middle Income Trap</b>\"\n",
        "            \"<span style='font-size:2px;'> </span><br>\"\n",
        "            \"<span style='font-size:14px; color:gray;'>Income per person relative to United States, 1960 vs 2024</span>\"\n",
        "        ),\n",
        "        font=dict(size=24, color=\"black\"),\n",
        "        x=0.1,\n",
        "        xanchor='left',\n",
        "        yanchor='top'\n",
        "    ),    \n",
        "    width=700,\n",
        "    height=600,\n",
        "    plot_bgcolor='white',\n",
        "    paper_bgcolor='white'\n",
        ")\n",
        "\n",
        "# Label Axis\n",
        "fig.update_layout(\n",
        "    xaxis_title=dict(\n",
        "        text=\"<b>Income per person relative to US, 1960</b>\",\n",
        "        font=dict(size=12, color=\"black\", family=\"sans-serif\")\n",
        "    ),\n",
        "    yaxis_title=dict(\n",
        "        text=\"<b>Income per person relative to US, 2024</b>\",\n",
        "        font=dict(size=12, color=\"black\", family=\"sans-serif\")\n",
        "    )\n",
        ")\n",
        "\n",
        "# Annotations\n",
        "fig.update_layout(\n",
        "    annotations=[\n",
        "        dict(\n",
        "            text=\"<b>Data Source:</b> IMF World Economic Outlook Database | World Bank, World Development Indicators (2024)\",\n",
        "            xref=\"paper\",\n",
        "            yref=\"paper\",\n",
        "            x=0,\n",
        "            y=-0.15,\n",
        "            showarrow=False,\n",
        "            font=dict(size=10, color=\"black\"),\n",
        "            align=\"left\"\n",
        "        ),\n",
        "        dict(\n",
        "            text=f\"<b>Size:</b> The size of each bubble represents the population size, scaled proportionally to ensure visual comparability.\",\n",
        "            xref=\"paper\",\n",
        "            yref=\"paper\",\n",
        "            x=0,\n",
        "            y=-0.18,\n",
        "            showarrow=False,\n",
        "            font=dict(size=10, color=\"black\"),\n",
        "            align=\"left\"\n",
        "        )\n",
        "    ],\n",
        "    shapes=[\n",
        "        dict(\n",
        "            type=\"rect\",\n",
        "            xref=\"paper\", yref=\"paper\",\n",
        "            x0=-0.06, y0=1.03,\n",
        "            x1=-0.04, y1=1.17, \n",
        "            fillcolor=\"darkblue\",\n",
        "            line=dict(width=0),\n",
        "            layer=\"above\"\n",
        "        )\n",
        "    ]\n",
        ")\n",
        "\n",
        "# Low Text\n",
        "fig.add_annotation(\n",
        "    x=0.2,\n",
        "    y=1.7,\n",
        "    text=\"<b>Low</b>\",\n",
        "    showarrow=False,\n",
        "    textangle=0,\n",
        "    font=dict(size=11, color=\"red\"),\n",
        "    xref=\"x\",\n",
        "    yref=\"y\"\n",
        ")\n",
        "\n",
        "# Middle Text\n",
        "fig.add_annotation(\n",
        "    x=2,\n",
        "    y=3.5,\n",
        "    text=\"<b>Middle</b>\",\n",
        "    showarrow=False,\n",
        "    textangle=0,\n",
        "    font=dict(size=11, color=\"orange\"),\n",
        "    xref=\"x\",\n",
        "    yref=\"y\"\n",
        ")\n",
        "\n",
        "# High Text\n",
        "fig.add_annotation(\n",
        "    x=3.8,\n",
        "    y=5.3,\n",
        "    text=\"<b>High</b>\",\n",
        "    showarrow=False,\n",
        "    textangle=0,\n",
        "    font=dict(size=11, color=\"green\"),\n",
        "    xref=\"x\",\n",
        "    yref=\"y\"\n",
        ")\n",
        "\n",
        "# Box Middle-Income Trap\n",
        "fig.add_shape(\n",
        "    type=\"rect\",\n",
        "    x0=0, y0=0,\n",
        "    x1=1.8, y1=1.8,\n",
        "    line=dict(color=\"red\", width=1),\n",
        "    fillcolor=\"#E6ADAD\",\n",
        "    opacity=0.3,\n",
        "    layer=\"below\"\n",
        ")\n",
        "\n",
        "# Box Middle-Income Trap\n",
        "fig.add_shape(\n",
        "    type=\"rect\",\n",
        "    x0=1.8, y0=1.8,\n",
        "    x1=3.6, y1=3.6,\n",
        "    line=dict(color=\"yellow\", width=1),\n",
        "    fillcolor=\"#E6E2AD\",\n",
        "    opacity=0.3,\n",
        "    layer=\"below\"\n",
        ")\n",
        "\n",
        "# Box High-Income Trap\n",
        "fig.add_shape(\n",
        "    type=\"rect\",\n",
        "    x0=3.6, y0=3.6,\n",
        "    x1=5.4, y1=5.4,\n",
        "    line=dict(color=\"green\", width=1),\n",
        "    fillcolor=\"#B2E6AD\",\n",
        "    opacity=0.3,\n",
        "    layer=\"below\"\n",
        ")\n",
        "\n",
        "# Grid Vertical Lines\n",
        "fig.add_shape(type=\"line\", x0=1.8, y0=0, x1=1.8, y1=5.4,\n",
        "              line=dict(color=\"gray\", width=0.25, dash=\"solid\"))\n",
        "fig.add_shape(type=\"line\", x0=3.6, y0=0, x1=3.6, y1=5.4,\n",
        "              line=dict(color=\"gray\", width=0.25, dash=\"solid\"))\n",
        "\n",
        "# Grid Horizontal lines\n",
        "fig.add_shape(type=\"line\", x0=0, y0=1.8, x1=5.4, y1=1.8,\n",
        "              line=dict(color=\"gray\", width=0.25, dash=\"solid\"))\n",
        "fig.add_shape(type=\"line\", x0=0, y0=3.6, x1=5.4, y1=3.6,\n",
        "              line=dict(color=\"gray\", width=0.25, dash=\"solid\"))\n",
        "\n",
        "# Diagonal = 1\n",
        "fig.add_shape(type=\"line\", x0=0, y0=0, x1=5.4, y1=5.4,\n",
        "              line=dict(color=\"red\", width=1, dash=\"solid\")\n",
        ")\n",
        "\n",
        "# USA Lines\n",
        "fig.add_shape(\n",
        "    type=\"line\",\n",
        "    x0=4.6,\n",
        "    x1=4.6,\n",
        "    y0=0,\n",
        "    y1=4.6,\n",
        "    line=dict(color=\"red\", width=0.5, dash=\"dot\"),\n",
        "    xref=\"x\",\n",
        "    yref=\"y\"\n",
        ")\n",
        "fig.add_shape(\n",
        "    type=\"line\",\n",
        "    x0=0,\n",
        "    x1=4.6,\n",
        "    y0=4.6,\n",
        "    y1=4.6,\n",
        "    line=dict(color=\"red\", width=0.5, dash=\"dot\"),\n",
        "    xref=\"x\",\n",
        "    yref=\"y\"\n",
        ")\n",
        "\n",
        "# Save it...\n",
        "download_folder = os.path.join(os.path.expanduser(\"~\"), \"Downloads\")\n",
        "filename = os.path.join(download_folder, f\"FIG_WB_Middle_Income_Trap\")\n",
        "fig.write_html(filename + \".html\")\n",
        "\n",
        "# Show the plot!\n",
        "fig.show()"
      ],
      "id": "8f506dca",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "```{=html}\n",
        "<iframe width=\"800\" height=\"800\" \n",
        "  src=\"FIG_WB_Middle_Income_Trap.html\" \n",
        "  style=\"border:none;\">\n",
        "</iframe>\n",
        "```"
      ],
      "id": "7d06dd00"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\guill\\AppData\\Roaming\\Python\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}