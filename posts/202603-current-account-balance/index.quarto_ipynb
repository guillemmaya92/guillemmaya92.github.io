{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Who absorbs the World's surplus?\"\n",
        "\n",
        "description: \"An analysis of global imbalance in the current account.\"\n",
        "\n",
        "categories: [economy, python]\n",
        "\n",
        "date: \"2026-03-14\"\n",
        "\n",
        "keywords: [\"exorbitant privilege\"]\n",
        "\n",
        "format:\n",
        "  html:\n",
        "    code-fold: true\n",
        "---\n",
        "\n",
        "\n",
        "## Summary\n",
        "\n",
        "Global trade imbalances reveal structural asymmetries in the international financial system, with the United States playing a unique role due to the dominance of the U.S. dollar. While some economies accumulate surpluses, the U.S. consistently runs large trade deficits. This persistent imbalance is not simply a weakness but a reflection of the `exorbitant privilege`\\` of the dollar as the world’s primary reserve currency.\n"
      ],
      "id": "73e672ab"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| eval: false\n",
        "#| echo: true\n",
        "#| output: false\n",
        "#| warning: false\n",
        "#| label: Income 50-50\n",
        "# Libraries\n",
        "# =====================================================================\n",
        "import os\n",
        "import requests\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "import matplotlib.patches as mpatches\n",
        "import matplotlib.ticker as mticker\n",
        "from matplotlib import font_manager\n",
        "\n",
        "# Data Extraction (Countries)\n",
        "# =====================================================================\n",
        "# Extract JSON and bring data to a dataframe\n",
        "url = 'https://raw.githubusercontent.com/guillemmaya92/world_map/main/Dim_Country.json'\n",
        "response = requests.get(url)\n",
        "data = response.json()\n",
        "df = pd.DataFrame(data)\n",
        "df = pd.DataFrame.from_dict(data, orient='index').reset_index()\n",
        "df_countries = df.rename(columns={'index': 'ISO3'})\n",
        "\n",
        "# Data Extraction (IMF)\n",
        "# =====================================================================\n",
        "#Parameter\n",
        "parameters = ['BCA', 'NGDPD']\n",
        "\n",
        "# Create an empty list\n",
        "records = []\n",
        "\n",
        "# Iterar sobre cada parámetro\n",
        "for parameter in parameters:\n",
        "    # Request URL\n",
        "    url = f\"https://www.imf.org/external/datamapper/api/v1/{parameter}\"\n",
        "    response = requests.get(url)\n",
        "    data = response.json()\n",
        "    values = data.get('values', {})\n",
        "\n",
        "    # Iterate over each country and year\n",
        "    for country, years in values.get(parameter, {}).items():\n",
        "        for year, value in years.items():\n",
        "            records.append({\n",
        "                'Parameter': parameter,\n",
        "                'ISO3': country,\n",
        "                'Year': int(year),\n",
        "                'Value': float(value)\n",
        "            })\n",
        "    \n",
        "# Create dataframe\n",
        "df_imf = pd.DataFrame(records)\n",
        "\n",
        "# Data Manipulation\n",
        "# =====================================================================\n",
        "# Pivot Parameter to columns and filter nulls\n",
        "df = df_imf.pivot(index=['ISO3', 'Year'], columns='Parameter', values='Value').reset_index()\n",
        "df = df.dropna(subset=['BCA'], how='any')\n",
        "\n",
        "# Merge queries\n",
        "df = df.merge(df_countries, how='left', left_on='ISO3', right_on='ISO3')\n",
        "df = df[['ISO3', 'Country', 'Year', 'BCA', 'NGDPD', 'Analytical', 'Region', 'Cod_Currency']]\n",
        "df = df[df['Region'].notna()]\n",
        "\n",
        "# Custom region\n",
        "conditions = [\n",
        "    df['ISO3'] == 'USA',\n",
        "    df['ISO3'] == 'GBR',\n",
        "    df['ISO3'].isin(['CHN', 'TWN', 'HKG', 'MAC']),\n",
        "    df['ISO3'] == 'JPN',\n",
        "    df['Cod_Currency'] == 'EUR',\n",
        "    df['BCA'] >= 0,\n",
        "    df['BCA'] < 0\n",
        "]\n",
        "result = ['USA', 'UK', 'Greater China', 'Japan', 'Eurozone', 'Other Surplus', 'Other Deficit']\n",
        "\n",
        "df['Region'] = np.select(conditions, result)\n",
        "\n",
        "# Groupping region and year\n",
        "df = df.groupby([\"Region\", \"Year\"], as_index=False)[[\"BCA\", \"NGDPD\"]].sum()\n",
        "\n",
        "# Add total GDP\n",
        "df['NGDPD'] = df.groupby('Year')['NGDPD'].transform('sum')\n",
        "df['Ratio'] = df['BCA'] / df['NGDPD'] * 100\n",
        "\n",
        "# Pivot Regions\n",
        "df = df.pivot_table(index=\"Year\", columns=\"Region\", values=\"Ratio\", aggfunc=\"sum\")\n",
        "\n",
        "# Reorder columns\n",
        "df = df[[\"USA\", \"UK\", \"Eurozone\", \"Greater China\", \"Japan\", \"Other Surplus\", \"Other Deficit\"]]\n",
        "\n",
        "# Filter period\n",
        "df = df.loc[df.index <= 2029]\n",
        "\n",
        "# Values\n",
        "usa_percent = df.loc[2029, 'USA'] / (df.loc[2029, 'Other Deficit'] + df.loc[2029, 'USA'] + df.loc[2029, 'UK'])\n",
        "uk_percent = df.loc[2029, 'UK'] / (df.loc[2029, 'Other Deficit'] + df.loc[2029, 'USA'] + df.loc[2029, 'UK'])\n",
        "eur_percent = df.loc[2029, 'Eurozone'] / (df.loc[2029, 'Other Surplus'] + df.loc[2029, 'Eurozone'] + df.loc[2029, 'Greater China'] + df.loc[2029, 'Japan'])\n",
        "chn_percent = df.loc[2029, 'Greater China'] / (df.loc[2029, 'Other Surplus'] + df.loc[2029, 'Eurozone'] + df.loc[2029, 'Greater China'] + df.loc[2029, 'Japan'])\n",
        "jpn_percent = df.loc[2029, 'Japan'] / (df.loc[2029, 'Other Surplus'] + df.loc[2029, 'Eurozone'] + df.loc[2029, 'Greater China'] + df.loc[2029, 'Japan'])\n",
        "\n",
        "print(df)\n",
        "\n",
        "# Data Visualization\n",
        "# =====================================================================\n",
        "# Font and style\n",
        "plt.rcParams.update({'font.family': 'sans-serif', 'font.sans-serif': ['Franklin Gothic'], 'font.size': 9})\n",
        "sns.set(style=\"white\", palette=\"muted\")\n",
        "\n",
        "# Palette\n",
        "palette = [\"#C00000\", \"#E75527\", \"#002D64\", \"#157FFF\", \"#90bee0\", \"#E8F1F8\", \"#FFE1E1\"]\n",
        "\n",
        "# Create figure\n",
        "fig, ax = plt.subplots(figsize=(10, 6))\n",
        "\n",
        "# Crear figure and plot\n",
        "ax = df.plot(kind=\"bar\", stacked=True, width=0.9, color=palette, legend=False, ax=ax)\n",
        "\n",
        "# Title\n",
        "fig.add_artist(plt.Line2D([0.11, 0.11], [0.91, 1], linewidth=6, color='#203764', solid_capstyle='butt')) \n",
        "plt.text(0, 1.12, f'Who Absorbs the World’s Surplus?', fontsize=16, fontweight='bold', ha='left', transform=plt.gca().transAxes)\n",
        "plt.text(0, 1.08, f'Global imbalance in the current account', fontsize=11, color='#262626', ha='left', transform=plt.gca().transAxes)\n",
        "plt.text(0, 1.045, f'(as percent of global GDP)', fontsize=8, color='#262626', ha='left', transform=plt.gca().transAxes)\n",
        "\n",
        "# Adjust ticks and grid\n",
        "plt.ylim(-3, 3)\n",
        "ax.set_xticks(range(0, 50, 5))  # Ajustar el rango con len(df)+1\n",
        "ax.set_xticklabels(df.index[::len(df) // 10], fontsize=9, rotation=0)\n",
        "ax.yaxis.set_major_formatter(mticker.FuncFormatter(lambda x, pos: f'{int(x):,}'.replace(\",\", \".\")))\n",
        "plt.gca().set_xlabel('')\n",
        "plt.yticks(fontsize=9, color='#282828')\n",
        "plt.grid(axis='x', linestyle='--', color='gray', linewidth=0.5, alpha=0.3)\n",
        "\n",
        "# Custom legend values\n",
        "handles = [\n",
        "    mpatches.Patch(color=palette[0], label=\"USA\", linewidth=2),\n",
        "    mpatches.Patch(color=palette[1], label=\"UK\", linewidth=2),\n",
        "    mpatches.Patch(color=palette[2], label=\"Eurozone\", linewidth=2),\n",
        "    mpatches.Patch(color=palette[3], label=\"Greater China (大中华)\", linewidth=2),\n",
        "    mpatches.Patch(color=palette[4], label=\"Japan (日本)\", linewidth=2),\n",
        "    mpatches.Patch(color=palette[5], label=\"Other Surplus\", linewidth=2),\n",
        "    mpatches.Patch(color=palette[6], label=\"Other Deficit\", linewidth=2)\n",
        "]\n",
        "\n",
        "# Legend\n",
        "legend = plt.legend(\n",
        "    handles=handles,\n",
        "    loc='lower center', #center\n",
        "    bbox_to_anchor=(0.5, -0.12),\n",
        "    ncol=8,\n",
        "    fontsize=8,\n",
        "    frameon=False,\n",
        "    handlelength=0.5,\n",
        "    handleheight=0.5,\n",
        "    borderpad=0.2,\n",
        "    columnspacing=0.4\n",
        ")\n",
        "# legend.set_bbox_to_anchor((60, 0), transform=ax.transData)\n",
        "\n",
        "# Change Font (accept chinese characters)\n",
        "prop = font_manager.FontProperties(fname='C:\\\\Windows\\\\Fonts\\\\msyh.ttc')\n",
        "for text in legend.get_texts():\n",
        "    text.set_fontproperties(prop)\n",
        "    text.set_fontsize(8)\n",
        "\n",
        "# Add Data Source\n",
        "plt.text(0, -0.15, 'Data Source:', \n",
        "    transform=plt.gca().transAxes, \n",
        "    fontsize=8,\n",
        "    fontweight='bold',\n",
        "    color='gray')\n",
        "space = \" \" * 23\n",
        "plt.text(0, -0.15, space + 'IMF World Economic Outlook Database, 2024', \n",
        "    transform=plt.gca().transAxes, \n",
        "    fontsize=8,\n",
        "    color='gray')\n",
        "\n",
        "# Add text\n",
        "plt.text(50, -0.35, f\"← {usa_percent:.0%}\", fontsize=7, ha='left', va='bottom')\n",
        "plt.text(50, -0.6, f\"← {uk_percent:.0%}\", fontsize=7, ha='left', va='bottom')\n",
        "plt.text(50, 0.15, f\"← {eur_percent:.0%}\", fontsize=7, ha='left', va='bottom')\n",
        "plt.text(50, 0.55, f\"← {chn_percent:.0%}\", fontsize=7, ha='left', va='bottom')\n",
        "plt.text(50, 0.8, f\"← {jpn_percent:.0%}\", fontsize=7, ha='left', va='bottom')\n",
        "\n",
        "plt.text(50, 2, f\"World\\nsurplus\", fontsize=7, fontweight = 'bold', ha='left', va='top')\n",
        "plt.text(50, -1.8, f\"World\\ndeficit\", fontsize=7, fontweight = 'bold', ha='left', va='bottom')\n",
        "\n",
        "# Forecast\n",
        "plt.text(47, 3.1, f'Forecast', fontsize=7, fontweight='bold', color='gray', ha='center')\n",
        "ax.axvspan(44.5, 49.5, color='gray', alpha=0.15, edgecolor='none')\n",
        "\n",
        "# Remove spines\n",
        "for spine in plt.gca().spines.values():\n",
        "    spine.set_visible(False)\n",
        "\n",
        "# Save it...\n",
        "download_folder = os.path.join(os.path.expanduser(\"~\"), \"Downloads\")\n",
        "filename = os.path.join(download_folder, f\"FIG_IMF_Global_Surplus.png\")\n",
        "plt.savefig(filename, dpi=300, bbox_inches='tight')\n",
        "\n",
        "# Show :)\n",
        "plt.show()"
      ],
      "id": "Income-50-50",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "::: {layout-ncol=\"1\"}\n",
        "![](FIG_IMF_Global_Surplus.png){.lightbox}\n",
        ":::"
      ],
      "id": "7a12a19d"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\guill\\AppData\\Roaming\\Python\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}