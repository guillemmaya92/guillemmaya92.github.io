{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Intrapercentile Analysis of Economic Inequalities\"\n",
        "\n",
        "description: \"The chart shows income or wealth distribution within each percentile of the population.\"\n",
        "\n",
        "categories: [economy, python]\n",
        "\n",
        "date: \"2026-04-11\"\n",
        "\n",
        "keywords: [\"inequality\"]\n",
        "\n",
        "format:\n",
        "  html:\n",
        "    code-fold: true\n",
        "---\n",
        "\n",
        "\n",
        "## Summary\n",
        "\n",
        "It highlights variations inside each percentile, revealing patterns of concentration, dispersion, and economic `inequality` in greater detail.\n"
      ],
      "id": "44e7efea"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| eval: false\n",
        "#| echo: true\n",
        "#| output: false\n",
        "#| warning: false\n",
        "# Libraries\n",
        "# ==========================================\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import requests\n",
        "import matplotlib.pyplot as plt\n",
        "from matplotlib.ticker import FuncFormatter\n",
        "import matplotlib.patches as patches\n",
        "import os\n",
        "\n",
        "# Variables\n",
        "# ==========================================\n",
        "value = 'wealth' #income or wealth\n",
        "year = 2023 # year\n",
        "country = 'ES' #iso2 or WO (world)\n",
        "currency = 'eur' #local, usd, eur\n",
        "\n",
        "# Data Extraction - GITHUB (Countries)\n",
        "# =====================================================================\n",
        "# Extract JSON and bring data to a dataframe\n",
        "url = 'https://raw.githubusercontent.com/guillemmaya92/world_map/main/Dim_Country.json'\n",
        "response = requests.get(url)\n",
        "data = response.json()\n",
        "df = pd.DataFrame(data)\n",
        "df = pd.DataFrame.from_dict(data, orient='index').reset_index()\n",
        "df_countries = df.rename(columns={'ISO2': 'country', 'Country_Abr': 'name', 'Cod_Currency': 'currency', 'Symbol': 'symbol'})\n",
        "\n",
        "# Data Extraction - WID (Percentiles)\n",
        "# ==========================================\n",
        "# Extract percentiles\n",
        "dfp = pd.read_parquet(\"https://github.com/guillemmaya92/Analytics/raw/refs/heads/master/Data/WID_Percentiles.parquet\")\n",
        "\n",
        "# Extract values\n",
        "dfv = pd.read_parquet(\"https://github.com/guillemmaya92/Analytics/raw/refs/heads/master/Data/WID_Values.parquet\")\n",
        "\n",
        "# Data Manipulation\n",
        "# =====================================================================\n",
        "# Filter a year and select measure\n",
        "dfp = dfp[dfp['country'].isin([country])]\n",
        "dfp = dfp[dfp['year'] == year]\n",
        "dfp['percentage'] = dfp[value]\n",
        "\n",
        "# Merge dataframes\n",
        "df = pd.merge(dfp, dfv, on=['country', 'year'], how='inner')\n",
        "df = pd.merge(df, df_countries, on=['country'], how='left')\n",
        "\n",
        "# Select columns\n",
        "df['value'] = df['percentage'] * (df['tincome2'] if value == 'income' else df['twealth2']) / (df['xusd'] if currency == 'usd' else df['xeur'] if currency == 'eur' else 1)\n",
        "df['currency'] = ('USD' if currency == 'usd' else df['currency'])\n",
        "df['symbol'] = ('€' if currency == 'eur' else ('$' if currency == 'usd' else df['symbol']))\n",
        "df = df[['country', 'name', 'currency', 'symbol', 'year', 'percentile', 'value']]\n",
        "\n",
        "# If country == WO\n",
        "df['name'] = df.apply(lambda row: 'World' if row['country'] == 'WO' else row['name'], axis=1)\n",
        "df['symbol'] = df.apply(lambda row: '$' if row['country'] == 'WO' and currency == 'usd' \n",
        "                        else '€' if row['country'] == 'WO' and currency != 'usd' \n",
        "                        else row['symbol'], axis=1)\n",
        "\n",
        "# Grouping by 10\n",
        "df['percentile2'] = pd.cut(\n",
        "    df['percentile'], \n",
        "    bins=range(1, 111, 10), \n",
        "    right=False, \n",
        "    labels=[i + 9 for i in range(1, 101, 10)]\n",
        ").astype(int)\n",
        "\n",
        "# Define palette\n",
        "color_palette = {\n",
        "    10: \"#050407\",\n",
        "    20: \"#07111e\",\n",
        "    30: \"#15334b\",\n",
        "    40: \"#2b5778\",\n",
        "    50: \"#417da1\",\n",
        "    60: \"#5593bb\",\n",
        "    70: \"#5a7aa3\",\n",
        "    80: \"#6d5e86\",\n",
        "    90: \"#a2425c\",\n",
        "    100: \"#D21E00\"\n",
        "}\n",
        "\n",
        "# Map palette color\n",
        "df['color'] = df['percentile2'].map(color_palette)\n",
        "\n",
        "# Percentiles dataframe\n",
        "df2 = df.copy()\n",
        "df2 = df.groupby(['percentile2', 'color'], as_index=False)['value'].sum()\n",
        "df2['valueper'] = df2['value'] / (df2['value']).sum()\n",
        "df2['count'] = 10\n",
        "\n",
        "print(df)\n",
        "\n",
        "# Data Visualization\n",
        "# ===================================================\n",
        "# Font Style\n",
        "plt.rcParams.update({'font.family': 'sans-serif', 'font.sans-serif': ['Open Sans'], 'font.size': 10})\n",
        "\n",
        "# Create the figure and suplots\n",
        "fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 8), gridspec_kw={'height_ratios': [10, 0.5]})\n",
        "\n",
        "# Calculated values\n",
        "per99 = round(df.loc[df['percentile'] == 99, 'value'].iloc[0], -4) * 1.25\n",
        "per100 = round(df.loc[df['percentile'] == 100, 'value'].iloc[0], -4)\n",
        "area99 = round(df.loc[df['percentile'] == 99, 'value'].iloc[0], -4) * 1.18\n",
        "area100 = round(df.loc[df['percentile'] == 99, 'value'].iloc[0], -4) * 1.20\n",
        "capital_value = value.capitalize()\n",
        "symbol = df.loc[df['percentile'] == 99, 'symbol'].iloc[0]\n",
        "country = df.loc[df['percentile'] == 99, 'name'].iloc[0]\n",
        "year = df.loc[df['percentile'] == 99, 'year'].iloc[0]\n",
        "\n",
        "if value == \"wealth\":\n",
        "    note = \"Net national wealth is the total value of assets (cash, housing, bonds, equities, etc.) owned by the national economy, minus its debts.\"\n",
        "else:\n",
        "    note = \"National income measures the total income available to a country's residents. It equals GDP minus capital depreciation plus net foreign income.\"\n",
        "\n",
        "# First Plot\n",
        "# ==================\n",
        "# Plot Bars\n",
        "bars = ax1.bar(df['percentile'], df['value'], color=df['color'], edgecolor='darkgrey', linewidth=0.5, zorder=2)\n",
        "\n",
        "# Title and labels\n",
        "fig.add_artist(plt.Line2D([0.07, 0.07], [0.93, 1], linewidth=6, color='#203764'))\n",
        "ax1.text(0.02, 1.1, f'{capital_value} Distribution in {country}', fontsize=16, fontweight='bold', ha='left', transform=ax1.transAxes)\n",
        "ax1.text(0.02, 1.06, f'Intrapercentile Analysis of Economic Inequalities and {capital_value} Concentration', fontsize=11, color='#262626', ha='left', transform=ax1.transAxes)\n",
        "ax1.set_xlabel('% Population', fontsize=10, weight='bold')\n",
        "ax1.set_ylabel(f'{capital_value} ({symbol})', fontsize=10, weight='bold')\n",
        "\n",
        "# Configuration\n",
        "ax1.grid(axis='x', linestyle='-', alpha=0.5, zorder=1)\n",
        "ax1.set_xlim(0, 101)\n",
        "ax1.set_ylim(0, per99)\n",
        "ax1.set_xticks(np.arange(0, 101, step=10))\n",
        "ax1.set_yticks(np.arange(0, per99+1, step=per99/10))\n",
        "ax1.tick_params(axis='x', labelsize=10)\n",
        "ax1.tick_params(axis='y', labelsize=10)\n",
        "ax1.spines['top'].set_visible(False)\n",
        "ax1.spines['right'].set_visible(False)\n",
        "\n",
        "# Function to format Y axis\n",
        "def format_func(value, tick_number=None):\n",
        "    if abs(value) >= 1e6:\n",
        "        return '{:,.1f}M'.format(round(value / 1e5) / 10) \n",
        "    elif abs(value) >= 1e5:\n",
        "        return '{:,.0f}K'.format(round(value / 1e3, -2))\n",
        "    elif abs(value) >= 1e4:\n",
        "        return '{:,.0f}K'.format(round(value / 1e3, -1))\n",
        "    elif abs(value) >= 1e3:\n",
        "        return '{:,.0f}K'.format(round(value / 1e3))\n",
        "    else:\n",
        "        return str(round(value))\n",
        "    \n",
        "# Function to format label bars\n",
        "def format_func2(value, tick_number=None):\n",
        "    if abs(value) >= 1e6:\n",
        "        return '{:,.1f} M'.format(round(value / 1e5) / 10) \n",
        "    elif abs(value) >= 1e5:\n",
        "        return '{:,.0f} K'.format(round(value / 1e3, -1))\n",
        "    elif abs(value) >= 1e4:\n",
        "        return '{:,.0f} K'.format(round(value / 1e3))\n",
        "    elif abs(value) >= 1e3:\n",
        "        return '{:,.0f} K'.format(round(value / 1e3))\n",
        "    else:\n",
        "        return str(round(value))\n",
        "\n",
        "# Formatting x and y axis\n",
        "ax1.xaxis.set_major_formatter(FuncFormatter(lambda x, _: f'{x:.0f}%'))\n",
        "ax1.yaxis.set_major_formatter(FuncFormatter(format_func))\n",
        "\n",
        "# Lines and area to separate outliers\n",
        "ax1.axhline(y=area100, color='black', linestyle='--', linewidth=0.5, zorder=4)\n",
        "ax1.axhline(y=area99, color='black', linestyle='--', linewidth=0.5, zorder=4)\n",
        "ax1.add_patch(patches.Rectangle((0, area99), 105, area100-area99, linewidth=0, edgecolor='none', facecolor='white', zorder=3))\n",
        "\n",
        "# Y Axis modify the outlier value\n",
        "labels = [item.get_text() for item in ax1.get_yticklabels()]\n",
        "labels[-1] = format_func(per100)\n",
        "ax1.set_yticklabels(labels)\n",
        "\n",
        "# Show labels each 10 percentile\n",
        "for i, (bar, value) in enumerate(zip(bars, df['value'])):\n",
        "    if i % 10 == 0 and i != 0 and value > 1000:\n",
        "        ax1.text(bar.get_x() + bar.get_width() / 2, \n",
        "                 abs(bar.get_height()) + per99 / 30,\n",
        "                 format_func2(value), \n",
        "                 ha='center', \n",
        "                 va='bottom', \n",
        "                 fontsize=8,\n",
        "                 color='black', \n",
        "                 rotation=90)\n",
        "\n",
        "# Second Plot\n",
        "# ==================\n",
        "# Plot Bars\n",
        "ax2.barh([0] * len(df2), df2['count'], left=df2['percentile2'] - df2['count'], color=df2['color'])\n",
        "\n",
        "# Configuration\n",
        "ax2.grid(axis='x', linestyle='-', color='white', alpha=1, linewidth=0.5)\n",
        "ax2.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=False)\n",
        "ax2.tick_params(axis='y', which='both', left=False, right=False, labelleft=False)\n",
        "ax2.spines['top'].set_visible(False)\n",
        "ax2.spines['right'].set_visible(False)\n",
        "ax2.spines['left'].set_visible(False)\n",
        "ax2.spines['bottom'].set_visible(False)\n",
        "x_ticks = np.linspace(df2['percentile2'].min(), df2['percentile2'].max(), 10)\n",
        "ax2.set_xticks(x_ticks)\n",
        "ax2.set_xlim(0, 101)\n",
        "\n",
        "# Add label values\n",
        "for i, row in df2.iterrows():\n",
        "    plt.text(row['percentile2'] - row['count'] + row['count'] / 2, 0, \n",
        "             f'{row[\"valueper\"] * 100:.1f}%', ha='center', va='center', color='white', fontweight='bold')\n",
        "    \n",
        " # Add Year label\n",
        "ax1.text(1, 1.1, f'{year}',\n",
        "    transform=ax1.transAxes,\n",
        "    fontsize=22, ha='right', va='top',\n",
        "    fontweight='bold', color='#D3D3D3')\n",
        "\n",
        "# Add Data Source\n",
        "ax2.text(0, -0.5, 'Data Source:', \n",
        "    transform=plt.gca().transAxes, \n",
        "    fontsize=8,\n",
        "    fontweight='bold',\n",
        "    color='gray')\n",
        "space = \" \" * 26\n",
        "ax2.text(0, -0.5, space + 'World Inequality Database (WID)', \n",
        "    transform=ax2.transAxes, \n",
        "    fontsize=8, \n",
        "    color='gray')\n",
        "\n",
        "# Add Notes\n",
        "ax2.text(0, -0.99, f'{capital_value}:', \n",
        "    transform=plt.gca().transAxes, \n",
        "    fontsize=8,\n",
        "    fontweight='bold',\n",
        "    color='gray')\n",
        "space = \" \" * 16\n",
        "ax2.text(0, -0.99, space + f'{note}', \n",
        "    transform=ax2.transAxes, \n",
        "    fontsize=8, \n",
        "    color='gray')\n",
        "\n",
        "# Adjust layout\n",
        "plt.tight_layout()\n",
        "\n",
        "# Save it...\n",
        "download_folder = os.path.join(os.path.expanduser(\"~\"), \"Downloads\")\n",
        "filename = os.path.join(download_folder, f\"FIG_WID_{country}_{capital_value}_Distribution.png\")\n",
        "plt.savefig(filename, dpi=300, bbox_inches='tight')\n",
        "\n",
        "# Plot it!\n",
        "plt.show()"
      ],
      "id": "9b3084c1",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "::: {.callout-tip collapse=\"true\"}\n",
        "## World\n",
        "\n",
        "Examining income and wealth distribution across the entire world population in USD (\\$).\n",
        ":::\n",
        "\n",
        "::: {layout-ncol=\"2\"}\n",
        "![](I_WO.png){.lightbox}\n",
        "\n",
        "![](W_WO.png){.lightbox}\n",
        ":::\n",
        "\n",
        "::: {style=\"height: 1rem;\"}\n",
        ":::\n",
        "\n",
        "::: {.callout-tip collapse=\"true\"}\n",
        "## Spain\n",
        "\n",
        "Examining income and wealth distribution across Spain population in EUR (€).\n",
        ":::\n",
        "\n",
        "::: {layout-ncol=\"2\"}\n",
        "![](I_ES.png){.lightbox}\n",
        "\n",
        "![](W_ES.png){.lightbox}\n",
        ":::\n",
        "\n",
        "::: {.callout-tip collapse=\"true\"}\n",
        "## France\n",
        "\n",
        "Examining income and wealth distribution across France population in EUR (€).\n",
        ":::\n",
        "\n",
        "::: {layout-ncol=\"2\"}\n",
        "![](I_FR.png){.lightbox}\n",
        "\n",
        "![](W_FR.png){.lightbox}\n",
        ":::\n",
        "\n",
        "::: {.callout-tip collapse=\"true\"}\n",
        "## Germany\n",
        "\n",
        "Examining income and wealth distribution across Germany population in EUR (€).\n",
        ":::\n",
        "\n",
        "::: {layout-ncol=\"2\"}\n",
        "![](I_DE.png){.lightbox}\n",
        "\n",
        "![](W_DE.png){.lightbox}\n",
        ":::\n",
        "\n",
        "::: {.callout-tip collapse=\"true\"}\n",
        "## Switzerland\n",
        "\n",
        "Examining income and wealth distribution across Switzerland population in EUR (€).\n",
        ":::\n",
        "\n",
        "::: {layout-ncol=\"2\"}\n",
        "![](I_CH.png){.lightbox}\n",
        "\n",
        "![](W_CH.png){.lightbox}\n",
        ":::\n",
        "\n",
        "::: {.callout-tip collapse=\"true\"}\n",
        "## Norway\n",
        "\n",
        "Examining income and wealth distribution across Norway population in EUR (€).\n",
        ":::\n",
        "\n",
        "::: {layout-ncol=\"2\"}\n",
        "![](I_NO.png){.lightbox}\n",
        "\n",
        "![](W_NO.png){.lightbox}\n",
        ":::\n",
        "\n",
        "::: {.callout-tip collapse=\"true\"}\n",
        "## China\n",
        "\n",
        "Examining income and wealth distribution across China population in USD (\\$).\n",
        ":::\n",
        "\n",
        "::: {layout-ncol=\"2\"}\n",
        "![](I_CN.png){.lightbox}\n",
        "\n",
        "![](W_CN.png){.lightbox}\n",
        ":::\n",
        "\n",
        "::: {.callout-tip collapse=\"true\"}\n",
        "## United States\n",
        "\n",
        "Examining income and wealth distribution across United States population in USD (\\$).\n",
        ":::\n",
        "\n",
        "::: {layout-ncol=\"2\"}\n",
        "![](I_US.png){.lightbox}\n",
        "\n",
        "![](W_US.png){.lightbox}\n",
        ":::\n",
        "\n",
        "::: {.callout-tip collapse=\"true\"}\n",
        "## Canada\n",
        "\n",
        "Examining income and wealth distribution across Canada population in USD (\\$).\n",
        ":::\n",
        "\n",
        "::: {layout-ncol=\"2\"}\n",
        "![](I_CA.png){.lightbox}\n",
        "\n",
        "![](W_CA.png){.lightbox}\n",
        ":::\n",
        "\n",
        "::: {.callout-tip collapse=\"true\"}\n",
        "## Australia\n",
        "\n",
        "Examining income and wealth distribution across Australia population in USD (\\$).\n",
        ":::\n",
        "\n",
        "::: {layout-ncol=\"2\"}\n",
        "![](I_AU.png){.lightbox}\n",
        "\n",
        "![](W_AU.png){.lightbox}\n",
        ":::\n",
        "\n",
        "::: {.callout-tip collapse=\"true\"}\n",
        "## Russia\n",
        "\n",
        "Examining income and wealth distribution across Russia population in USD (\\$).\n",
        ":::\n",
        "\n",
        "::: {layout-ncol=\"2\"}\n",
        "![](I_RU.png){.lightbox}\n",
        "\n",
        "![](W_RU.png){.lightbox}\n",
        ":::\n",
        "\n",
        "::: {.callout-tip collapse=\"true\"}\n",
        "## Mexico\n",
        "\n",
        "Examining income and wealth distribution across Mexico population in USD (\\$).\n",
        ":::\n",
        "\n",
        "::: {layout-ncol=\"2\"}\n",
        "![](I_MX.png){.lightbox}\n",
        "\n",
        "![](W_MX.png){.lightbox}\n",
        ":::\n",
        "\n",
        "::: {.callout-tip collapse=\"true\"}\n",
        "## Chile\n",
        "\n",
        "Examining income and wealth distribution across Chile population in USD (\\$).\n",
        ":::\n",
        "\n",
        "::: {layout-ncol=\"2\"}\n",
        "![](I_CL.png){.lightbox}\n",
        "\n",
        "![](W_CL.png){.lightbox}\n",
        ":::\n",
        "\n",
        "::: {.callout-tip collapse=\"true\"}\n",
        "## South Africa\n",
        "\n",
        "Examining income and wealth distribution across United States population in USD (\\$).\n",
        ":::\n",
        "\n",
        "::: {layout-ncol=\"2\"}\n",
        "![](I_ZA.png){.lightbox}\n",
        "\n",
        "![](W_ZA.png){.lightbox}\n",
        ":::\n",
        "\n",
        "::: {.callout-tip collapse=\"true\"}\n",
        "## Qatar\n",
        "\n",
        "Examining income and wealth distribution across United States population in USD (\\$).\n",
        ":::\n",
        "\n",
        "::: {layout-ncol=\"2\"}\n",
        "![](I_QA.png){.lightbox}\n",
        "\n",
        "![](W_QA.png){.lightbox}\n",
        ":::"
      ],
      "id": "f3b6f9b0"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\guill\\AppData\\Roaming\\Python\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}