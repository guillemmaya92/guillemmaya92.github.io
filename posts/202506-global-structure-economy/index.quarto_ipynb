{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Global structure economy: A vision of GDP per capita and population\"\n",
        "\n",
        "description: \"Explores the global distribution of total GDP through a multidimensional perspective, offering a comprehensive view of income distribution across the worldwide population.\"\n",
        "\n",
        "categories: [economy, python]\n",
        "\n",
        "date: \"2025-06-21\"\n",
        "\n",
        "keywords: [\"value chains\"]\n",
        "\n",
        "jupyter: python3\n",
        "\n",
        "format:\n",
        "  html:\n",
        "    code-fold: true\n",
        "---\n",
        "\n",
        "\n",
        "## Summary\n",
        "\n",
        "This animation illustrates how the hegemony exerted by certain nations has aimed to preserve an unequal income distribution by capturing the greater share of the `value chains` over the past decades.\n"
      ],
      "id": "ed0314dd"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| eval: false\n",
        "#| echo: true\n",
        "#| output: false\n",
        "#| warning: false\n",
        "# Libraries\n",
        "# =====================================================================\n",
        "import requests\n",
        "import wbgapi as wb\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "import matplotlib.animation as animation\n",
        "import matplotlib.ticker as ticker\n",
        "\n",
        "# Data Extraction (Countries)\n",
        "# =====================================================================\n",
        "# Extract JSON and bring data to a dataframe\n",
        "url = 'https://raw.githubusercontent.com/guillemmaya92/world_map/main/Dim_Country.json'\n",
        "response = requests.get(url)\n",
        "data = response.json()\n",
        "df = pd.DataFrame(data)\n",
        "df = pd.DataFrame.from_dict(data, orient='index').reset_index()\n",
        "df_countries = df.rename(columns={'index': 'ISO3'})\n",
        "\n",
        "# Data Extraction - WBD (1960-1980)\n",
        "# ========================================================\n",
        "# To use the built-in plotting method\n",
        "indicator = ['NY.GDP.PCAP.CD', 'SP.POP.TOTL']\n",
        "countries = df_countries['ISO3'].tolist()\n",
        "data_range = range(1960, 2024)\n",
        "data = wb.data.DataFrame(indicator, countries, data_range, numericTimeKeys=True, labels=False, columns='series').reset_index()\n",
        "df_wb = data.rename(columns={\n",
        "    'economy': 'ISO3',\n",
        "    'time': 'Year',\n",
        "    'SP.POP.TOTL': 'LP',\n",
        "    'NY.GDP.PCAP.CD': 'NGDPDPC'\n",
        "})\n",
        "\n",
        "# Adjust LP and filter before 1980\n",
        "df_wb['LP'] = df_wb['LP'] / 1000000\n",
        "df_wb = df_wb[df_wb['Year'] < 1980]\n",
        "\n",
        "# Data Extraction - IMF (1980-2030)\n",
        "# =====================================================================\n",
        "#Parametro\n",
        "parameters = ['LP', 'NGDPDPC']\n",
        "\n",
        "# Create an empty list\n",
        "records = []\n",
        "\n",
        "# Iterar sobre cada parámetro\n",
        "for parameter in parameters:\n",
        "    # Request URL\n",
        "    url = f\"https://www.imf.org/external/datamapper/api/v1/{parameter}\"\n",
        "    response = requests.get(url)\n",
        "    data = response.json()\n",
        "    values = data.get('values', {})\n",
        "\n",
        "    # Iterate over each country and year\n",
        "    for country, years in values.get(parameter, {}).items():\n",
        "        for year, value in years.items():\n",
        "            records.append({\n",
        "                'Parameter': parameter,\n",
        "                'ISO3': country,\n",
        "                'Year': int(year),\n",
        "                'Value': float(value)\n",
        "            })\n",
        "    \n",
        "# Create dataframe\n",
        "df_imf = pd.DataFrame(records)\n",
        "\n",
        "# Pivot Parameter to columns and filter nulls\n",
        "df_imf = df_imf.pivot(index=['ISO3', 'Year'], columns='Parameter', values='Value').reset_index()\n",
        "\n",
        "# Filter after 2024\n",
        "df_imf = df_imf[df_imf['Year'] >= 1980]\n",
        "\n",
        "# Data Manipulation\n",
        "# =====================================================================\n",
        "# Concat and filter dataframes\n",
        "df = pd.concat([df_wb, df_imf], ignore_index=True)\n",
        "df = df.dropna(subset=['NGDPDPC', 'LP'], how='any')\n",
        "\n",
        "# Merge queries\n",
        "df = df.merge(df_countries, how='left', left_on='ISO3', right_on='ISO3')\n",
        "df = df[['ISO3', 'Country', 'Year', 'LP', 'NGDPDPC', 'Analytical', 'Region']]\n",
        "df = df[df['Region'].notna()]\n",
        "\n",
        "# Create a list\n",
        "dfs = []\n",
        "\n",
        "# Interpolate monthly data\n",
        "for iso3 in df['ISO3'].unique():\n",
        "    temp_df = df[df['ISO3'] == iso3].copy()\n",
        "    temp_df['Date'] = pd.to_datetime(temp_df['Year'], format='%Y')\n",
        "    temp_df = temp_df[['Date', 'LP', 'NGDPDPC']]\n",
        "    temp_df = temp_df.set_index('Date').resample('ME').mean().interpolate(method='linear').reset_index()\n",
        "    temp_df['ISO3'] = iso3\n",
        "    temp_df['Year'] = temp_df['Date'].dt.year \n",
        "    dfs.append(temp_df)\n",
        "    \n",
        "# Concat dataframes    \n",
        "df = pd.concat(dfs, ignore_index=True)\n",
        "\n",
        "# Filter nulls and order\n",
        "df = df.sort_values(by=['Year', 'NGDPDPC'])\n",
        "\n",
        "# Calculate 'left accrual widths'\n",
        "df['LP_Cum'] = df.groupby('Date')['LP'].cumsum()\n",
        "df['LP_Per'] = df['LP'] / df.groupby('Date')['LP'].transform('sum')\n",
        "df['LP_Cum_Per'] = df['LP_Cum'] / df.groupby('Date')['LP_Cum'].transform('max')\n",
        "df['Left'] = df['LP_Cum_Per'] - df['LP_Per']\n",
        "\n",
        "# Calculate GDP Average weighted by Population and partitioned by Year\n",
        "df['AVG_Weight'] = df.groupby('Date')['NGDPDPC'].transform(lambda x: np.average(x, weights=df.loc[x.index, 'LP']))\n",
        "\n",
        "# Add a total GDP column and cummulative it\n",
        "df['GDP'] = df['NGDPDPC'] * df['LP']\n",
        "df['GDPcum'] = df.groupby('Date')['GDP'].cumsum()\n",
        "df['GDP_Per'] = df['GDP'] / df.groupby('Date')['GDP'].transform('sum')\n",
        "df['NGDPDPC_Change'] = ((df['NGDPDPC'] / df.groupby('ISO3')['NGDPDPC'].transform('first')) - 1) * 100\n",
        "\n",
        "# Copy a df sample to calculate a median\n",
        "df_sample = df.copy()\n",
        "columns = df.columns\n",
        "df_sample = np.repeat(df_sample.values, df_sample['LP'].astype(int), axis=0)\n",
        "df_sample = pd.DataFrame(df_sample, columns=columns)\n",
        "df_sample.dropna(subset=['NGDPDPC'], inplace=True)\n",
        "df_sample['NGDPDPC'] = pd.to_numeric(df_sample['NGDPDPC'], errors='coerce')\n",
        "df_sample['GDPcum'] = df_sample.groupby('Date')['NGDPDPC'].transform('cumsum')\n",
        "\n",
        "# Function to get median row\n",
        "def medianrow(group):\n",
        "    medianrow = len(group) // 2  # Índice de la mitad\n",
        "    return group.iloc[medianrow]\n",
        "df_sample = df_sample.groupby('Date').apply(medianrow).reset_index(drop=True)\n",
        "\n",
        "# Transform columns\n",
        "df_sample = df_sample[['Date', 'NGDPDPC', 'GDPcum']].reset_index(drop=True)\n",
        "df_sample = df_sample.rename(columns={'NGDPDPC': 'Median', 'GDPcum': 'Median_Total'})\n",
        "\n",
        "# Merge queries\n",
        "df = df.merge(df_sample, how='left', on='Date')\n",
        "\n",
        "# Add percentage bottom 50\n",
        "df['Median_Total_Per'] = df['Median_Total'] / df.groupby('Date')['GDP'].transform('sum')\n",
        "\n",
        "print(df)\n",
        " \n",
        "# Data Visualization\n",
        "# =====================================================================\n",
        "# Seaborn figure style\n",
        "sns.set(style=\"whitegrid\")\n",
        "fig, ax = plt.subplots(figsize=(16, 9))\n",
        "\n",
        "# Create a palette\n",
        "palette = sns.color_palette(\"coolwarm\", as_cmap=True).reversed()\n",
        "\n",
        "# Function to refresh animation\n",
        "def update(date):\n",
        "    plt.clf()\n",
        "    subset = df[df['Date'] == date]\n",
        "    subset_usa = subset[subset['ISO3'] == 'USA'].copy()\n",
        "    \n",
        "    # Normalize GDPcum in a range [0, 1]\n",
        "    gdp_min = subset['GDPcum'].min()\n",
        "    gdp_max = subset_usa['GDPcum'].max()\n",
        "    norm = plt.Normalize(gdp_min, gdp_max)\n",
        "    colors = palette(norm(subset['GDPcum']))\n",
        "    \n",
        "    # Create a Matplotlib plot\n",
        "    bars = plt.bar(subset['Left'], subset['NGDPDPC'], width=subset['LP_Per'], \n",
        "            color=colors, alpha=1, align='edge', edgecolor='grey', linewidth=0.1)\n",
        "    \n",
        "    # Configuration grid and labels\n",
        "    plt.text(0, 1.05, 'Distribution of Global GDP', fontsize=13, fontweight='bold', ha='left', transform=plt.gca().transAxes)\n",
        "    plt.text(0, 1.02, 'Evolution of Countries from 1960 to 2029', fontsize=9, color='#262626', ha='left', transform=plt.gca().transAxes)\n",
        "    plt.xlim(0, subset['LP_Cum_Per'].max())\n",
        "    plt.ylim(0, subset_usa['NGDPDPC'].max() * 1.05)\n",
        "    plt.grid(axis='x')\n",
        "    plt.grid(axis='y', linestyle='--', linewidth=0.5, color='lightgray')\n",
        "    plt.xlabel('Cumulative Global Population (%)', fontsize=10, fontweight='bold')\n",
        "    plt.ylabel('GDP per capita (US$)', fontsize=10, fontweight='bold')\n",
        "    plt.tick_params(axis='x', labelsize=9)\n",
        "    plt.tick_params(axis='y', labelsize=9)\n",
        "    plt.gca().xaxis.set_major_formatter(ticker.FuncFormatter(lambda x, _: f'{int(x*100):,}%'))\n",
        "    plt.gca().yaxis.set_major_formatter(ticker.FuncFormatter(lambda x, _: f'{int(round(x, -3)):,}'))\n",
        "    plt.xticks(np.linspace(0, subset['LP_Cum_Per'].max(), 5))\n",
        "    plt.yticks(np.linspace(0, subset_usa['NGDPDPC'].max() * 1.05, 8))\n",
        "        \n",
        "    # Add Labels to relevant countries\n",
        "    for bar, value, country in zip(bars, subset['GDP'], subset['ISO3']):\n",
        "        if country in ['CHN', 'IND', 'USA', 'IDN', 'PAK', 'NGA', 'BRA', 'BGD', 'RUS', 'MEX', 'JPN', 'VNM', 'DEU', 'GBR']:\n",
        "            plt.gca().text(bar.get_x() + bar.get_width()/2, bar.get_height(),\n",
        "                        f'{country}\\n{''}', ha='center', va='bottom', fontsize=7, color='grey')\n",
        "\n",
        "    # Add Median Line and Label\n",
        "    median = subset['Median'].max()\n",
        "    median_total = subset.iloc[0]['Median_Total']\n",
        "    median_total_per = subset.iloc[0]['Median_Total_Per']\n",
        "    maxis = subset_usa['NGDPDPC'].max()\n",
        "    \n",
        "    plt.axhline(\n",
        "        y=median,\n",
        "        color='darkred', \n",
        "        linestyle='--', \n",
        "        linewidth=0.5)\n",
        "\n",
        "    plt.text(\n",
        "        x=subset['Left'].max() * 0.02,\n",
        "        y=median + (maxis * 0.06),\n",
        "        s=f'GDP Capita Median: {median:,.0f}',\n",
        "        color='darkred',\n",
        "        verticalalignment='bottom',\n",
        "        horizontalalignment='left',\n",
        "        fontsize=10,\n",
        "        weight='bold') \n",
        "\n",
        "    plt.gca().text(\n",
        "                subset['Left'].max() * 0.02,\n",
        "                median + (maxis * 0.04),\n",
        "                f'Bottom 50 - Total GDP: {median_total:,.0f} MM ({median_total_per * 100:.2f}%)', \n",
        "                ha='left', va='center', \n",
        "                fontsize=9, \n",
        "                color='#737373')\n",
        "    \n",
        "    # Add USA Line and Label\n",
        "    pibc_usa = subset_usa.iloc[0]['NGDPDPC']\n",
        "    pib_usa = subset_usa.iloc[0]['GDP']\n",
        "    pib_usa_per = subset_usa.iloc[0]['GDP_Per']\n",
        "    \n",
        "    plt.axhline(\n",
        "        y=pibc_usa, \n",
        "        color='darkblue', \n",
        "        linestyle='--', \n",
        "        linewidth=0.5)\n",
        "    \n",
        "    plt.text(\n",
        "        x=subset['Left'].max() * 0.02,\n",
        "        y=pibc_usa * 0.95,\n",
        "        s=f'GDP Capita USA: {pibc_usa:,.0f}',\n",
        "        color='darkblue',\n",
        "        fontsize=10,\n",
        "        verticalalignment='bottom',\n",
        "        horizontalalignment='left',\n",
        "        weight='bold')\n",
        "\n",
        "    plt.gca().text(\n",
        "                subset['Left'].max() * 0.02,\n",
        "                pibc_usa * 0.93,\n",
        "                f'USA - Total GDP: {pib_usa:,.0f} MM ({pib_usa_per * 100:.2f}%)', \n",
        "                ha='left', va='center', \n",
        "                fontsize=9, \n",
        "                color='#737373')\n",
        "\n",
        "    # Cover countries going outside plot\n",
        "    formatted_date = date.strftime('%Y-%m') \n",
        "    plt.text(1, 1.15, f'{formatted_date}',\n",
        "             transform=plt.gca().transAxes,\n",
        "             fontsize=22, ha='right', va='top',\n",
        "             fontweight='bold', color='white',\n",
        "             bbox=dict(facecolor='white', edgecolor='none', boxstyle='square,pad=1'))\n",
        "\n",
        "    # Add Year label\n",
        "    plt.text(1, 1.06, f'{formatted_date}',\n",
        "             transform=plt.gca().transAxes,\n",
        "             fontsize=22, ha='right', va='top',\n",
        "             fontweight='bold', color='#D3D3D3',\n",
        "             bbox=dict(facecolor='white', edgecolor='none', boxstyle='square,pad=0.3'))\n",
        "    \n",
        "    # Add Data Source\n",
        "    plt.text(0, -0.1, 'Data Source: IMF World Economic Outlook Database, 2024 | World Bank national accounts data, and OECD National Accounts data files.', \n",
        "            transform=plt.gca().transAxes, \n",
        "            fontsize=8, \n",
        "            color='gray')\n",
        "    \n",
        "    # Add author\n",
        "    plt.text(1, -0.1, '@guillemmaya.com', \n",
        "         transform=plt.gca().transAxes, \n",
        "         fontsize=8, \n",
        "         color='#212121', \n",
        "         ha='right')\n",
        "\n",
        "    # Add label \"poorest\" and \"richest\"\n",
        "    plt.text(0, -0.065, 'Poorest',\n",
        "             transform=ax.transAxes,\n",
        "             fontsize=12, fontweight='bold', color='darkred', ha='left', va='center')\n",
        "    plt.text(0.95, -0.065, 'Richest',\n",
        "             transform=ax.transAxes,\n",
        "             fontsize=12, fontweight='bold', color='darkblue', va='center')\n",
        "\n",
        "# Configurate animation\n",
        "dates = sorted(df['Date'].unique())\n",
        "ani = animation.FuncAnimation(fig, update, frames=dates, repeat=False, interval=500, blit=False)\n",
        "\n",
        "# Save the animation :)\n",
        "ani.save('C:/Users/guill/Downloads/FIG_GDP_Capita_Bars_1960.webp', writer='imagemagick', fps=15)\n",
        "\n",
        "# Print it!\n",
        "plt.show()"
      ],
      "id": "2e5c62f3",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "![](FIG_GDP_Capita_Bars_1960.webp){.lightbox width=\"125%\"}"
      ],
      "id": "15df54ed"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\guill\\AppData\\Roaming\\Python\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}