{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Lorenz Curves: A global and national perspectives\"\n",
        "\n",
        "description: \"The charts show the distribution of income and wealth among countries and globally.\"\n",
        "\n",
        "categories: [economy, python]\n",
        "\n",
        "date: \"2025-05-18\"\n",
        "\n",
        "keywords: [\"lorenz curves\"]\n",
        "\n",
        "format:\n",
        "  html:\n",
        "    code-fold: true\n",
        "---\n",
        "\n",
        "\n",
        "## Summary\n",
        "\n",
        "This is a global graphical representation of income and wealth for the years 1995 and 2021. Illustrating the dynamics of inequality by comparing Gini indices through Lorenz curves, both within (intra-country) and between (inter-country) nations.\n"
      ],
      "id": "8a4174e9"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| eval: false\n",
        "#| echo: true\n",
        "#| output: false\n",
        "#| warning: false\n",
        "# Libraries\n",
        "# ===================================================\n",
        "import requests\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "import matplotlib.lines as mlines\n",
        "import matplotlib.patheffects as patheffects\n",
        "\n",
        "# Parameters\n",
        "# =====================================================================\n",
        "# Select between Income/Wealth\n",
        "selection = 'Income'\n",
        "year = 2021\n",
        "\n",
        "# Data Extraction (Countries)\n",
        "# =====================================================================\n",
        "# Extract JSON and bring data to a dataframe\n",
        "url = 'https://raw.githubusercontent.com/guillemmaya92/world_map/main/Dim_Country.json'\n",
        "response = requests.get(url)\n",
        "data = response.json()\n",
        "df = pd.DataFrame(data)\n",
        "df = pd.DataFrame.from_dict(data, orient='index').reset_index()\n",
        "df_countries = df.rename(columns={'index': 'ISO3'})\n",
        "\n",
        "# Data Extraction (Percentages)\n",
        "# ===================================================\n",
        "# URL GitHub\n",
        "url = \"https://raw.githubusercontent.com/guillemmaya92/Python/main/Data/WID_Percentiles.parquet\"\n",
        "\n",
        "# Extract data from parquet\n",
        "df = pd.read_parquet(url, engine='pyarrow')\n",
        "\n",
        "# Filter year\n",
        "df = df[df['year'] == year]\n",
        "\n",
        "# Data Extraction (Values)\n",
        "# ===================================================\n",
        "# URL GitHub\n",
        "url = \"https://raw.githubusercontent.com/guillemmaya92/Python/main/Data/WID_Values.parquet\"\n",
        "\n",
        "# Extract data from parquet\n",
        "dfv = pd.read_parquet(url, engine='pyarrow')\n",
        "\n",
        "# Filter year\n",
        "dfv = dfv[dfv['year'] == year]\n",
        "\n",
        "# Extract world values\n",
        "gincomew = dfv.loc[dfv['country'] == 'WO', 'gincome'].iloc[0]\n",
        "gwealthw = dfv.loc[dfv['country'] == 'WO', 'gwealth'].iloc[0]\n",
        "\n",
        "# Extract countries weighted average values\n",
        "dfincome = dfv[dfv['country'].isin(df_countries['ISO2']) & dfv['gincome'].notnull() & dfv['population'].notnull()]\n",
        "dfwealth = dfv[dfv['country'].isin(df_countries['ISO2']) & dfv['gwealth'].notnull() & dfv['population'].notnull()]\n",
        "\n",
        "gincomec = np.average(dfincome['gincome'], weights= dfincome['population'])\n",
        "gwealthc = np.average(dfwealth['gwealth'], weights= dfwealth['population'])\n",
        "\n",
        "# Dynamic value\n",
        "giniw = round(gwealthw, 2) if selection == 'Wealth' else round(gincomew, 2)\n",
        "ginic= round(gwealthc, 2) if selection == 'Wealth' else round(gincomec, 2)\n",
        "\n",
        "# Data Manipulation\n",
        "# ===================================================\n",
        "# Calculate cummulative\n",
        "df['percentile'] =  df['percentile'] / 100\n",
        "df['income'] =  df['income'] / 100\n",
        "df['wealth'] =  df['wealth'] / 100\n",
        "df['income_cum'] =  df.groupby(['country'])['income'].cumsum() / df.groupby(['country'])['income'].transform('sum')\n",
        "df['wealth_cum'] =  df.groupby(['country'])['wealth'].cumsum() / df.groupby(['country'])['wealth'].transform('sum')\n",
        "df['value_cum'] = df['income_cum'] if selection == 'Income' else df['wealth_cum']\n",
        "\n",
        "# Countries\n",
        "dfc = df.merge(df_countries, how='left', left_on='country', right_on='ISO2')\n",
        "dfc = dfc[dfc['Region'].notna()]\n",
        "dfc = dfc[['country', 'percentile', 'value_cum']]\n",
        "\n",
        "# World\n",
        "dfw = df[df['country'] == \"WO\"]\n",
        "dfw = dfw[['country', 'percentile', 'value_cum']]\n",
        "dfw['country'] = 'Inter-Countries'\n",
        "\n",
        "print(df)\n",
        "\n",
        "# Data Visualization\n",
        "# ===================================================\n",
        "# Font Style\n",
        "plt.rcParams.update({'font.family': 'sans-serif', 'font.sans-serif': ['Open Sans'], 'font.size': 10})\n",
        "plt.figure(figsize=(10, 10))\n",
        "\n",
        "# Basic Grey Plot Lines\n",
        "sns.lineplot(\n",
        "    data=dfc, \n",
        "    x=\"percentile\", \n",
        "    y=\"value_cum\", \n",
        "    hue=\"country\",\n",
        "    linewidth=0.4,\n",
        "    alpha=0.5,\n",
        "    palette=['#808080']\n",
        ").legend_.remove()\n",
        "\n",
        "# Black Shadow Plot Lines\n",
        "sns.lineplot(\n",
        "    data=dfw, \n",
        "    x=\"percentile\", \n",
        "    y=\"value_cum\", \n",
        "    hue=\"country\",\n",
        "    linewidth=2.25,\n",
        "    alpha=1,\n",
        "    palette=['black']\n",
        ").legend_.remove()\n",
        "\n",
        "# Color Plot Lines\n",
        "sns.lineplot(\n",
        "    data=dfw, \n",
        "    x=\"percentile\", \n",
        "    y=\"value_cum\", \n",
        "    hue=\"country\",\n",
        "    linewidth=1.5,\n",
        "    alpha=1,\n",
        "    palette=['#FF0000']\n",
        ").legend_.remove()\n",
        "\n",
        "# Add Inequality lines\n",
        "plt.plot([0, 1], [0, 1], color=\"gray\", linestyle=\"-\", linewidth=1)\n",
        "\n",
        "# Configuración del gráfico\n",
        "plt.text(0, 1.05, f'Global {selection} Distribution', fontsize=13, fontweight='bold', ha='left', transform=plt.gca().transAxes)\n",
        "plt.text(0, 1.02, 'A global and national perspective on Lorenz curves', fontsize=9, color='#262626', ha='left', transform=plt.gca().transAxes)\n",
        "plt.xlabel('Cumulative Population (%)', fontsize=10, fontweight='bold')\n",
        "plt.ylabel(f'Cumulative {selection} (%)', fontsize=10, fontweight='bold')\n",
        "plt.xlim(0, 1)\n",
        "plt.ylim(0, 1)\n",
        "\n",
        "# Adjust grid and layout\n",
        "plt.grid(True, linestyle='-', color='grey', linewidth=0.08)\n",
        "plt.gca().set_aspect('equal', adjustable='box')\n",
        "\n",
        "# Add Data Source\n",
        "plt.text(0, -0.1, 'Data Source: World Inequality Database (WID)', \n",
        "    transform=plt.gca().transAxes, \n",
        "    fontsize=8,\n",
        "    fontweight='bold',\n",
        "    color='gray')\n",
        "\n",
        "# Variable notes\n",
        "noteincome = 'Income: Post-tax national income is the sum of primary incomes over all sectors (private and public), minus taxes.'\n",
        "notewealth = 'Wealth: Total value of non-financial and financial assets held by households, minus their debts.'\n",
        "note = noteincome if selection == 'income' else notewealth\n",
        "\n",
        "# Add Notes\n",
        "plt.text(0, -0.12, note, \n",
        "    transform=plt.gca().transAxes, \n",
        "    fontsize=7,\n",
        "    fontstyle='italic',\n",
        "    color='gray')\n",
        "\n",
        "# Add Author\n",
        "plt.text(0.85, -0.1, '@guillemmaya.com', \n",
        "    transform=plt.gca().transAxes, \n",
        "    fontsize=9,\n",
        "    fontstyle='italic',\n",
        "    color='#212121')\n",
        "\n",
        " # Add Year label\n",
        "formatted_date = year\n",
        "plt.text(1, 1.06, f'{formatted_date}',\n",
        "    transform=plt.gca().transAxes,\n",
        "    fontsize=22, ha='right', va='top',\n",
        "    fontweight='bold', color='#D3D3D3')\n",
        "\n",
        "# Create custom lines\n",
        "intra_line = mlines.Line2D([], [], color='#808080', label=f'Gini Intra-Countries: {ginic}', linewidth=2)\n",
        "inter_line = mlines.Line2D([], [], color='#FF0000', label=f'Gini Inter-Countries: {giniw}', linewidth=2)\n",
        "inter_line.set_path_effects([patheffects.withStroke(linewidth=4, foreground='black')])\n",
        "inter_circle = mlines.Line2D([], [], marker='o', color='w', markerfacecolor='#FF0000', markeredgecolor='black', markersize=8, label='Inter-Countries', linewidth=0)\n",
        "\n",
        "# Add custom legend\n",
        "plt.legend(handles=[intra_line, inter_line])\n",
        "\n",
        "# Save the figure\n",
        "plt.savefig('C:/Users/guill/Desktop/FIG_WID_Global_Lorenz_Curves.png', format='png', dpi=300, bbox_inches='tight')\n",
        "\n",
        "# Show the plot!\n",
        "plt.show()"
      ],
      "id": "003d2506",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "::: {layout-ncol=\"2\"}\n",
        "![](income_1995.jpeg){.lightbox}\n",
        "\n",
        "![](wealth_1995.jpeg){.lightbox}\n",
        ":::\n",
        "\n",
        "::: {style=\"height: 1rem;\"}\n",
        ":::\n",
        "\n",
        "::: {layout-ncol=\"2\"}\n",
        "![](income_2021.jpeg){.lightbox}\n",
        "\n",
        "![](wealth_2021.jpeg){.lightbox}\n",
        ":::"
      ],
      "id": "1c769d97"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\guill\\AppData\\Roaming\\Python\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}