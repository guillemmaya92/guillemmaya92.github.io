{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Inside Airbnb: Listing concentration by host\"\n",
        "\n",
        "description: \"Who is really behind the hosted accounts on Airbnb? A \\\"pretty\\\" idea that was born as a result of high rental prices in San Francisco and ended up taxing its revenue in Ireland.\"\n",
        "\n",
        "categories: [economy, python]\n",
        "\n",
        "date: \"2025-11-03\"\n",
        "\n",
        "keywords: [\"liberalization\"]\n",
        "\n",
        "image: FIG_Airbnb_Countries.png\n",
        "image-alt: |\n",
        "  Temperature_Anomalies\n",
        "\n",
        "jupyter: python3\n",
        "\n",
        "format:\n",
        "  html:\n",
        "    code-fold: true\n",
        "---\n",
        "\n",
        "\n",
        "## Summary\n",
        "\n",
        "Airbnb, a platform that offers intermediary services between tenants and property owners, has become a challenge in many cities, as well as a controversial topic for defending `liberalization` and low regulation of the housing market.\n",
        "\n",
        "This chart is a replica of the one published by Anna Gordun on <a href=\"https://towardsdatascience.com/who-really-owns-the-airbnbs-youre-booking-marketing-perception-vs-data-analytics-reality-94407a32679c/\" style=\"color: lightblue;\">towardsdatascience</a>, with the addition of direct data extraction using BeautifulSoup and an alternative to her code using pandas and matplotlib.\n"
      ],
      "id": "609aefb4"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| eval: false\n",
        "#| echo: true\n",
        "#| output: false\n",
        "#| warning: false\n",
        "# Libraries\n",
        "# ==========================================\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "import requests\n",
        "from bs4 import BeautifulSoup\n",
        "from io import StringIO\n",
        "\n",
        "# Data Extraction (insideairbnb)\n",
        "# ==========================================\n",
        "# Extract url pages in a dataframe\n",
        "url = \"https://insideairbnb.com/get-the-data/\"\n",
        "response = requests.get(url)\n",
        "response.encoding = 'utf-8'\n",
        "soup = BeautifulSoup(response.text, 'html.parser')\n",
        "\n",
        "# Get unique URLs that contain 'listings.csv'\n",
        "listings_urls = set(a['href'] for a in soup.find_all('a', href=True) if a['href'].endswith('listings.csv'))\n",
        "\n",
        "# Convert the set back to a DataFrame\n",
        "df_urls = pd.DataFrame(list(listings_urls), columns=[\"url\"])\n",
        "\n",
        "# Add city, province and country\n",
        "df_urls['city'] = df_urls['url'].apply(lambda x: x.strip('/').split('/')[-4].title() if len(x.strip('/').split('/')) >= 4 else None)\n",
        "df_urls['province'] = df_urls['url'].apply(lambda x: x.strip('/').split('/')[-5].title() if len(x.strip('/').split('/')) >= 5 else None)\n",
        "df_urls['country'] = df_urls['url'].apply(lambda x: x.strip('/').split('/')[-6].title() if len(x.strip('/').split('/')) >= 6 else None)\n",
        "\n",
        "# Solve empty values \n",
        "df_urls['country'] = df_urls.apply(lambda row: row['city'] if row['province'] == \"Data.Insideairbnb.Com\" else row['country'], axis=1)\n",
        "df_urls['country'] = df_urls.apply(lambda row: row['province'] if row['country'] == \"Data.Insideairbnb.Com\" else row['country'], axis=1)\n",
        "df_urls['province'] = df_urls.apply(lambda row: row['city'] if row['province'] == \"Data.Insideairbnb.Com\" else row['province'], axis=1)\n",
        "\n",
        "# Filter cities and convert to list\n",
        "urls = df_urls.to_dict(orient='records')\n",
        "\n",
        "# Create empty list\n",
        "dfs = []\n",
        "\n",
        "# Iterate over each url and city in the list of dictionaries\n",
        "for entry in urls:\n",
        "    url = entry['url']\n",
        "    city = entry['city']\n",
        "    province = entry['province']\n",
        "    country = entry['country']\n",
        "    response = requests.get(url)\n",
        "    df = pd.read_csv(StringIO(response.text), encoding='utf-8')\n",
        "    df['city'] = city\n",
        "    df['province'] = province\n",
        "    df['country'] = country\n",
        "    dfs.append(df)\n",
        "\n",
        "# Concatenate dataframes\n",
        "df = pd.concat(dfs, axis=0, ignore_index=True)\n",
        "\n",
        "# Data Manipulation\n",
        "# ==========================================\n",
        "# Group and category data\n",
        "host_count = df.groupby(['host_id']).size().reset_index(name='count')\n",
        "bins = [0, 1, 2, 5, 10, 100, float('inf')]\n",
        "labels = ['1', '2', '+2', '+5', '+10', '+100']\n",
        "host_count['host_category'] = pd.cut(host_count['count'], bins=bins, labels=labels, right=True)\n",
        "\n",
        "# Join and select columns\n",
        "df = pd.merge(df, host_count, on='host_id', how='left')\n",
        "df = df[['country', 'id', 'host_id', 'host_name', 'host_category', 'count', 'license']]\n",
        "\n",
        "# Check if have license\n",
        "df['license_category'] = df['license'].apply(lambda x: 0 if pd.isna(x) or x == 'Exempt' else 1)\n",
        "\n",
        "# Grouping by host category\n",
        "df = df.groupby(['country', 'host_category']).agg(\n",
        "    {'id': 'count', 'license_category': 'sum'}).reset_index()\n",
        "\n",
        "# Rename columns\n",
        "df = df.rename(columns={'id': 'property', 'license_category': 'license'})\n",
        "\n",
        "# Calculate percents\n",
        "df['side'] = np.where(df['host_category'].isin(['1', '2']), 'left', 'right')\n",
        "df['property_percent'] = df['property'] / df.groupby('country')['property'].transform('sum') * 100\n",
        "df['property_percent'] *= df['side'].eq('left').map({True: -1, False: 1})\n",
        "\n",
        "# Pivot columns\n",
        "df_pivot = df.pivot(index=\"country\", columns=\"host_category\", values=\"property_percent\").fillna(0)\n",
        "\n",
        "# Define column with values for individuals and professionals\n",
        "df_pivot['total_left'] = df_pivot['1'] + df_pivot['2']\n",
        "df_pivot['total_right'] = df_pivot['+2'] + df_pivot['+5'] + df_pivot['+10'] + df_pivot['+100']\n",
        "df_pivot = df_pivot.sort_values(by='total_left', ascending=True)\n",
        "\n",
        "# Select and order columns\n",
        "order = [\"2\", \"1\", \"+2\", \"+5\", \"+10\", \"+100\"]\n",
        "dfplot = df_pivot[order]\n",
        "\n",
        "print(dfplot)\n",
        "\n",
        "# Data Visualization\n",
        "# ==========================================\n",
        "# Font and style\n",
        "plt.rcParams.update({'font.family': 'sans-serif', 'font.sans-serif': ['Franklin Gothic'], 'font.size': 9})\n",
        "sns.set(style=\"white\", palette=\"muted\")\n",
        "\n",
        "# Palette color\n",
        "palette = [\"#537c78\", \"#7ba591\", \"#cc222b\", \"#f15b4c\", \"#faa41b\", \"#ffd45b\"]\n",
        "\n",
        "# Create horizontal stack bar plot\n",
        "ax = dfplot.plot(kind=\"barh\", stacked=True, figsize=(10, 7), width=0.7, color=palette)\n",
        "\n",
        "# Add title and labels\n",
        "ax.text(0, 1.12, f'Who is your Airbnb host?', fontsize=16, fontweight='bold', ha='left', transform=ax.transAxes)\n",
        "ax.text(0, 1.07, f'% of airbnb listings in European countries managed by singles/multiproperty hosts', fontsize=11, color='#262626', ha='left', transform=ax.transAxes)\n",
        "ax.set_xlim(-100, 100)\n",
        "xticks = np.linspace(-75, 75, 7)\n",
        "plt.xticks(xticks, labels=[f\"{abs(int(i))}%\" for i in xticks], fontsize=7)\n",
        "plt.gca().set_ylabel('')\n",
        "plt.yticks(fontsize=8, color='#282828', fontweight='bold')\n",
        "plt.grid(axis='x', linestyle='--', color='gray', linewidth=0.5, alpha=0.3)\n",
        "plt.axvline(x=0, color='#282828', linestyle='-', linewidth=1.5, alpha=0.7)\n",
        "\n",
        "# Add individual and professional text\n",
        "plt.text(0.25, 1.02, 'Individual', fontsize=9.5, fontweight='bold', va='center', ha='center', transform=ax.transAxes, color=\"#537c78\")\n",
        "plt.text(0.75, 1.02, 'Professional', fontsize=9.5, fontweight='bold', va='center', ha='center', transform=ax.transAxes, color=\"#faa41b\")\n",
        "\n",
        "# Add strict regulation zone\n",
        "ynum = 14\n",
        "ax.axvspan(-100, 100, ymin=0, ymax=ynum/len(dfplot), color='gray', alpha=0.1)\n",
        "plt.axhline(y=ynum-0.5, color='#282828', linestyle='--', linewidth=0.5, alpha=0.3)\n",
        "plt.text(-100, ynum-0.3, 'Countries with strict Airbnb Regulations', fontsize=6, fontweight='bold', color=\"gray\")\n",
        "\n",
        "# Add values for individual bars\n",
        "for i, (city, total) in enumerate(zip(dfplot.index, df_pivot['total_left'])):\n",
        "    ax.text(total - 1, i, f'{abs(total):.0f}', va='center', ha='right', fontsize=7, color='grey')\n",
        "\n",
        "# Add values for professional bars\n",
        "for i, (city, total) in enumerate(zip(dfplot.index, df_pivot['total_right'])):\n",
        "    ax.text(total + 1, i, f'{total:.0f} ', va='center', ha='left', fontsize=7, color='grey')\n",
        "\n",
        "# Legend configuration\n",
        "plt.plot([], [], label=\"Number of properties per host: \", color='white')\n",
        "plt.legend(\n",
        "    loc='lower center', \n",
        "    bbox_to_anchor=(0.5, -0.1),\n",
        "    ncol=7,\n",
        "    fontsize=8,\n",
        "    frameon=False,\n",
        "    handlelength=1,\n",
        "    handleheight=1,\n",
        "    borderpad=0.2,\n",
        "    columnspacing=0.2\n",
        ")\n",
        "\n",
        "# Add Data Source\n",
        "plt.text(0, -0.12, 'Data Source:', \n",
        "    transform=plt.gca().transAxes, \n",
        "    fontsize=8,\n",
        "    fontweight='bold',\n",
        "    color='gray')\n",
        "space = \" \" * 23\n",
        "plt.text(0, -0.12, space + 'Inside Airbnb', \n",
        "    transform=plt.gca().transAxes, \n",
        "    fontsize=8,\n",
        "    color='gray')\n",
        "\n",
        "# Remove spines\n",
        "for spine in plt.gca().spines.values():\n",
        "    spine.set_visible(False)\n",
        "    \n",
        "# Plot it! :)\n",
        "plt.show()"
      ],
      "id": "c27c3a5c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "<div style=\"text-align: center;\">\n",
        "  ![](FIG_Airbnb_Countries.png){.lightbox width=\"100%\"}\n",
        "</div>\n"
      ],
      "id": "62dd79db"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| eval: false\n",
        "#| echo: true\n",
        "#| output: false\n",
        "#| warning: false\n",
        "# Libraries\n",
        "# ==========================================\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "import requests\n",
        "from bs4 import BeautifulSoup\n",
        "import re\n",
        "from io import StringIO\n",
        "\n",
        "# Data Extraction (insideairbnb)\n",
        "# ==========================================\n",
        "# Extract url pages in a dataframe\n",
        "url = \"https://insideairbnb.com/get-the-data/\"\n",
        "response = requests.get(url)\n",
        "response.encoding = 'utf-8'\n",
        "soup = BeautifulSoup(response.text, 'html.parser')\n",
        "\n",
        "# Get unique URLs that contain 'listings.csv'\n",
        "listings_urls = set(a['href'] for a in soup.find_all('a', href=True) if a['href'].endswith('listings.csv'))\n",
        "\n",
        "# Convert the set back to a DataFrame\n",
        "df_urls = pd.DataFrame(list(listings_urls), columns=[\"url\"])\n",
        "\n",
        "# Add city, province and country\n",
        "df_urls['city'] = df_urls['url'].apply(lambda x: x.strip('/').split('/')[-4].title() if len(x.strip('/').split('/')) >= 4 else None)\n",
        "df_urls['province'] = df_urls['url'].apply(lambda x: x.strip('/').split('/')[-5].title() if len(x.strip('/').split('/')) >= 5 else None)\n",
        "df_urls['country'] = df_urls['url'].apply(lambda x: x.strip('/').split('/')[-6].title() if len(x.strip('/').split('/')) >= 6 else None)\n",
        "\n",
        "# Solve empty values \n",
        "df_urls['country'] = df_urls.apply(lambda row: row['city'] if row['province'] == \"Data.Insideairbnb.Com\" else row['country'], axis=1)\n",
        "df_urls['country'] = df_urls.apply(lambda row: row['province'] if row['country'] == \"Data.Insideairbnb.Com\" else row['country'], axis=1)\n",
        "df_urls['province'] = df_urls.apply(lambda row: row['city'] if row['province'] == \"Data.Insideairbnb.Com\" else row['province'], axis=1)\n",
        "\n",
        "# Filter cities and convert to list\n",
        "cities = {\"Girona\", \"Barcelona\", \"Amsterdam\", \"Prague\", \"Mallorca\", \"Lisbon\", \"Malaga\", \"Athens\", \"Viena\", \"Crete\", \"Florence\", \"London\", \"Edinburgh\", \"Rome\", \"Paris\", \"Copenhagen\", \"Andalucia\"}\n",
        "df_urls = df_urls[df_urls['city'].isin(cities)]\n",
        "urls = df_urls.to_dict(orient='records')\n",
        "\n",
        "# Create empty list\n",
        "dfs = []\n",
        "\n",
        "# Iterate over each url and city in the list of dictionaries\n",
        "for entry in urls:\n",
        "    url = entry['url']\n",
        "    city = entry['city']\n",
        "    province = entry['province']\n",
        "    country = entry['country']\n",
        "    response = requests.get(url)\n",
        "    df = pd.read_csv(StringIO(response.text), encoding='utf-8')\n",
        "    df['city'] = city\n",
        "    df['province'] = province\n",
        "    df['country'] = country\n",
        "    dfs.append(df)\n",
        "\n",
        "# Concatenate dataframes\n",
        "df = pd.concat(dfs, axis=0, ignore_index=True)\n",
        "\n",
        "# Data Manipulation\n",
        "# ==========================================\n",
        "# Group and category data\n",
        "host_count = df.groupby(['host_id']).size().reset_index(name='count')\n",
        "bins = [0, 1, 2, 5, 10, 100, float('inf')]\n",
        "labels = ['1', '2', '+2', '+5', '+10', '+100']\n",
        "host_count['host_category'] = pd.cut(host_count['count'], bins=bins, labels=labels, right=True)\n",
        "\n",
        "# Join and select columns\n",
        "df = pd.merge(df, host_count, on='host_id', how='left')\n",
        "df = df[['city', 'id', 'host_id', 'host_name', 'host_category', 'count', 'license']]\n",
        "\n",
        "# Check if have license\n",
        "df['license_category'] = df['license'].apply(lambda x: 0 if pd.isna(x) or x == 'Exempt' else 1)\n",
        "\n",
        "# Grouping by host category\n",
        "df = df.groupby(['city', 'host_category']).agg(\n",
        "    {'id': 'count', 'license_category': 'sum'}).reset_index()\n",
        "\n",
        "# Rename columns\n",
        "df = df.rename(columns={'id': 'property', 'license_category': 'license'})\n",
        "\n",
        "# Calculate percents\n",
        "df['side'] = np.where(df['host_category'].isin(['1', '2']), 'left', 'right')\n",
        "df['property_percent'] = df['property'] / df.groupby('city')['property'].transform('sum') * 100\n",
        "df['property_percent'] *= df['side'].eq('left').map({True: -1, False: 1})\n",
        "\n",
        "# Pivot columns\n",
        "df_pivot = df.pivot(index=\"city\", columns=\"host_category\", values=\"property_percent\").fillna(0)\n",
        "\n",
        "# Define column with values for individuals and professionals\n",
        "df_pivot['total_left'] = df_pivot['1'] + df_pivot['2']\n",
        "df_pivot['total_right'] = df_pivot['+2'] + df_pivot['+5'] + df_pivot['+10'] + df_pivot['+100']\n",
        "df_pivot = df_pivot.sort_values(by='total_left', ascending=True)\n",
        "\n",
        "# Select and order columns\n",
        "order = [\"2\", \"1\", \"+2\", \"+5\", \"+10\", \"+100\"]\n",
        "dfplot = df_pivot[order]\n",
        "\n",
        "print(dfplot)\n",
        "\n",
        "# Data Visualization\n",
        "# ==========================================\n",
        "# Font and style\n",
        "plt.rcParams.update({'font.family': 'sans-serif', 'font.sans-serif': ['Franklin Gothic'], 'font.size': 9})\n",
        "sns.set(style=\"white\", palette=\"muted\")\n",
        "\n",
        "# Palette color\n",
        "palette = [\"#537c78\", \"#7ba591\", \"#cc222b\", \"#f15b4c\", \"#faa41b\", \"#ffd45b\"]\n",
        "\n",
        "# Create horizontal stack bar plot\n",
        "ax = dfplot.plot(kind=\"barh\", stacked=True, figsize=(10, 6), width=0.7, color=palette)\n",
        "\n",
        "# Add title and labels\n",
        "ax.text(0, 1.12, f'Who is your Airbnb host?', fontsize=16, fontweight='bold', ha='left', transform=ax.transAxes)\n",
        "ax.text(0, 1.07, f'% of airbnb listings in European cities owned by singles/multiproperty hosts', fontsize=11, color='#262626', ha='left', transform=ax.transAxes)\n",
        "ax.set_xlim(-100, 100)\n",
        "xticks = np.linspace(-75, 75, 7)\n",
        "plt.xticks(xticks, labels=[f\"{abs(int(i))}%\" for i in xticks], fontsize=8)\n",
        "plt.gca().set_ylabel('')\n",
        "plt.yticks(fontsize=9, color='#282828', fontweight='bold')\n",
        "plt.grid(axis='x', linestyle='--', color='gray', linewidth=0.5, alpha=0.3)\n",
        "plt.axvline(x=0, color='#282828', linestyle='-', linewidth=1.5, alpha=0.7)\n",
        "\n",
        "# Add individual and professional text\n",
        "plt.text(0.25, 1.02, 'Individual', fontsize=9.5, fontweight='bold', va='center', ha='center', transform=ax.transAxes, color=\"#537c78\")\n",
        "plt.text(0.75, 1.02, 'Professional', fontsize=9.5, fontweight='bold', va='center', ha='center', transform=ax.transAxes, color=\"#faa41b\")\n",
        "\n",
        "# Add strict regulation zone\n",
        "ynum = 6\n",
        "ax.axvspan(-100, 100, ymin=0, ymax=ynum/len(dfplot), color='gray', alpha=0.1)\n",
        "plt.axhline(y=ynum-0.5, color='#282828', linestyle='--', linewidth=0.5, alpha=0.3)\n",
        "plt.text(-100, ynum-0.4, 'Cities with strict Airbnb Regulations', fontsize=7, fontweight='bold', color=\"gray\")\n",
        "\n",
        "# Add values for individual bars\n",
        "for i, (city, total) in enumerate(zip(dfplot.index, df_pivot['total_left'])):\n",
        "    ax.text(total - 1, i, f'{abs(total):.0f}', va='center', ha='right', fontsize=7, color='grey')\n",
        "\n",
        "# Add values for professional bars\n",
        "for i, (city, total) in enumerate(zip(dfplot.index, df_pivot['total_right'])):\n",
        "    ax.text(total + 1, i, f'{total:.0f} ', va='center', ha='left', fontsize=7, color='grey')\n",
        "\n",
        "# Legend configuration\n",
        "plt.plot([], [], label=\"Number of properties per host: \", color='white')\n",
        "plt.legend(\n",
        "    loc='lower center', \n",
        "    bbox_to_anchor=(0.5, -0.12),\n",
        "    ncol=7,\n",
        "    fontsize=8,\n",
        "    frameon=False,\n",
        "    handlelength=1,\n",
        "    handleheight=1,\n",
        "    borderpad=0.2,\n",
        "    columnspacing=0.2\n",
        ")\n",
        "\n",
        "# Add Data Source\n",
        "plt.text(0, -0.135, 'Data Source:', \n",
        "    transform=plt.gca().transAxes, \n",
        "    fontsize=8,\n",
        "    fontweight='bold',\n",
        "    color='gray')\n",
        "space = \" \" * 23\n",
        "plt.text(0, -0.135, space + 'Inside Airbnb', \n",
        "    transform=plt.gca().transAxes, \n",
        "    fontsize=8,\n",
        "    color='gray')\n",
        "\n",
        "# Remove spines\n",
        "for spine in plt.gca().spines.values():\n",
        "    spine.set_visible(False)\n",
        "\n",
        "# Plot it! :)\n",
        "plt.show()"
      ],
      "id": "914535dd",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "<div style=\"text-align: center;\">\n",
        "  ![](FIG_Airbnb_Cities.png){.lightbox width=\"100%\"}\n",
        "</div>\n",
        "\n",
        "\n",
        "{{< bluesky-comments at://did:plc:u7zijsa6hoysmuw2cr476odq/app.bsky.feed.post/3lejnowms6223 >}}"
      ],
      "id": "51905c56"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\guill\\AppData\\Roaming\\Python\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}