{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Bitcoin Wealth Distribution: Utopian vision of anarcho-capitalism \"\n",
        "\n",
        "description: \"Critiques the concentration of Bitcoin wealth, exploring how its distribution aligns with ideals of anarcho-capitalism, where economic power is concentrated among a few, often bypassing traditional systems.\"\n",
        "\n",
        "categories: \"stock\"\n",
        "\n",
        "date: \"2025-03-04\"\n",
        "\n",
        "keywords: [\"Bitcoin\"]\n",
        "\n",
        "jupyter: python3\n",
        "\n",
        "format:\n",
        "  html:\n",
        "    code-fold: true\n",
        "---\n",
        "\n",
        "\n",
        "## Summary\n",
        "\n",
        "A plot that shows the distribution wealth of `Bitcoin` among the wallets with a balance greater than \\$5,000 USD.\n"
      ],
      "id": "29d04366"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| eval: false\n",
        "#| echo: true\n",
        "#| output: false\n",
        "#| warning: false\n",
        "# Libraries\n",
        "# ===================================================\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from bs4 import BeautifulSoup\n",
        "import requests\n",
        "from io import StringIO\n",
        "import matplotlib.pyplot as plt\n",
        "from matplotlib.ticker import FuncFormatter\n",
        "import matplotlib.patches as patches\n",
        "\n",
        "# Bitcoin Price\n",
        "# ===================================================\n",
        "url = \"https://min-api.cryptocompare.com/data/price?fsym=BTC&tsyms=USD\"\n",
        "response = requests.get(url)\n",
        "data = response.json()\n",
        "btcprice = data.get(\"USD\")\n",
        "\n",
        "# Bitcoin Supply\n",
        "# ===================================================\n",
        "def get_btc_supply():\n",
        "    response = requests.get(\"https://blockchain.info/q/totalbc\")\n",
        "    satoshi = int(response.text)\n",
        "    btcsupply = satoshi / 100000000\n",
        "    return btcsupply\n",
        "btcsupply = get_btc_supply()\n",
        "\n",
        "# Data Extraction\n",
        "# ===================================================\n",
        "url = \"https://bitinfocharts.com/top-100-richest-bitcoin-addresses.html\"\n",
        "soup = BeautifulSoup(requests.get(url).text, \"html.parser\")\n",
        "table = soup.find(\"table\", {\"class\": \"table table-condensed bb\"})\n",
        "df = pd.read_html(StringIO(str(table)))[0]\n",
        "\n",
        "# Data Transformation\n",
        "# ===================================================\n",
        "# Select columns\n",
        "df = df[['Balance, BTC', 'Addresses', 'BTC']]\n",
        "\n",
        "# Rename columns and add average\n",
        "df.rename(columns={'Addresses': 'rows', 'BTC': 'btc'}, inplace=True)\n",
        "\n",
        "# Extract start and end range\n",
        "df['start'] = df['Balance, BTC'].str.extract(r'[\\[\\(](\\d[\\d,\\.]*)')\n",
        "df['end'] = df['Balance, BTC'].str.extract(r'-\\s([\\d,\\.]+)\\)')\n",
        "df['btc'] = df['btc'].str.extract('([0-9.]+)')\n",
        "\n",
        "# Convert to values\n",
        "df['rows'] = df['rows'].replace({',': ''}, regex=True).astype(int)\n",
        "df['start'] = df['start'].replace({',': ''}, regex=True).astype(float)\n",
        "df['end'] = df['end'].replace({',': ''}, regex=True).astype(float)\n",
        "df['btc'] = df['btc'].replace({',': ''}, regex=True).astype(float)\n",
        "\n",
        "# Add average price\n",
        "df['average'] = df['btc'] / df['rows']\n",
        "\n",
        "# Select columns\n",
        "df = df[['rows', 'start', 'end', 'btc', 'average']]\n",
        "\n",
        "# Change first and last value\n",
        "df.loc[df.index[0], 'start'] = 0.000001\n",
        "df.loc[df.index[-1], 'end'] = 250000\n",
        "\n",
        "# Create a list\n",
        "result = []\n",
        "\n",
        "# Iterate over each row \n",
        "for index, row in df.iterrows():\n",
        "    n = int(row['rows'])\n",
        "    start = row['start']\n",
        "    end = row['end']\n",
        "    average = row['average']\n",
        "    \n",
        "    # Generate a distribution\n",
        "    valores = np.logspace(np.log(start) / np.log(12), np.log(end) / np.log(12), n)\n",
        "        \n",
        "   # Calcular el factor de escala para ajustar el promedio\n",
        "    current_average = np.mean(valores)\n",
        "    scale_factor = average / current_average\n",
        "    adjusted_values = valores * scale_factor\n",
        "\n",
        "    # Add values to result list\n",
        "    result.extend(valores)\n",
        "\n",
        "# Crear a dataframe with all values\n",
        "df = pd.DataFrame(result, columns=['btc'])\n",
        "\n",
        "# Calculate marketcap\n",
        "marketcap = btcsupply * btcprice\n",
        "\n",
        "# USD Value, Filter >5000 and count\n",
        "df['usd'] = df['btc'] * btcprice\n",
        "df = df[df['usd'] > 5000]\n",
        "df['count'] = 1\n",
        "\n",
        "# Grouping by 100 percentiles\n",
        "df['percentile'] = pd.qcut(df['btc'], 100, labels=False) + 1\n",
        "\n",
        "# Grouping by 10 percentiles\n",
        "df['percentile2'] = pd.cut(\n",
        "    df['percentile'], \n",
        "    bins=range(1, 111, 10), \n",
        "    right=False, \n",
        "    labels=[i + 9 for i in range(1, 101, 10)]\n",
        ").astype(int)\n",
        "\n",
        "# Calculate GINI Index\n",
        "def gini(x):\n",
        "    x = np.array(x)\n",
        "    x = np.sort(x)\n",
        "    n = len(x)\n",
        "    gini_index = (2 * np.sum(np.arange(1, n + 1) * x) - (n + 1) * np.sum(x)) / (n * np.sum(x))\n",
        "    return gini_index\n",
        "gini_value = gini(df['usd'])\n",
        "\n",
        "# Summarizing data \n",
        "df = df.groupby(['percentile', 'percentile2'])[['usd', 'btc', 'count']].sum().reset_index()\n",
        "\n",
        "# Average price\n",
        "df['average_usd'] = df['usd'] / df['count']\n",
        "df['percentage'] = df['usd'] / df['usd'].sum()\n",
        "\n",
        "# Select columns\n",
        "df = df[['percentile', 'percentile2', 'usd', 'count', 'average_usd', 'percentage']]\n",
        "\n",
        "# Define palette\n",
        "color_palette = {\n",
        "    10: \"#050407\",\n",
        "    20: \"#07111e\",\n",
        "    30: \"#15334b\",\n",
        "    40: \"#2b5778\",\n",
        "    50: \"#417da1\",\n",
        "    60: \"#5593bb\",\n",
        "    70: \"#5a7aa3\",\n",
        "    80: \"#6d5e86\",\n",
        "    90: \"#a2425c\",\n",
        "    100: \"#D21E00\"\n",
        "}\n",
        "\n",
        "# Map palette color\n",
        "df['color'] = df['percentile2'].map(color_palette)\n",
        "\n",
        "# Percentiles dataframe 2\n",
        "df2 = df.copy()\n",
        "df2 = df2.groupby(['percentile2', 'color'], as_index=False)[['usd', 'count']].sum()\n",
        "df2['average_usd'] = df2['usd'] / df2['count']\n",
        "df2['percentage'] = df2['usd'] / (df2['usd']).sum()\n",
        "df2['count'] = 10\n",
        "\n",
        "print(df)\n",
        "\n",
        "# Data Visualization\n",
        "# ===================================================\n",
        "# Font Style\n",
        "plt.rcParams.update({'font.family': 'sans-serif', 'font.sans-serif': ['Open Sans'], 'font.size': 10})\n",
        "\n",
        "# Create the figure and suplots\n",
        "fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 8), gridspec_kw={'height_ratios': [10, 0.5]})\n",
        "\n",
        "# First Plot\n",
        "# ==================\n",
        "# Plot Bars\n",
        "bars = ax1.bar(df['percentile'], df['average_usd'], color=df['color'], edgecolor='darkgrey', linewidth=0.5, zorder=2)\n",
        "\n",
        "# Title and labels\n",
        "ax1.text(0, 1.1, 'Bitcoin Wealth Distribution', fontsize=13, fontweight='bold', ha='left', transform=ax1.transAxes)\n",
        "ax1.text(0, 1.06, 'Intrapercentile Analysis of Wealth Concentration (excluding < 5000$ wallets)', fontsize=9, color='#262626', ha='left', transform=ax1.transAxes)\n",
        "ax1.set_xlabel('% Wallets', fontsize=10, weight='bold')\n",
        "ax1.set_ylabel('Wealth ($)', fontsize=10, weight='bold')\n",
        "\n",
        "# Configuration\n",
        "ax1.grid(axis='x', linestyle='-', alpha=0.5, zorder=1)\n",
        "ax1.set_xlim(0, 101)\n",
        "ax1.set_ylim(0, 2000000)\n",
        "ax1.set_xticks(np.arange(0, 101, step=10))\n",
        "ax1.set_yticks(np.arange(0, 2000001, step=250000))\n",
        "ax1.tick_params(axis='x', labelsize=10)\n",
        "ax1.tick_params(axis='y', labelsize=10)\n",
        "ax1.spines['top'].set_visible(False)\n",
        "ax1.spines['right'].set_visible(False)\n",
        "\n",
        "# Function to format Y axis\n",
        "def format_func(value, tick_number):\n",
        "    if value >= 1e6:\n",
        "        return '{:,.1f}M'.format(value / 1e6)\n",
        "    else:\n",
        "        return '{:,.0f}K'.format(value / 1e3)\n",
        "\n",
        "# Formatting x and y axis\n",
        "ax1.xaxis.set_major_formatter(FuncFormatter(lambda x, _: f'{x:.0f}%'))\n",
        "ax1.yaxis.set_major_formatter(FuncFormatter(format_func))\n",
        "\n",
        "# Lines and area to separate outliers\n",
        "ax1.axhline(y=1850000, color='black', linestyle='--', linewidth=0.5, zorder=4)\n",
        "ax1.axhline(y=1800000, color='black', linestyle='--', linewidth=0.5, zorder=4)\n",
        "ax1.add_patch(patches.Rectangle((0, 1800000), 105, 50000, linewidth=0, edgecolor='none', facecolor='white', zorder=3))\n",
        "\n",
        "# Y Axis modify the outlier value\n",
        "labels = [item.get_text() for item in ax1.get_yticklabels()]\n",
        "labels[-1] = '17M'\n",
        "ax1.set_yticklabels(labels)\n",
        "\n",
        "# Show labels each 10 percentile\n",
        "for i, (bar, value) in enumerate(zip(bars, df['average_usd'])):\n",
        "    value_rounded = round(value / 5000) * 5000\n",
        "    if i % 10 == 0:\n",
        "        ax1.text(bar.get_x() + bar.get_width() / 2, \n",
        "                 abs(bar.get_height()) * 1.4 + 50000,\n",
        "                 f'{value_rounded:,.0f}',\n",
        "                 ha='center', \n",
        "                 va='bottom', \n",
        "                 fontsize=8.5,\n",
        "                 color='#2c2c2c', \n",
        "                 rotation=90)\n",
        "\n",
        "# Show GINI Index\n",
        "ax1.text(\n",
        "    0.09, 0.97, f\"Gini Index: {gini_value:.2f}\", \n",
        "    transform=ax1.transAxes,\n",
        "    fontsize=8.5,\n",
        "    color='black',\n",
        "    ha='right',\n",
        "    va='top', \n",
        "    bbox=dict(boxstyle=\"round,pad=0.3\", edgecolor='gray', facecolor='white')\n",
        ")\n",
        "\n",
        "# Show MarketCap\n",
        "ax1.text(\n",
        "    0.05, 0.88, \n",
        "    f\"Price: ${btcprice / 1e3:.0f} k\\nMCap: ${marketcap / 1e12:.2f} Bn\", \n",
        "    transform=ax1.transAxes,\n",
        "    fontsize=8.5,\n",
        "    color='black',\n",
        "    ha='center',\n",
        "    va='top'\n",
        ")\n",
        "\n",
        "# Second Plot\n",
        "# ==================\n",
        "# Plot Bars\n",
        "ax2.barh([0] * len(df2), df2['count'], left=df2['percentile2'] - df2['count'], color=df2['color'])\n",
        "\n",
        "# Configuration\n",
        "ax2.grid(axis='x', linestyle='-', color='white', alpha=1, linewidth=0.5)\n",
        "ax2.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=False)\n",
        "ax2.tick_params(axis='y', which='both', left=False, right=False, labelleft=False)\n",
        "ax2.spines['top'].set_visible(False)\n",
        "ax2.spines['right'].set_visible(False)\n",
        "ax2.spines['left'].set_visible(False)\n",
        "ax2.spines['bottom'].set_visible(False)\n",
        "x_ticks = np.linspace(df2['percentile2'].min(), df2['percentile2'].max(), 10)\n",
        "ax2.set_xticks(x_ticks)\n",
        "ax2.set_xlim(0, 101)\n",
        "\n",
        "# Add label values\n",
        "for i, row in df2.iterrows():\n",
        "    plt.text(row['percentile2'] - row['count'] + row['count'] / 2, 0, \n",
        "             f'{row[\"percentage\"] * 100:.2f}%', ha='center', va='center', color='white', fontweight='bold')\n",
        "    \n",
        " # Add Year label\n",
        "formatted_date = 2024 \n",
        "ax1.text(1, 1.1, f'{formatted_date}',\n",
        "    transform=ax1.transAxes,\n",
        "    fontsize=22, ha='right', va='top',\n",
        "    fontweight='bold', color='#D3D3D3')\n",
        "\n",
        "# Add Data Source\n",
        "ax2.text(0, -0.5, 'Data Source: BitInfoCharts. \"Top 100 Richest Bitcoin Addresses.\"',\n",
        "         transform=ax2.transAxes,\n",
        "         fontsize=8,\n",
        "         color='#2c2c2c')\n",
        "\n",
        "# Adjust layout\n",
        "plt.tight_layout()\n",
        "\n",
        "# Save it...\n",
        "plt.savefig(\"C:/Users/guill/Downloads/FIG_BITINFO_Bitcoin_Wealth_Distribution.png\", dpi=300, bbox_inches='tight') \n",
        "\n",
        "# Plot it!\n",
        "plt.show()"
      ],
      "id": "f0b64516",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "![](FIG_BITINFO_Bitcoin_Wealth_Distribution.png){.lightbox width=\"125%\"}"
      ],
      "id": "feedfd79"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\guill\\AppData\\Roaming\\Python\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}