{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Capital is Back: From Labor to Capital in the Modern Economy\"\n",
        "\n",
        "description: \"Wealth-Income Ratios in Advanced Economies 1980-2023\"\n",
        "\n",
        "categories: [economy, python]\n",
        "\n",
        "date: \"2025-08-14\"\n",
        "\n",
        "keywords: [\"wealth-income\"]\n",
        "\n",
        "image: FIG_WID_Beta_Evolution.png\n",
        "image-alt: |\n",
        "  Beta_Evolution\n",
        "\n",
        "jupyter: python3\n",
        "\n",
        "format:\n",
        "  html:\n",
        "    code-fold: true\n",
        "---\n",
        "\n",
        "\n",
        "## Summary\n",
        "\n",
        "The chart illustration the evolution of thel `wealth-income` ratio from 1980 to 2023 highlights the interplay between wealth accumulation and income generation over last five decades. It reveals a clear upward trend, reflecting the disproportionate growth of wealth relative to income, particularly in recent decades. This relationship is largely determined by the growth of the economy relative to the growth of capital. When capital grows at a faster rate than the economy, wealth concentrates disproportionately, amplifying disparities and altering the balance of economic power.\n"
      ],
      "id": "2691eb14"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| eval: false\n",
        "#| echo: true\n",
        "#| output: false\n",
        "#| warning: false\n",
        "# Libraries\n",
        "# ===================================================\n",
        "import requests\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "import matplotlib.lines as mlines\n",
        "import matplotlib.patheffects as patheffects\n",
        "import matplotlib.font_manager as fm\n",
        "import matplotlib.image as mpimg\n",
        "from io import BytesIO\n",
        "\n",
        "# Extract Data (Countries)\n",
        "# ===================================================\n",
        "# Extract JSON to dataframe\n",
        "url = 'https://raw.githubusercontent.com/guillemmaya92/world_map/main/Dim_Country.json'\n",
        "response = requests.get(url)\n",
        "data = response.json()\n",
        "df = pd.DataFrame(data)\n",
        "df = pd.DataFrame.from_dict(data, orient='index').reset_index()\n",
        "df_countries = df.rename(columns={'index': 'ISO3'})\n",
        "\n",
        "# Extract Data (WID)\n",
        "# ===================================================\n",
        "# Extract PARQUET to dataframe\n",
        "url = \"https://raw.githubusercontent.com/guillemmaya92/Analytics/master/Data/WID_Values.parquet\"\n",
        "df = pd.read_parquet(url, engine=\"pyarrow\")\n",
        "\n",
        "# Transform Data\n",
        "# ===================================================\n",
        "# Filter nulls and countries\n",
        "df = df[df['wiratio'].notna()]\n",
        "df = pd.merge(df, df_countries, left_on='country', right_on='ISO2', how='inner')\n",
        "\n",
        "# Rename columns\n",
        "df = df.rename(\n",
        "        columns={\n",
        "            'Country_Abr': 'country_name',\n",
        "            'wiratio': 'beta'\n",
        "        }\n",
        "    )\n",
        "\n",
        "# Filter countries have data post 1980\n",
        "dfx = df.loc[df['year'] == 1980, 'country']\n",
        "df = df[df['country'].isin(dfx)]\n",
        "df = df[df['year'] >= 1980]\n",
        "df = df[df['Analytical'] == 'Advanced Economies']\n",
        "\n",
        "# Dataframe countries\n",
        "dfc = df[df['country'].isin(['CN', 'US', 'FR', 'DE', 'ES'])]\n",
        "\n",
        "# Select columns and order\n",
        "df = df[['year', 'country', 'country_name', 'beta']]\n",
        "\n",
        "print(df)\n",
        "\n",
        "# Visualization Data\n",
        "# ===================================================\n",
        "# Font Style\n",
        "plt.rcParams.update({'font.family': 'sans-serif', 'font.sans-serif': ['Open Sans'], 'font.size': 10})\n",
        "\n",
        "# Create color dictionaire \n",
        "palette = {'CN': '#ffc2c2', 'US': '#c2d2ff', 'FR': '#c2ffcb', 'DE': '#e5c2ff', 'ES': '#fffac2'}\n",
        "\n",
        "# Create line plots\n",
        "plt.figure(figsize=(12, 8))\n",
        "sns.lineplot(data=df, x='year', y='beta', hue='country', linewidth=0.3, alpha=0.5, palette=['gray'], legend=False)\n",
        "sns.lineplot(data=dfc, x='year', y='beta', hue='country', linewidth=2.25, palette=['black'], legend=False)\n",
        "sns.lineplot(data=dfc, x='year', y='beta', hue='country', linewidth=1.5, palette=palette, legend=False)\n",
        "\n",
        "# Custom plot\n",
        "plt.text(0, 1.08, 'Capital is back', fontsize=16, fontweight='bold', ha='left', transform=plt.gca().transAxes)\n",
        "plt.text(0, 1.045, 'Wealth-Income Ratios in Advanced Economies 1980-2023', fontsize=11, color='#262626', ha='left', transform=plt.gca().transAxes)\n",
        "plt.xlabel('Year', fontsize=10, fontweight='bold')\n",
        "plt.ylabel('Wealth-Income Ratio', fontsize=10, fontweight='bold')\n",
        "plt.grid(axis='x', alpha=0.7, linestyle=':')\n",
        "plt.ylim(0, 12)\n",
        "plt.xlim(1980, 2026)\n",
        "plt.xticks(range(1980, 2026, 10))\n",
        "plt.tight_layout()\n",
        "\n",
        "# Delete spines\n",
        "for spine in [\"top\", \"right\"]:\n",
        "    plt.gca().spines[spine].set_visible(False)\n",
        "\n",
        "# Add Data Source\n",
        "plt.text(0, -0.08, 'Data Source: World Inequality Database (WID)', \n",
        "    transform=plt.gca().transAxes, \n",
        "    fontsize=8,\n",
        "    fontweight='bold',\n",
        "    color='gray')\n",
        "\n",
        "# Add Notes\n",
        "plt.text(0, -0.1, 'Notes: Wealth-Income Ratio is the division of national wealth by national income.', \n",
        "    transform=plt.gca().transAxes, \n",
        "    fontsize=7,\n",
        "    fontstyle='italic',\n",
        "    color='gray')\n",
        "\n",
        " # Add Year label\n",
        "formatted_date = 2023\n",
        "plt.text(1, 1.08, f'{formatted_date}',\n",
        "    transform=plt.gca().transAxes,\n",
        "    fontsize=20, ha='right', va='top',\n",
        "    fontweight='bold', color='#D3D3D3')\n",
        "\n",
        "# Legend values\n",
        "beta_cn = round(df[(df['country'] == 'CN') & (df['year'] == 2023)]['beta'].values[0], 1)\n",
        "beta_de = round(df[(df['country'] == 'DE') & (df['year'] == 2023)]['beta'].values[0], 1)\n",
        "beta_es = round(df[(df['country'] == 'ES') & (df['year'] == 2023)]['beta'].values[0], 1)\n",
        "beta_fr = round(df[(df['country'] == 'FR') & (df['year'] == 2023)]['beta'].values[0], 1)\n",
        "beta_us = round(df[(df['country'] == 'US') & (df['year'] == 2023)]['beta'].values[0], 1)\n",
        "\n",
        "# Legend lines\n",
        "line1 = mlines.Line2D([], [], color=palette['CN'], label=f'China: {beta_cn}', linewidth=2)\n",
        "line2 = mlines.Line2D([], [], color=palette['DE'], label=f'Germany: {beta_de}', linewidth=2)\n",
        "line3 = mlines.Line2D([], [], color=palette['ES'], label=f'Spain: {beta_es}', linewidth=2)\n",
        "line4 = mlines.Line2D([], [], color=palette['FR'], label=f'France: {beta_fr}', linewidth=2)\n",
        "line5 = mlines.Line2D([], [], color=palette['US'], label=f'USA: {beta_us}', linewidth=2)\n",
        "line6 = mlines.Line2D([], [], color='grey', label=f'Advanced economies', linewidth=1)\n",
        "line1.set_path_effects([patheffects.withStroke(linewidth=4, foreground='black')])\n",
        "line2.set_path_effects([patheffects.withStroke(linewidth=4, foreground='black')])\n",
        "line3.set_path_effects([patheffects.withStroke(linewidth=4, foreground='black')])\n",
        "line4.set_path_effects([patheffects.withStroke(linewidth=4, foreground='black')])\n",
        "line5.set_path_effects([patheffects.withStroke(linewidth=4, foreground='black')])\n",
        "\n",
        "# Legend plot\n",
        "plt.legend(handles=[line1, line2, line3, line4, line5, line6], title='Countries', fontsize=9, title_fontproperties=fm.FontProperties(weight='bold'))\n",
        "\n",
        "# Define flags\n",
        "flag_urls = {\n",
        "    'CN': 'https://raw.githubusercontent.com/matahombres/CSS-Country-Flags-Rounded/master/flags/CN.png',\n",
        "    'US': 'https://raw.githubusercontent.com/matahombres/CSS-Country-Flags-Rounded/master/flags/US.png',\n",
        "    'FR': 'https://raw.githubusercontent.com/matahombres/CSS-Country-Flags-Rounded/master/flags/FR.png',\n",
        "    'ES': 'https://raw.githubusercontent.com/matahombres/CSS-Country-Flags-Rounded/master/flags/ES.png',\n",
        "    'DE': 'https://raw.githubusercontent.com/matahombres/CSS-Country-Flags-Rounded/master/flags/DE.png'\n",
        "}\n",
        "\n",
        "# Load flags\n",
        "flags = {country: mpimg.imread(BytesIO(requests.get(url).content)) for country, url in flag_urls.items()}\n",
        "\n",
        "# Add flags\n",
        "year = 2023\n",
        "# Adjust flags items\n",
        "for country, flag in flags.items():\n",
        "    # Find beta for each country\n",
        "    beta_value = df[(df['country'] == country) & (df['year'] == year)]['beta'].values[0]\n",
        "    \n",
        "    if country == 'CN':\n",
        "        plt.imshow(flag, aspect='auto', extent=[year+1, year+2, beta_value - 0.2, beta_value + 0.2], alpha=0.7)\n",
        "    elif country == 'DE':\n",
        "        plt.imshow(flag, aspect='auto', extent=[year+1, year+2, beta_value - 0.2, beta_value + 0.2], alpha=0.7)\n",
        "    elif country == 'ES':\n",
        "        plt.imshow(flag, aspect='auto', extent=[year+1, year+2, beta_value - 0.2, beta_value + 0.2], alpha=0.7)\n",
        "    elif country == 'FR':\n",
        "        plt.imshow(flag, aspect='auto', extent=[year+1, year+2, beta_value - 0.4, beta_value + 0], alpha=0.7)\n",
        "    elif country == 'US':\n",
        "        plt.imshow(flag, aspect='auto', extent=[year+1, year+2, beta_value - 0.4, beta_value + 0], alpha=0.7)\n",
        "\n",
        "# Save the animation :)\n",
        "plt.savefig(\"C:/Users/guill/Downloads/FIG_WID_Beta_Evolution.png\", dpi=300, bbox_inches='tight') \n",
        "\n",
        "# Show plot\n",
        "plt.show()"
      ],
      "id": "b1c25216",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "![](FIG_WID_Beta_Evolution.png){.lightbox width=\"100%\"}\n",
        "\n",
        "\n",
        "{{< bluesky-comments at://did:plc:u7zijsa6hoysmuw2cr476odq/app.bsky.feed.post/3lejnowms6223 >}}"
      ],
      "id": "7a9ea03c"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\guill\\AppData\\Roaming\\Python\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}