{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Where is the income/wealth distribution concentrated?\"\n",
        "\n",
        "description: \"An analysis of where income and wealth distribution is concentrated across different population segments.\"\n",
        "\n",
        "categories: [economy, python]\n",
        "\n",
        "date: \"2026-02-21\"\n",
        "\n",
        "keywords: [\"income\", \"wealth\"]\n",
        "\n",
        "format:\n",
        "  html:\n",
        "    code-fold: true\n",
        "---\n",
        "\n",
        "\n",
        "## Summary\n",
        "\n",
        "This study analyzes `income` and `wealth` distribution data sourced from the World Inequality Database (WID), segmented by country. It highlights the concentration of wealth and income within different nations, providing insights into global economic disparities.\n",
        "\n",
        "::: {.callout-tip collapse=\"true\"}\n",
        "## Distributions blocks 1\n",
        "The distribution of \"Income\" and \"Wealth\" chart is split into two blocks [50-50]:  \n",
        "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<i>• Bottom 50</i><br> \n",
        "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<i>• Top 50</i>\n",
        ":::\n"
      ],
      "id": "06216519"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| eval: false\n",
        "#| echo: true\n",
        "#| output: false\n",
        "#| warning: false\n",
        "#| label: Income 50-50\n",
        "# Libraries\n",
        "# ==========================================\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import requests\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Data Extraction - GITHUB (Countries)\n",
        "# =====================================================================\n",
        "# Extract JSON and bring data to a dataframe\n",
        "url = 'https://raw.githubusercontent.com/guillemmaya92/world_map/main/Dim_Country.json'\n",
        "response = requests.get(url)\n",
        "data = response.json()\n",
        "df = pd.DataFrame(data)\n",
        "df = pd.DataFrame.from_dict(data, orient='index').reset_index()\n",
        "df_countries = df.rename(columns={'index': 'ISO3', 'Country_Abr': 'name'})\n",
        "\n",
        "# Data Extraction - WID (Percentiles)\n",
        "# ==========================================\n",
        "# Carga del archivo Parquet\n",
        "df = pd.read_parquet(\"https://github.com/guillemmaya92/Analytics/raw/refs/heads/master/Data/WID_Percentiles.parquet\")\n",
        "\n",
        "# Data Manipulation\n",
        "# =====================================================================\n",
        "# Filter a year and select measure\n",
        "df = df[df['country'].isin([\"NO\", \"DK\", \"ES\", \"FR\", \"DE\", \"UK\", \"US\", \"IN\", \"CN\", \"JA\", \"AR\", \"RU\", \"QA\", \"CL\", \"BR\", \"CA\", \"AU\", \"KR\", \"MX\"])]\n",
        "df = df[df['year'] == 2021]\n",
        "df['value'] = df['income']\n",
        "\n",
        "# Grouping by percentiles\n",
        "df[\"group\"] = pd.cut(\n",
        "    df[\"percentile\"],\n",
        "    bins=[0, 50, 89, 99, 100],\n",
        "    labels=[\"bottom50\", \"50-90\", \"90-99\", \"top1\"],\n",
        "    include_lowest=True\n",
        ")\n",
        "\n",
        "# Calculate percents\n",
        "df['side'] = np.where(df['group'].isin(['bottom50']), 'left', 'right')\n",
        "df['value'] *= df['side'].eq('left').map({True: -1, False: 1})\n",
        "\n",
        "# Select columns\n",
        "df = df[['country', 'group', 'value']]\n",
        "df = df.groupby([\"country\", \"group\"], as_index=False)[\"value\"].sum()\n",
        "\n",
        "# Pivot columns\n",
        "df_pivot = df.pivot(index=\"country\", columns=\"group\", values=\"value\").fillna(0).reset_index()\n",
        "\n",
        "# Merge names\n",
        "df_pivot = df_pivot.merge(df_countries[['ISO2', 'name']], left_on='country', right_on='ISO2', how='inner')\n",
        "df_pivot = df_pivot.drop(columns=['ISO2'])\n",
        "\n",
        "# Define column with values for individuals and professionals\n",
        "df_pivot['total_left'] = df_pivot['bottom50']\n",
        "df_pivot['total_right'] = df_pivot['50-90'] + df_pivot['90-99'] + df_pivot['top1']\n",
        "df_pivot = df_pivot.sort_values(by='total_left', ascending=True)\n",
        "\n",
        "# Select and order columns\n",
        "order = [\"name\", \"bottom50\", \"50-90\", \"90-99\", \"top1\"]\n",
        "dfplot = df_pivot[order]\n",
        "dfplot.set_index('name', inplace=True)\n",
        "\n",
        "print(dfplot)\n",
        "\n",
        "# Data Visualization\n",
        "# ==========================================\n",
        "# Font and style\n",
        "plt.rcParams.update({'font.family': 'sans-serif', 'font.sans-serif': ['Franklin Gothic'], 'font.size': 9})\n",
        "sns.set(style=\"white\", palette=\"muted\")\n",
        "\n",
        "# Palette color\n",
        "palette = [\"#f15b4c\", \"#537c78\", \"#faa41b\", \"#ffd45b\"]\n",
        "\n",
        "# Create horizontal stack bar plot\n",
        "ax = dfplot.plot(kind=\"barh\", stacked=True, figsize=(10, 6), width=0.7, color=palette)\n",
        "\n",
        "# Add title and labels\n",
        "ax.text(0, 1.12, f'Where is income distribution concentrated?', fontsize=16, fontweight='bold', ha='left', transform=ax.transAxes)\n",
        "ax.text(0, 1.07 , f'Income Percentile Breakdown by Country', fontsize=11, color='#262626', ha='left', transform=ax.transAxes)\n",
        "ax.set_xlim(-100, 100)\n",
        "xticks = np.linspace(-75, 75, 7)\n",
        "plt.xticks(xticks, labels=[f\"{abs(int(i))}%\" for i in xticks], fontsize=8)\n",
        "plt.gca().set_ylabel('')\n",
        "plt.yticks(fontsize=9, color='#282828', fontweight='bold')\n",
        "plt.grid(axis='x', linestyle='--', color='gray', linewidth=0.5, alpha=0.3)\n",
        "plt.axvline(x=0, color='#282828', linestyle='-', linewidth=1.5, alpha=0.7)\n",
        "\n",
        "# Add individual and professional text\n",
        "plt.text(0.25, 1.02, 'Bottom 50', fontsize=9.5, fontweight='bold', va='center', ha='center', transform=ax.transAxes, color=\"#f15b4c\")\n",
        "plt.text(0.75, 1.02, 'Top 50', fontsize=9.5, fontweight='bold', va='center', ha='center', transform=ax.transAxes, color=\"#537c78\")\n",
        "\n",
        "# Add strict regulation zone\n",
        "ynum = 5\n",
        "ax.axvspan(-100, 100, ymin=0, ymax=ynum/len(dfplot), color='gray', alpha=0.1)\n",
        "plt.axhline(y=ynum-0.5, color='#282828', linestyle='--', linewidth=0.5, alpha=0.3)\n",
        "plt.text(-100, ynum-0.4, 'Countries with progressive tax systems', fontsize=6, fontweight='bold', color=\"gray\")\n",
        "\n",
        "# Add values for total bottom50 bars\n",
        "for i, (city, total) in enumerate(zip(dfplot.index, df_pivot['total_left'])):\n",
        "    ax.text(total - 1, i, f'{abs(total):.0f}', va='center', ha='right', fontsize=7, color='grey', fontweight='bold')\n",
        "\n",
        "# Add values for total top50 bars\n",
        "for i, (city, total) in enumerate(zip(dfplot.index, df_pivot['total_right'])):\n",
        "    ax.text(total + 1, i, f'{total:.0f} ', va='center', ha='left', fontsize=7, color='grey', fontweight='bold')\n",
        "\n",
        "# Add values for individual bars (top1)\n",
        "for i, (city, center, top9, top1) in enumerate(zip(dfplot.index, df_pivot[\"50-90\"], df_pivot[\"90-99\"], df_pivot[\"top1\"])):\n",
        "    ax.text(center+top9+(top1/2), i, f'{abs(top1):.0f}', va='center', ha='center', fontsize=7, color='grey')\n",
        "\n",
        "# Add values for individual bars (top9)\n",
        "for i, (city, center, top9) in enumerate(zip(dfplot.index, df_pivot[\"50-90\"], df_pivot[\"90-99\"])):\n",
        "    ax.text(center+(top9/2), i, f'{abs(top9):.0f}', va='center', ha='center', fontsize=7, color='white')\n",
        "\n",
        "# Add values for individual bars (center)\n",
        "for i, (city, center) in enumerate(zip(dfplot.index, df_pivot[\"50-90\"])):\n",
        "    ax.text(center / 2, i, f'{abs(center):.0f}', va='center', ha='center', fontsize=7, color='white')\n",
        "\n",
        "# Legend configuration\n",
        "plt.plot([], [], label=\"Percentiles: \", color='white')\n",
        "plt.legend(\n",
        "    loc='lower center', \n",
        "    bbox_to_anchor=(0.5, -0.12),\n",
        "    ncol=7,\n",
        "    fontsize=8,\n",
        "    frameon=False,\n",
        "    handlelength=1,\n",
        "    handleheight=1,\n",
        "    borderpad=0.2,\n",
        "    columnspacing=0.2\n",
        ")\n",
        "\n",
        "# Add Data Source\n",
        "plt.text(0, -0.135, 'Data Source:', \n",
        "    transform=plt.gca().transAxes, \n",
        "    fontsize=8,\n",
        "    fontweight='bold',\n",
        "    color='gray')\n",
        "space = \" \" * 23\n",
        "plt.text(0, -0.135, space + 'World Inequality Database (WID)', \n",
        "    transform=plt.gca().transAxes, \n",
        "    fontsize=8,\n",
        "    color='gray')\n",
        "\n",
        "# Remove spines\n",
        "for spine in plt.gca().spines.values():\n",
        "    spine.set_visible(False)\n",
        "\n",
        " # Adjust layout\n",
        "plt.tight_layout()\n",
        "\n",
        "# Plot it! :)\n",
        "plt.show()"
      ],
      "id": "Income-50-50",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "<script>\n",
        "  document.addEventListener('DOMContentLoaded', function () {\n",
        "    const targetDiv = document.getElementById('income-50-50');\n",
        "    if (targetDiv) {\n",
        "      const dropdowns = targetDiv.querySelectorAll('details.code-fold');\n",
        "      dropdowns.forEach(function(dropdown) {\n",
        "        if (dropdown.querySelector('summary')) {\n",
        "          dropdown.querySelector('summary').textContent = 'Income 50-50';\n",
        "        }\n",
        "      });\n",
        "    }\n",
        "  });\n",
        "</script>\n"
      ],
      "id": "2e1855fb"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| eval: false\n",
        "#| echo: true\n",
        "#| output: false\n",
        "#| warning: false\n",
        "#| label: Wealth 50-50\n",
        "# Libraries\n",
        "# ==========================================\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import requests\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Data Extraction - GITHUB (Countries)\n",
        "# =====================================================================\n",
        "# Extract JSON and bring data to a dataframe\n",
        "url = 'https://raw.githubusercontent.com/guillemmaya92/world_map/main/Dim_Country.json'\n",
        "response = requests.get(url)\n",
        "data = response.json()\n",
        "df = pd.DataFrame(data)\n",
        "df = pd.DataFrame.from_dict(data, orient='index').reset_index()\n",
        "df_countries = df.rename(columns={'index': 'ISO3', 'Country_Abr': 'name'})\n",
        "\n",
        "# Data Extraction - WID (Percentiles)\n",
        "# ==========================================\n",
        "# Carga del archivo Parquet\n",
        "df = pd.read_parquet(\"https://github.com/guillemmaya92/Analytics/raw/refs/heads/master/Data/WID_Percentiles.parquet\")\n",
        "\n",
        "# Data Manipulation\n",
        "# =====================================================================\n",
        "# Filter a year and select measure\n",
        "df = df[df['country'].isin([\"NO\", \"DK\", \"ES\", \"FR\", \"DE\", \"UK\", \"US\", \"IN\", \"CN\", \"JA\", \"AR\", \"RU\", \"QA\", \"CL\", \"BR\", \"CA\", \"AU\", \"KR\", \"MX\"])]\n",
        "df = df[df['year'] == 2021]\n",
        "df['value'] = df['wealth']\n",
        "\n",
        "# Grouping by percentiles\n",
        "df[\"group\"] = pd.cut(\n",
        "    df[\"percentile\"],\n",
        "    bins=[0, 50, 89, 99, 100],\n",
        "    labels=[\"bottom50\", \"50-90\", \"90-99\", \"top1\"],\n",
        "    include_lowest=True\n",
        ")\n",
        "\n",
        "# Calculate percents\n",
        "df['side'] = np.where(df['group'].isin(['bottom50']), 'left', 'right')\n",
        "df['value'] *= df['side'].eq('left').map({True: -1, False: 1})\n",
        "\n",
        "# Select columns\n",
        "df = df[['country', 'group', 'value']]\n",
        "df = df.groupby([\"country\", \"group\"], as_index=False)[\"value\"].sum()\n",
        "\n",
        "# Pivot columns\n",
        "df_pivot = df.pivot(index=\"country\", columns=\"group\", values=\"value\").fillna(0).reset_index()\n",
        "\n",
        "# Merge names\n",
        "df_pivot = df_pivot.merge(df_countries[['ISO2', 'name']], left_on='country', right_on='ISO2', how='inner')\n",
        "df_pivot = df_pivot.drop(columns=['ISO2'])\n",
        "\n",
        "# Define column with values for individuals and professionals\n",
        "df_pivot['total_left'] = df_pivot['bottom50']\n",
        "df_pivot['total_right'] = df_pivot['50-90'] + df_pivot['90-99'] + df_pivot['top1']\n",
        "df_pivot = df_pivot.sort_values(by='total_left', ascending=True)\n",
        "\n",
        "# Select and order columns\n",
        "order = [\"name\", \"bottom50\", \"50-90\", \"90-99\", \"top1\"]\n",
        "dfplot = df_pivot[order]\n",
        "dfplot.set_index('name', inplace=True)\n",
        "\n",
        "print(dfplot)\n",
        "\n",
        "# Data Visualization\n",
        "# ==========================================\n",
        "# Font and style\n",
        "plt.rcParams.update({'font.family': 'sans-serif', 'font.sans-serif': ['Franklin Gothic'], 'font.size': 9})\n",
        "sns.set(style=\"white\", palette=\"muted\")\n",
        "\n",
        "# Palette color\n",
        "palette = [\"#f15b4c\", \"#537c78\", \"#faa41b\", \"#ffd45b\"]\n",
        "\n",
        "# Create horizontal stack bar plot\n",
        "ax = dfplot.plot(kind=\"barh\", stacked=True, figsize=(10, 6), width=0.7, color=palette)\n",
        "\n",
        "# Add title and labels\n",
        "ax.text(0, 1.12, f'Where is wealth distribution concentrated?', fontsize=16, fontweight='bold', ha='left', transform=ax.transAxes)\n",
        "ax.text(0, 1.07 , f'Wealth Percentile Breakdown by Country', fontsize=11, color='#262626', ha='left', transform=ax.transAxes)\n",
        "ax.set_xlim(-100, 100)\n",
        "xticks = np.linspace(-75, 75, 7)\n",
        "plt.xticks(xticks, labels=[f\"{abs(int(i))}%\" for i in xticks], fontsize=8)\n",
        "plt.gca().set_ylabel('')\n",
        "plt.yticks(fontsize=9, color='#282828', fontweight='bold')\n",
        "plt.grid(axis='x', linestyle='--', color='gray', linewidth=0.5, alpha=0.3)\n",
        "plt.axvline(x=0, color='#282828', linestyle='-', linewidth=1.5, alpha=0.7)\n",
        "\n",
        "# Add individual and professional text\n",
        "plt.text(0.25, 1.02, 'Bottom 50', fontsize=9.5, fontweight='bold', va='center', ha='center', transform=ax.transAxes, color=\"#f15b4c\")\n",
        "plt.text(0.75, 1.02, 'Top 50', fontsize=9.5, fontweight='bold', va='center', ha='center', transform=ax.transAxes, color=\"#537c78\")\n",
        "\n",
        "# Add strict regulation zone\n",
        "ynum = 0\n",
        "ax.axvspan(-100, 100, ymin=0, ymax=ynum/len(dfplot), color='gray', alpha=0.1)\n",
        "plt.axhline(y=ynum-0.5, color='#282828', linestyle='--', linewidth=0.5, alpha=0.3)\n",
        "plt.text(-100, ynum-0.4, 'Countries with fair distribution on wealth (indeed, no one...)', fontsize=6, fontweight='bold', color=\"gray\")\n",
        "\n",
        "# Add values for total bottom50 bars\n",
        "for i, (city, total) in enumerate(zip(dfplot.index, df_pivot['total_left'])):\n",
        "    ax.text(total - 1, i, f'{abs(total):.0f}', va='center', ha='right', fontsize=7, color='grey', fontweight='bold')\n",
        "\n",
        "# Add values for total top50 bars\n",
        "for i, (city, total) in enumerate(zip(dfplot.index, df_pivot['total_right'])):\n",
        "    ax.text(total + 1, i, f'{total:.0f} ', va='center', ha='left', fontsize=7, color='grey', fontweight='bold')\n",
        "\n",
        "# Add values for individual bars (top1)\n",
        "for i, (city, center, top9, top1) in enumerate(zip(dfplot.index, df_pivot[\"50-90\"], df_pivot[\"90-99\"], df_pivot[\"top1\"])):\n",
        "    ax.text(center+top9+(top1/2), i, f'{abs(top1):.0f}', va='center', ha='center', fontsize=7, color='grey')\n",
        "\n",
        "# Add values for individual bars (top9)\n",
        "for i, (city, center, top9) in enumerate(zip(dfplot.index, df_pivot[\"50-90\"], df_pivot[\"90-99\"])):\n",
        "    ax.text(center+(top9/2), i, f'{abs(top9):.0f}', va='center', ha='center', fontsize=7, color='white')\n",
        "\n",
        "# Add values for individual bars (center)\n",
        "for i, (city, center) in enumerate(zip(dfplot.index, df_pivot[\"50-90\"])):\n",
        "    ax.text(center / 2, i, f'{abs(center):.0f}', va='center', ha='center', fontsize=7, color='white')\n",
        "\n",
        "# Legend configuration\n",
        "plt.plot([], [], label=\"Percentiles: \", color='white')\n",
        "plt.legend(\n",
        "    loc='lower center', \n",
        "    bbox_to_anchor=(0.5, -0.12),\n",
        "    ncol=7,\n",
        "    fontsize=8,\n",
        "    frameon=False,\n",
        "    handlelength=1,\n",
        "    handleheight=1,\n",
        "    borderpad=0.2,\n",
        "    columnspacing=0.2\n",
        ")\n",
        "\n",
        "# Add Data Source\n",
        "plt.text(0, -0.135, 'Data Source:', \n",
        "    transform=plt.gca().transAxes, \n",
        "    fontsize=8,\n",
        "    fontweight='bold',\n",
        "    color='gray')\n",
        "space = \" \" * 23\n",
        "plt.text(0, -0.135, space + 'World Inequality Database (WID)', \n",
        "    transform=plt.gca().transAxes, \n",
        "    fontsize=8,\n",
        "    color='gray')\n",
        "\n",
        "# Remove spines\n",
        "for spine in plt.gca().spines.values():\n",
        "    spine.set_visible(False)\n",
        "\n",
        " # Adjust layout\n",
        "plt.tight_layout()\n",
        "\n",
        "# Plot it! :)\n",
        "plt.show()"
      ],
      "id": "Wealth-50-50",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "<script>\n",
        "  document.addEventListener('DOMContentLoaded', function () {\n",
        "    const targetDiv = document.getElementById('wealth-50-50');\n",
        "    if (targetDiv) {\n",
        "      const dropdowns = targetDiv.querySelectorAll('details.code-fold');\n",
        "      dropdowns.forEach(function(dropdown) {\n",
        "        if (dropdown.querySelector('summary')) {\n",
        "          dropdown.querySelector('summary').textContent = 'Wealth 50-50';\n",
        "        }\n",
        "      });\n",
        "    }\n",
        "  });\n",
        "</script>\n",
        "\n",
        "\n",
        "::: {layout-ncol=\"2\"}\n",
        "![](FIG_WID_Countries_income.png){.lightbox}\n",
        "\n",
        "![](FIG_WID_Countries_wealth.png){.lightbox}\n",
        ":::\n",
        "\n",
        "::: {style=\"height: 1rem;\"}\n",
        ":::\n",
        "\n",
        "::: {.callout-tip collapse=\"true\"}\n",
        "## Distributions blocks 2\n",
        "The distribution of \"Income\" and \"Wealth\" chart is split into two blocks [90-10]:  \n",
        "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<i>• Bottom 90</i><br> \n",
        "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<i>• Top 10</i>\n",
        ":::\n"
      ],
      "id": "b94b8a01"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| eval: false\n",
        "#| echo: true\n",
        "#| output: false\n",
        "#| warning: false\n",
        "#| label: Income 90-10\n",
        "# Libraries\n",
        "# ==========================================\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import requests\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "import matplotlib.patches as mpatches\n",
        "\n",
        "# Data Extraction - GITHUB (Countries)\n",
        "# =====================================================================\n",
        "# Extract JSON and bring data to a dataframe\n",
        "url = 'https://raw.githubusercontent.com/guillemmaya92/world_map/main/Dim_Country.json'\n",
        "response = requests.get(url)\n",
        "data = response.json()\n",
        "df = pd.DataFrame(data)\n",
        "df = pd.DataFrame.from_dict(data, orient='index').reset_index()\n",
        "df_countries = df.rename(columns={'index': 'ISO3', 'Country_Abr': 'name'})\n",
        "\n",
        "# Data Extraction - WID (Percentiles)\n",
        "# ==========================================\n",
        "# Carga del archivo Parquet\n",
        "df = pd.read_parquet(\"https://github.com/guillemmaya92/Analytics/raw/refs/heads/master/Data/WID_Percentiles.parquet\")\n",
        "\n",
        "# Data Manipulation\n",
        "# =====================================================================\n",
        "# Filter a year and select measure\n",
        "df = df[df['country'].isin([\"NO\", \"DK\", \"ES\", \"FR\", \"DE\", \"UK\", \"US\", \"IN\", \"CN\", \"JA\", \"AR\", \"RU\", \"QA\", \"CL\", \"BR\", \"CA\", \"AU\", \"KR\", \"MX\", \"ZA\"])]\n",
        "df = df[df['year'] == 2021]\n",
        "df['value'] = df['income']\n",
        "\n",
        "# Grouping by percentiles\n",
        "df[\"group\"] = pd.cut(\n",
        "    df[\"percentile\"],\n",
        "    bins=[0, 50, 89, 99, 100],\n",
        "    labels=[\"bottom50\", \"50-90\", \"90-99\", \"top1\"],\n",
        "    include_lowest=True\n",
        ")\n",
        "\n",
        "# Calculate percents\n",
        "df['side'] = np.where(df['group'].isin(['bottom50', '50-90']), 'left', 'right')\n",
        "df['value'] *= df['side'].eq('left').map({True: -1, False: 1})\n",
        "\n",
        "# Select columns\n",
        "df = df[['country', 'group', 'value']]\n",
        "df = df.groupby([\"country\", \"group\"], as_index=False)[\"value\"].sum()\n",
        "\n",
        "# Pivot columns\n",
        "df_pivot = df.pivot(index=\"country\", columns=\"group\", values=\"value\").fillna(0).reset_index()\n",
        "\n",
        "# Merge names\n",
        "df_pivot = df_pivot.merge(df_countries[['ISO2', 'name']], left_on='country', right_on='ISO2', how='inner')\n",
        "df_pivot = df_pivot.drop(columns=['ISO2'])\n",
        "\n",
        "# Define column with values for individuals and professionals\n",
        "df_pivot['total_left'] = df_pivot['bottom50'] + df_pivot['50-90']\n",
        "df_pivot['total_right'] = df_pivot['90-99'] + df_pivot['top1']\n",
        "df_pivot = df_pivot.sort_values(by='total_left', ascending=True)\n",
        "\n",
        "# Select and order columns\n",
        "order = [\"name\", \"50-90\", \"bottom50\", \"90-99\", \"top1\"]\n",
        "dfplot = df_pivot[order]\n",
        "dfplot.set_index('name', inplace=True)\n",
        "\n",
        "print(dfplot)\n",
        "\n",
        "# Data Visualization\n",
        "# ==========================================\n",
        "# Font and style\n",
        "plt.rcParams.update({'font.family': 'sans-serif', 'font.sans-serif': ['Franklin Gothic'], 'font.size': 9})\n",
        "sns.set(style=\"white\", palette=\"muted\")\n",
        "\n",
        "# Palette color\n",
        "palette = [\"#537c78\", \"#f15b4c\", \"#faa41b\", \"#ffd45b\"]\n",
        "\n",
        "# Create horizontal stack bar plot\n",
        "ax = dfplot.plot(kind=\"barh\", stacked=True, figsize=(10, 6), width=0.7, color=palette)\n",
        "\n",
        "# Add title and labels\n",
        "ax.text(0, 1.12, f'Where is income distribution concentrated?', fontsize=16, fontweight='bold', ha='left', transform=ax.transAxes)\n",
        "ax.text(0, 1.07 , f'Income Percentile Breakdown by Country', fontsize=11, color='#262626', ha='left', transform=ax.transAxes)\n",
        "ax.set_xlim(-100, 100)\n",
        "xticks = np.linspace(-75, 75, 7)\n",
        "plt.xticks(xticks, labels=[f\"{abs(int(i))}%\" for i in xticks], fontsize=8)\n",
        "plt.gca().set_ylabel('')\n",
        "plt.yticks(fontsize=9, color='#282828', fontweight='bold')\n",
        "plt.grid(axis='x', linestyle='--', color='gray', linewidth=0.5, alpha=0.3)\n",
        "plt.axvline(x=0, color='#282828', linestyle='-', linewidth=1.5, alpha=0.7)\n",
        "\n",
        "# Add individual and professional text\n",
        "plt.text(0.25, 1.02, 'Bottom 90', fontsize=9.5, fontweight='bold', va='center', ha='center', transform=ax.transAxes, color=\"#526b69\")\n",
        "plt.text(0.75, 1.02, 'Top 10', fontsize=9.5, fontweight='bold', va='center', ha='center', transform=ax.transAxes, color=\"#b58231\")\n",
        "\n",
        "# Add strict regulation zone\n",
        "ynum = 7\n",
        "ax.axvspan(-100, 100, ymin=0, ymax=ynum/len(dfplot), color='gray', alpha=0.1)\n",
        "plt.axhline(y=ynum-0.5, color='#282828', linestyle='--', linewidth=0.5, alpha=0.3)\n",
        "plt.text(+100, ynum-0.4, 'Countries with progressive tax systems', fontsize=6, fontweight='bold', color=\"gray\", ha=\"right\")\n",
        "\n",
        "# Add values for total bottom50 bars\n",
        "for i, (city, total) in enumerate(zip(dfplot.index, df_pivot['total_left'])):\n",
        "    ax.text(total - 1, i, f'{abs(total):.0f}', va='center', ha='right', fontsize=7, color='grey', fontweight='bold')\n",
        "\n",
        "# Add values for total top50 bars\n",
        "for i, (city, total) in enumerate(zip(dfplot.index, df_pivot['total_right'])):\n",
        "    ax.text(total + 1, i, f'{total:.0f} ', va='center', ha='left', fontsize=7, color='grey', fontweight='bold')\n",
        "\n",
        "# Add values for individual bars (top1)\n",
        "for i, (city, center, top9, top1) in enumerate(zip(dfplot.index, df_pivot[\"50-90\"], df_pivot[\"90-99\"], df_pivot[\"top1\"])):\n",
        "    ax.text(top9+(top1/2), i, f'{abs(top1):.0f}', va='center', ha='center', fontsize=7, color='grey')\n",
        "\n",
        "# Add values for individual bars (top9)\n",
        "for i, (city, center, top9) in enumerate(zip(dfplot.index, df_pivot[\"50-90\"], df_pivot[\"90-99\"])):\n",
        "    ax.text((top9/2), i, f'{abs(top9):.0f}', va='center', ha='center', fontsize=7, color='white')\n",
        "\n",
        "# Add values for individual bars (center)\n",
        "for i, (city, bottom50, center) in enumerate(zip(dfplot.index, df_pivot[\"bottom50\"], df_pivot[\"50-90\"])):\n",
        "    ax.text(center+(bottom50/2), i, f'{abs(bottom50):.0f}', va='center', ha='center', fontsize=7, color='white')\n",
        "\n",
        "# Add values for individual bars (center)\n",
        "for i, (city, center) in enumerate(zip(dfplot.index, df_pivot[\"50-90\"])):\n",
        "    ax.text((center/2), i, f'{abs(center):.0f}', va='center', ha='center', fontsize=7, color='white')\n",
        "\n",
        "# Configurar la leyenda manualmente con cuadrados\n",
        "handles = [\n",
        "    mpatches.Patch(color=palette[1], label=\"Bottom 50\", linewidth=2),\n",
        "    mpatches.Patch(color=palette[0], label=\"(50-90]\", linewidth=2),\n",
        "    mpatches.Patch(color=palette[2], label=\"(90-99]\", linewidth=2),\n",
        "    mpatches.Patch(color=palette[3], label=\"Top 1\", linewidth=2)\n",
        "]\n",
        "\n",
        "# Configuración de la leyenda\n",
        "plt.legend(\n",
        "    handles=handles,\n",
        "    loc='lower center', \n",
        "    bbox_to_anchor=(0.5, -0.12),\n",
        "    ncol=4,  # Para que los elementos queden en una fila\n",
        "    fontsize=8,\n",
        "    frameon=False,\n",
        "    handlelength=0.5,\n",
        "    handleheight=0.5,\n",
        "    borderpad=0.2,\n",
        "    columnspacing=0.4\n",
        ")\n",
        "\n",
        "# Add Data Source\n",
        "plt.text(0, -0.135, 'Data Source:', \n",
        "    transform=plt.gca().transAxes, \n",
        "    fontsize=8,\n",
        "    fontweight='bold',\n",
        "    color='gray')\n",
        "space = \" \" * 23\n",
        "plt.text(0, -0.135, space + 'World Inequality Database (WID)', \n",
        "    transform=plt.gca().transAxes, \n",
        "    fontsize=8,\n",
        "    color='gray')\n",
        "\n",
        "# Remove spines\n",
        "for spine in plt.gca().spines.values():\n",
        "    spine.set_visible(False)\n",
        "\n",
        " # Adjust layout\n",
        "plt.tight_layout()\n",
        "\n",
        "# Plot it! :)\n",
        "plt.show()"
      ],
      "id": "Income-90-10",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "<script>\n",
        "  document.addEventListener('DOMContentLoaded', function () {\n",
        "    const targetDiv = document.getElementById('income-90-10');\n",
        "    if (targetDiv) {\n",
        "      const dropdowns = targetDiv.querySelectorAll('details.code-fold');\n",
        "      dropdowns.forEach(function(dropdown) {\n",
        "        if (dropdown.querySelector('summary')) {\n",
        "          dropdown.querySelector('summary').textContent = 'Income 90-10';\n",
        "        }\n",
        "      });\n",
        "    }\n",
        "  });\n",
        "</script>\n"
      ],
      "id": "b4227dbf"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| eval: false\n",
        "#| echo: true\n",
        "#| output: false\n",
        "#| warning: false\n",
        "#| label: Wealth 90-10\n",
        "# Libraries\n",
        "# ==========================================\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import requests\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "import matplotlib.patches as mpatches\n",
        "\n",
        "# Data Extraction - GITHUB (Countries)\n",
        "# =====================================================================\n",
        "# Extract JSON and bring data to a dataframe\n",
        "url = 'https://raw.githubusercontent.com/guillemmaya92/world_map/main/Dim_Country.json'\n",
        "response = requests.get(url)\n",
        "data = response.json()\n",
        "df = pd.DataFrame(data)\n",
        "df = pd.DataFrame.from_dict(data, orient='index').reset_index()\n",
        "df_countries = df.rename(columns={'index': 'ISO3', 'Country_Abr': 'name'})\n",
        "\n",
        "# Data Extraction - WID (Percentiles)\n",
        "# ==========================================\n",
        "# Carga del archivo Parquet\n",
        "df = pd.read_parquet(\"https://github.com/guillemmaya92/Analytics/raw/refs/heads/master/Data/WID_Percentiles.parquet\")\n",
        "\n",
        "# Data Manipulation\n",
        "# =====================================================================\n",
        "# Filter a year and select measure\n",
        "df = df[df['country'].isin([\"NO\", \"DK\", \"ES\", \"FR\", \"DE\", \"UK\", \"US\", \"IN\", \"CN\", \"JA\", \"AR\", \"RU\", \"QA\", \"CL\", \"BR\", \"CA\", \"AU\", \"KR\", \"MX\", \"ZA\"])]\n",
        "df = df[df['year'] == 2021]\n",
        "df['value'] = df['wealth']\n",
        "\n",
        "# Grouping by percentiles\n",
        "df[\"group\"] = pd.cut(\n",
        "    df[\"percentile\"],\n",
        "    bins=[0, 50, 89, 99, 100],\n",
        "    labels=[\"bottom50\", \"50-90\", \"90-99\", \"top1\"],\n",
        "    include_lowest=True\n",
        ")\n",
        "\n",
        "# Calculate percents\n",
        "df['side'] = np.where(df['group'].isin(['bottom50', '50-90']), 'left', 'right')\n",
        "df['value'] *= df['side'].eq('left').map({True: -1, False: 1})\n",
        "\n",
        "# Select columns\n",
        "df = df[['country', 'group', 'value']]\n",
        "df = df.groupby([\"country\", \"group\"], as_index=False)[\"value\"].sum()\n",
        "df['value'] = np.where((df['group'] == 'bottom50') & (df['value'] >= 0), np.nan, df['value'])\n",
        "\n",
        "# Pivot columns\n",
        "df_pivot = df.pivot(index=\"country\", columns=\"group\", values=\"value\").fillna(0).reset_index()\n",
        "\n",
        "# Merge names\n",
        "df_pivot = df_pivot.merge(df_countries[['ISO2', 'name']], left_on='country', right_on='ISO2', how='inner')\n",
        "df_pivot = df_pivot.drop(columns=['ISO2'])\n",
        "\n",
        "# Define column with values for individuals and professionals\n",
        "df_pivot['total_left'] = df_pivot['bottom50'] + df_pivot['50-90']\n",
        "df_pivot['total_right'] = df_pivot['90-99'] + df_pivot['top1']\n",
        "df_pivot = df_pivot.sort_values(by='total_left', ascending=True)\n",
        "\n",
        "# Select and order columns\n",
        "order = [\"name\", \"50-90\", \"bottom50\", \"90-99\", \"top1\"]\n",
        "dfplot = df_pivot[order]\n",
        "dfplot.set_index('name', inplace=True)\n",
        "\n",
        "print(dfplot)\n",
        "\n",
        "# Data Visualization\n",
        "# ==========================================\n",
        "# Font and style\n",
        "plt.rcParams.update({'font.family': 'sans-serif', 'font.sans-serif': ['Franklin Gothic'], 'font.size': 9})\n",
        "sns.set(style=\"white\", palette=\"muted\")\n",
        "\n",
        "# Palette color\n",
        "palette = [\"#537c78\", \"#f15b4c\", \"#faa41b\", \"#ffd45b\"]\n",
        "\n",
        "# Create horizontal stack bar plot\n",
        "ax = dfplot.plot(kind=\"barh\", stacked=True, figsize=(10, 6), width=0.7, color=palette)\n",
        "\n",
        "# Add title and labels\n",
        "ax.text(0, 1.12, f'Where is income distribution concentrated?', fontsize=16, fontweight='bold', ha='left', transform=ax.transAxes)\n",
        "ax.text(0, 1.07 , f'Income Percentile Breakdown by Country', fontsize=11, color='#262626', ha='left', transform=ax.transAxes)\n",
        "ax.set_xlim(-100, 100)\n",
        "xticks = np.linspace(-75, 75, 7)\n",
        "plt.xticks(xticks, labels=[f\"{abs(int(i))}%\" for i in xticks], fontsize=8)\n",
        "plt.gca().set_ylabel('')\n",
        "plt.yticks(fontsize=9, color='#282828', fontweight='bold')\n",
        "plt.grid(axis='x', linestyle='--', color='gray', linewidth=0.5, alpha=0.3)\n",
        "plt.axvline(x=0, color='#282828', linestyle='-', linewidth=1.5, alpha=0.7)\n",
        "\n",
        "# Add individual and professional text\n",
        "plt.text(0.25, 1.02, 'Bottom 90', fontsize=9.5, fontweight='bold', va='center', ha='center', transform=ax.transAxes, color=\"#526b69\")\n",
        "plt.text(0.75, 1.02, 'Top 10', fontsize=9.5, fontweight='bold', va='center', ha='center', transform=ax.transAxes, color=\"#b58231\")\n",
        "\n",
        "# Add strict regulation zone\n",
        "ynum = 0\n",
        "ax.axvspan(-100, 100, ymin=0, ymax=ynum/len(dfplot), color='gray', alpha=0.1)\n",
        "plt.axhline(y=ynum-0.5, color='#282828', linestyle='--', linewidth=0.5, alpha=0.3)\n",
        "plt.text(-100, ynum-0.4, 'Countries with fair distribution on wealth (indeed, no one...)', fontsize=5, fontweight='bold', color=\"gray\", ha=\"left\")\n",
        "\n",
        "# Add values for total bottom50 bars\n",
        "for i, (city, total) in enumerate(zip(dfplot.index, df_pivot['total_left'])):\n",
        "    ax.text(total - 1, i, f'{abs(total):.0f}', va='center', ha='right', fontsize=7, color='grey', fontweight='bold')\n",
        "\n",
        "# Add values for total top50 bars\n",
        "for i, (city, total) in enumerate(zip(dfplot.index, df_pivot['total_right'])):\n",
        "    ax.text(total + 1, i, f'{total:.0f} ', va='center', ha='left', fontsize=7, color='grey', fontweight='bold')\n",
        "\n",
        "# Add values for individual bars (top1)\n",
        "for i, (city, center, top9, top1) in enumerate(zip(dfplot.index, df_pivot[\"50-90\"], df_pivot[\"90-99\"], df_pivot[\"top1\"])):\n",
        "    ax.text(top9+(top1/2), i, f'{abs(top1):.0f}', va='center', ha='center', fontsize=7, color='grey')\n",
        "\n",
        "# Add values for individual bars (top9)\n",
        "for i, (city, center, top9) in enumerate(zip(dfplot.index, df_pivot[\"50-90\"], df_pivot[\"90-99\"])):\n",
        "    ax.text((top9/2), i, f'{abs(top9):.0f}', va='center', ha='center', fontsize=7, color='white')\n",
        "\n",
        "# Add values for individual bars (bottom50)\n",
        "for i, (city, bottom50, center) in enumerate(zip(dfplot.index, df_pivot[\"bottom50\"], df_pivot[\"50-90\"])):\n",
        "    value = abs(bottom50)\n",
        "    if round(value) != 0:  # Solo muestra el texto si el valor redondeado no es cero\n",
        "        ax.text(center + (bottom50 / 2), i, f'{value:.0f}', va='center', ha='center', fontsize=7, color='white')\n",
        "\n",
        "# Add values for individual bars (center)\n",
        "for i, (city, center) in enumerate(zip(dfplot.index, df_pivot[\"50-90\"])):\n",
        "    ax.text((center/2), i, f'{abs(center):.0f}', va='center', ha='center', fontsize=7, color='white')\n",
        "\n",
        "# Configurar la leyenda manualmente con cuadrados\n",
        "handles = [\n",
        "    mpatches.Patch(color=palette[1], label=\"Bottom 50\", linewidth=2),\n",
        "    mpatches.Patch(color=palette[0], label=\"(50-90]\", linewidth=2),\n",
        "    mpatches.Patch(color=palette[2], label=\"(90-99]\", linewidth=2),\n",
        "    mpatches.Patch(color=palette[3], label=\"Top 1\", linewidth=2)\n",
        "]\n",
        "\n",
        "# Configuración de la leyenda\n",
        "plt.legend(\n",
        "    handles=handles,\n",
        "    loc='lower center', \n",
        "    bbox_to_anchor=(0.5, -0.12),\n",
        "    ncol=4,  # Para que los elementos queden en una fila\n",
        "    fontsize=8,\n",
        "    frameon=False,\n",
        "    handlelength=0.5,\n",
        "    handleheight=0.5,\n",
        "    borderpad=0.2,\n",
        "    columnspacing=0.4\n",
        ")\n",
        "\n",
        "# Add Data Source\n",
        "plt.text(0, -0.135, 'Data Source:', \n",
        "    transform=plt.gca().transAxes, \n",
        "    fontsize=8,\n",
        "    fontweight='bold',\n",
        "    color='gray')\n",
        "space = \" \" * 23\n",
        "plt.text(0, -0.135, space + 'World Inequality Database (WID)', \n",
        "    transform=plt.gca().transAxes, \n",
        "    fontsize=8,\n",
        "    color='gray')\n",
        "\n",
        "# Remove spines\n",
        "for spine in plt.gca().spines.values():\n",
        "    spine.set_visible(False)\n",
        "\n",
        " # Adjust layout\n",
        "plt.tight_layout()\n",
        "\n",
        "# Plot it! :)\n",
        "plt.show()"
      ],
      "id": "Wealth-90-10",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "<script>\n",
        "  document.addEventListener('DOMContentLoaded', function () {\n",
        "    const targetDiv = document.getElementById('wealth-90-10');\n",
        "    if (targetDiv) {\n",
        "      const dropdowns = targetDiv.querySelectorAll('details.code-fold');\n",
        "      dropdowns.forEach(function(dropdown) {\n",
        "        if (dropdown.querySelector('summary')) {\n",
        "          dropdown.querySelector('summary').textContent = 'Wealth 90-10';\n",
        "        }\n",
        "      });\n",
        "    }\n",
        "  });\n",
        "</script>\n",
        "\n",
        "\n",
        "\n",
        "::: {layout-ncol=\"2\"}\n",
        "![](FIG_WID_Countries_income_new.png){.lightbox}\n",
        "\n",
        "![](FIG_WID_Countries_wealth_new.png){.lightbox}\n",
        ":::"
      ],
      "id": "4ec8d843"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\guill\\AppData\\Roaming\\Python\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}