{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"China: From rural to urban\"\n",
        "\n",
        "description: \"Examining Social and Economic Inequalities Amid China's Urbanization\"\n",
        "\n",
        "categories: [economy, python]\n",
        "\n",
        "date: \"2026-06-12\"\n",
        "\n",
        "keywords: [\"urbanization\"]\n",
        "\n",
        "format:\n",
        "  html:\n",
        "    code-fold: true\n",
        "---\n",
        "\n",
        "\n",
        "## Summary\n",
        "\n",
        "The charts show the income distribution scale across cities in China and the evolution of income inequality between the rural and urban populations.\n"
      ],
      "id": "bd91f511"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| eval: false\n",
        "#| echo: true\n",
        "#| output: false\n",
        "#| warning: false\n",
        "#| label: China Cities\n",
        "# Libraries\n",
        "# =====================================================================\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "import matplotlib.ticker as ticker\n",
        "import os\n",
        "\n",
        "# Data (China) \n",
        "# =====================================================================\n",
        "# Read wikipedia data\n",
        "url = \"https://en.wikipedia.org/wiki/List_of_prefecture-level_divisions_of_China_by_GDP\"\n",
        "tables = pd.read_html(url)\n",
        "df = tables[0]\n",
        "df.columns = ['region', '1', '2', '3', 'gdp', '4', 'gdpc', '5']\n",
        "df['population'] = df['gdp'] / df['gdpc'] * 1000\n",
        "df = df[['region', 'gdpc', 'population']]\n",
        "df['region'] = df['region'].str.replace('*', '', regex=False)\n",
        "\n",
        "data = pd.DataFrame({\n",
        "    'region': ['Beijing', 'Shangai', 'Chongqing', 'Tianjin', 'Hong Kong', 'Macao'],\n",
        "    'gdpc': [28294, 26747, 12350, 17727, 48800, 36909],\n",
        "    'population': [21.8, 24.7, 32.0, 13.9, 7.5, 0.68],\n",
        "})\n",
        "\n",
        "df = pd.concat([df, data], ignore_index=True)\n",
        "\n",
        "# Data Manipulation\n",
        "# =====================================================================\n",
        "# Order dataframe\n",
        "df = df.sort_values(by=['gdpc'])\n",
        "\n",
        "# Calculate 'left accrual widths'\n",
        "df['population_cum'] = df['population'].cumsum()\n",
        "df['left'] = df['population'].cumsum() - df['population']\n",
        "\n",
        "# Pondered Gini Function\n",
        "def gini(x, weights=None):\n",
        "    if weights is None:\n",
        "        weights = np.ones_like(x)\n",
        "    count = np.multiply.outer(weights, weights)\n",
        "    mad = np.abs(np.subtract.outer(x, x) * count).sum() / count.sum()\n",
        "    rmad = mad / np.average(x, weights=weights)\n",
        "    return 0.5 * rmad\n",
        "\n",
        "# Calculate gini and median\n",
        "gini_index = gini(df['gdpc'].values, df['population'].values)\n",
        "\n",
        "# Calculate weighted median\n",
        "df.sort_values('gdpc', inplace=True)\n",
        "cumsum = df['population'].cumsum()\n",
        "cutoff = df['population'].sum() / 2.0\n",
        "median = df.loc[cumsum >= cutoff, 'gdpc'].iloc[0]\n",
        "\n",
        "# Show dataframe, gini and median\n",
        "print(df)\n",
        "print(gini_index)\n",
        "print(median)\n",
        "\n",
        "# Data Visualization\n",
        "# =====================================================================\n",
        "# Seaborn figure style\n",
        "sns.set(style=\"whitegrid\")\n",
        "fig, ax = plt.subplots(figsize=(12, 8))\n",
        "\n",
        "# Create a palette\n",
        "norm = plt.Normalize(df[\"gdpc\"].min(), 25000)\n",
        "colors = plt.cm.coolwarm_r(norm(df[\"gdpc\"]))\n",
        "\n",
        "# Create a Matplotlib plot\n",
        "bars = plt.bar(df['left'], df['gdpc'], width=df['population'], \n",
        "        color=colors, alpha=1, align='edge', edgecolor='grey', linewidth=0.1)\n",
        "\n",
        "# Title\n",
        "fig.add_artist(plt.Line2D([0.08, 0.08], [0.90, 0.99], linewidth=6, color='#203764', solid_capstyle='butt'))\n",
        "ax.text(0.02, 1.09, f'Regional GDP Distribution of China', fontsize=16, fontweight='bold', ha='left', transform=plt.gca().transAxes)\n",
        "ax.text(0.02, 1.06, f'From rural to urban, the role of location in income inequality', fontsize=11, color='#262626', ha='left', transform=plt.gca().transAxes)\n",
        "ax.text(0.02, 1.03, f'(GDP per capita in $US)', fontsize=9, color='#262626', ha='left', transform=plt.gca().transAxes)\n",
        "\n",
        "# Configuration grid and labels\n",
        "ax.set_xlim(0, df['population_cum'].max()) \n",
        "ax.set_ylim(0, df['gdpc'].max() * 1.093)\n",
        "ax.set_xlabel('Cumulative Population (M)', fontsize=10, fontweight='bold')\n",
        "ax.set_ylabel('GDP per capita ($USD)', fontsize=10, fontweight='bold')\n",
        "ax.grid(axis='x')\n",
        "ax.grid(axis='y', linestyle='--', linewidth=0.5, color='lightgray')\n",
        "ax.tick_params(axis='x', labelsize=9)\n",
        "ax.tick_params(axis='y', labelsize=9) \n",
        "ax.yaxis.set_major_formatter(ticker.FuncFormatter(lambda x, _: f'{int(x):,}'))\n",
        "ax.xaxis.set_major_formatter(ticker.FuncFormatter(lambda x, _: f'{int(x):,}'))\n",
        "ax.spines['top'].set_visible(False)\n",
        "ax.spines['right'].set_visible(False)\n",
        "ax.axhline(y=median, color='red', linestyle='--', linewidth=0.5, zorder=0, alpha=0.4)\n",
        "ax.text(75, median + 100, f\"Median: {median:,.0f}$\", color='darkred', fontweight='bold', fontsize=9, ha='center', va='bottom', zorder=2)\n",
        "\n",
        "# Add text each region except √Åvila and Segovia\n",
        "for i, bar in enumerate(bars):\n",
        "    region_name = df['region'].iloc[i]\n",
        "    \n",
        "    top_cities = [\n",
        "        'Beijing', 'Shangai', 'Chongqing', 'Tianjin', 'Hong Kong',\n",
        "        'Ordos', 'Suzhou, Jiangsu', 'Zhenjiang', 'Jieyang', 'Kashgar', 'Shangrao', 'Qujing',\n",
        "        'Shenzhen', 'Guangzhou', 'Suzhou', 'Chengdu', 'Wuhan', 'Hangzhou', 'Nanjing',\n",
        "        'Ningbo', 'Qingdao', 'Wuxi', 'Changsha', 'Zhengzhou', 'Fuzhou', 'Quanzhou',\n",
        "        'Jinan', 'Dongguan', 'Foshan', \"Xi'an\", 'Dalian', 'Wenzhou', 'Shenyang',\n",
        "        'Kunming', 'Baoding', 'Shijiazhuang', 'Linyi', 'Harbin', 'Nanyang',\n",
        "        'Weifang', 'Handan', 'Changchun', 'Xuzhou', 'Ganzhou', 'Zhoukou', 'Nanning',\n",
        "        'Heze', 'Fujian', 'Jining', 'Shaoyang', 'Hefei', 'Nantong', 'Shangqiu',\n",
        "        'Tangshan', 'Hengyang', 'Cangzhou', 'Jinhua', 'Luoyang', 'Xingtai',\n",
        "        'Zhanjiang', 'Zhumadian', 'Bijie'\n",
        "    ]\n",
        "    \n",
        "    # Add labels\n",
        "    if region_name in top_cities:\n",
        "        x = bar.get_x() + bar.get_width() / 2\n",
        "        y = bar.get_height()\n",
        "        \n",
        "        # Special position\n",
        "        if region_name in [\"Ordos\", \"Jinan\", \"Foshan\", \"Qingdao\"]:\n",
        "            x -= 5\n",
        "            y += 1000\n",
        "        else:\n",
        "            y += 1000\n",
        "\n",
        "        ax.text(\n",
        "            x, y,\n",
        "            region_name,\n",
        "            ha='center', va='bottom', color='#363636', fontsize=7, rotation=90,\n",
        "        )\n",
        "\n",
        "# Add Year label \n",
        "ax.text(1, 1.12, f'2022',\n",
        "             transform=plt.gca().transAxes,\n",
        "             fontsize=22, ha='right', va='top',\n",
        "             fontweight='bold', color='#D3D3D3')\n",
        "    \n",
        "# Add Data Source\n",
        "ax.text(0, -0.1, 'Data Source: National Bureau of Statistics of China', \n",
        "            transform=plt.gca().transAxes, \n",
        "            fontsize=8, \n",
        "            color='gray')\n",
        "\n",
        "# Show GINI Index\n",
        "ax.text(\n",
        "    0.09, 0.97, f\"Gini Index: {gini_index:.2f}\", \n",
        "    transform=ax.transAxes,\n",
        "    fontsize=8.5,\n",
        "    color='black',\n",
        "    ha='right',\n",
        "    va='top', \n",
        "    bbox=dict(boxstyle=\"round,pad=0.3\", edgecolor='gray', facecolor='white')\n",
        ")\n",
        "\n",
        "# Add Gini Index\n",
        "ax.text(0, -0.12, 'Notes: The Gini coefficient has been calculated using population weights for each region.', \n",
        "            transform=plt.gca().transAxes, \n",
        "            fontsize=8, \n",
        "            color='gray')\n",
        "\n",
        "# Add label \"poorest\" and \"richest\"\n",
        "ax.text(0, -0.065, 'Low Income',\n",
        "             transform=ax.transAxes,\n",
        "             fontsize=11, fontweight='bold', color='darkred', ha='left', va='center')\n",
        "ax.text(0.915, -0.065, 'High Income',\n",
        "             transform=ax.transAxes,\n",
        "             fontsize=11, fontweight='bold', color='darkblue', va='center')\n",
        "\n",
        "# Adjust layout\n",
        "plt.tight_layout()\n",
        "\n",
        "# Save it...\n",
        "download_folder = os.path.join(os.path.expanduser(\"~\"), \"Downloads\")\n",
        "filename = os.path.join(download_folder, f\"FIG_BUREAU_Region_Distribution_China_Prefecture.png\")\n",
        "plt.savefig(filename, dpi=300, bbox_inches='tight')\n",
        "\n",
        "# Show :)\n",
        "plt.show()"
      ],
      "id": "China-Cities",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "::: {layout-ncol=\"1\"}\n",
        "![](FIG_BUREAU_Region_Distribution_China_Prefecture.png){.lightbox}\n",
        ":::\n"
      ],
      "id": "4136a1d5"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| eval: false\n",
        "#| echo: true\n",
        "#| output: false\n",
        "#| warning: false\n",
        "#| label: China Urban-Rural\n",
        "# Libraries\n",
        "# =====================================================\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import os\n",
        "\n",
        "# Get Data (NBS and WID)\n",
        "# =====================================================\n",
        "data = {\n",
        "    \"year\": list(range(1980, 2024)),\n",
        "    \"urban_population\": [\n",
        "        19140, 20171, 21480, 22274, 24017, 25094, 26366, 27674, 28661, 29540, 30195, 31203, 32175,\n",
        "        33173, 34169, 35174, 37304, 39449, 41608, 43748, 45906, 48064, 50212, 52376, 54283, 56212,\n",
        "        58288, 60633, 62403, 64512, 66978, 69927, 72175, 74502, 76738, 79302, 81924, 84343, 86433,\n",
        "        88426, 90220, 91425, 92071, 93267\n",
        "    ],\n",
        "    \"rural_population\": [\n",
        "        79565, 79901, 80174, 80734, 80340, 80757, 81141, 81626, 82365, 83164, 84138, 84620, 84996,\n",
        "        85344, 85681, 85947, 85085, 84177, 83153, 82038, 80837, 79563, 78241, 76851, 75705, 74544,\n",
        "        73160, 71496, 70399, 68938, 67113, 64989, 63747, 62224, 60908, 59024, 57308, 55668, 54108,\n",
        "        52582, 50992, 49835, 49104, 47700\n",
        "    ],\n",
        "    \"urban_consumption\": [\n",
        "        490, 517, 504, 547, 621, 750, 847, 953, 1200, 1345, 1404, 1623, 2017, 2676, 3671, 4810,\n",
        "        5437, 5705, 5977, 6429, 7083, 7409, 7826, 8166, 8942, 9900, 10820, 12582, 14147, 15161,\n",
        "        17119, 19853, 21563, 23386, 25264, 27039, 29324, 31454, 33700, 35841, 34823, 39205, 40066,\n",
        "        43797\n",
        "    ],\n",
        "    \"rural_consumption\": [\n",
        "        178, 202, 227, 252, 280, 346, 385, 427, 506, 588, 627, 661, 701, 822, 1073, 1344, 1655, 1768,\n",
        "        1778, 1793, 1917, 2032, 2157, 2292, 2521, 2784, 3066, 3538, 3981, 4295, 4782, 5880, 6573,\n",
        "        7397, 8365, 9409, 10609, 12145, 13985, 15460, 16209, 18720, 19929, 21953\n",
        "    ],\n",
        "    \"gini_pre\": [\n",
        "        0.38, 0.39, 0.39, 0.39, 0.4, 0.4, 0.42, 0.42, 0.43, 0.44, 0.43, 0.45, 0.46, 0.48, 0.48,\n",
        "        0.48, 0.47, 0.47, 0.47, 0.48, 0.5, 0.51, 0.53, 0.54, 0.55, 0.56, 0.56, 0.56, 0.56, 0.56,\n",
        "        0.57, 0.56, 0.55, 0.56, 0.55, 0.56, 0.55, 0.56, 0.56, 0.56, 0.56, 0.57, 0.57, 0.57\n",
        "    ],\n",
        "    \"gini_pos\": [\n",
        "        0.37678, 0.38164, 0.38878, 0.38653, 0.39165, 0.39926, 0.41379, 0.41783, 0.42156, 0.43046,\n",
        "        0.4264, 0.44225, 0.45711, 0.47219, 0.47823, 0.47116, 0.46628, 0.46659, 0.46798, 0.4751,\n",
        "        0.49029, 0.49467, 0.52002, 0.52932, 0.53136, 0.54142, 0.53733, 0.53991, 0.53665, 0.53439,\n",
        "        0.53852, 0.53215, 0.51823, 0.5256, 0.51737, 0.51879, 0.51648, 0.52329, 0.51837, 0.5174,\n",
        "        0.52289, 0.52394, 0.52394, 0.52394\n",
        "    ],\n",
        "   \"gini_urb\": [\n",
        "        0.2415, 0.243, 0.2424, 0.2463, 0.2606, 0.2886, 0.2711, 0.2576, 0.267, 0.2738,\n",
        "        0.2709, 0.2643, 0.2848, 0.3021, 0.3103, 0.3074, 0.3151, 0.3239, 0.3316, 0.3372,\n",
        "        0.3456, 0.3589, 0.4127, 0.4245, 0.4383, 0.4464, 0.4492, 0.452, 0.456, 0.4516,\n",
        "        0.4569, 0.4802, 0.4412, 0.474, 0.4466, 0.4474,\n",
        "        None, None, None, None, None, None, None, None\n",
        "    ],\n",
        "    \"gini_rur\": [\n",
        "        0.3329, 0.3422, 0.349, 0.3542, 0.3584, 0.3619, 0.3707, 0.3774, 0.3827, 0.387,\n",
        "        0.3907, 0.4043, 0.4128, 0.4201, 0.4262, 0.4275, 0.43, 0.4315, 0.4267, 0.4311,\n",
        "        0.4531, 0.4608, 0.4665, 0.4677, 0.4601, 0.4886, 0.483, 0.4921, 0.4903, 0.4963,\n",
        "        0.5239, 0.5292, 0.5259, 0.524, 0.5232, 0.524, \n",
        "        None, None, None, None, None, None, None, None\n",
        "    ]\n",
        "}\n",
        "\n",
        "df = pd.DataFrame(data)\n",
        "df['var_consumption'] = df['urban_consumption'] / df['rural_consumption']\n",
        "df['var_population'] = df['urban_population'] / df['rural_population']\n",
        "df['gini'] = df['gini_pos']\n",
        "df = df[['year', 'gini', 'var_consumption', 'var_population', 'gini_urb', 'gini_rur']]\n",
        "\n",
        "# Data Visualization\n",
        "# =====================================================\n",
        "# Font and style\n",
        "plt.rcParams.update({'font.family': 'sans-serif', 'font.sans-serif': ['Franklin Gothic'], 'font.size': 9})\n",
        "sns.set(style=\"white\", palette=\"muted\")\n",
        "\n",
        "# Create figure and axis\n",
        "fig, ax1 = plt.subplots(figsize=(8, 6))\n",
        "\n",
        "# Axis 1 DISPARITY\n",
        "ax1.set_ylabel('Gini coefficient', fontsize=10)\n",
        "line1, = ax1.plot(df['year'], df['gini'], color='#C00000', linewidth=2)\n",
        "ax1.tick_params(axis='y')\n",
        "ax1.set_xlim(1980, 2024)\n",
        "ax1.set_ylim(0, 0.6)\n",
        "ax1.tick_params(axis='x', labelsize=9)\n",
        "ax1.tick_params(axis='y', labelsize=8)\n",
        "\n",
        "# Axis 2 GINI\n",
        "ax2 = ax1.twinx()\n",
        "ax2.set_ylabel('Urban-rural ratio', fontsize=10)\n",
        "line2, = ax2.plot(df['year'], df['var_consumption'], color='#215C98', linewidth=2)\n",
        "line3, = ax2.plot(df['year'], df['var_population'], color='#282828', linewidth=1, linestyle=\":\")\n",
        "ax2.tick_params(axis='y')\n",
        "ax2.set_ylim(0, 4)\n",
        "ax2.tick_params(axis='y', labelsize=8)\n",
        "\n",
        "# Title and grid\n",
        "plt.text(0.02, 1.13, f'Inequality Trends in China', fontsize=16, fontweight='bold', ha='left', transform=plt.gca().transAxes)\n",
        "plt.text(0.02, 1.08, f'Urban-Rural Consumption Ratio and Gini Coefficient since 1980', fontsize=11, color=\"#3A3A3A\", ha='left', transform=plt.gca().transAxes)\n",
        "ax1.grid(axis='y', linestyle='-', alpha=0.5)\n",
        "\n",
        "# Remove spines\n",
        "for ax in (ax1, ax2):\n",
        "    for spine_name, spine in ax.spines.items():\n",
        "        if spine_name == 'bottom':\n",
        "            spine.set_visible(True)\n",
        "            spine.set_linewidth(0.5)\n",
        "        else:\n",
        "            spine.set_visible(False)\n",
        "\n",
        "# Legend at bottom center\n",
        "plt.plot([], [], color='#C00000', label='Gini coefficient')\n",
        "plt.plot([], [], color='#215C98', label='Consumption ratio')\n",
        "plt.plot([], [], color='#282828', label='Population ratio', linestyle=':')\n",
        "plt.legend(\n",
        "    loc='lower center',\n",
        "    bbox_to_anchor=(0.5, -0.15),\n",
        "    ncol=3,\n",
        "    fontsize=8,\n",
        "    frameon=False,\n",
        "    handlelength=1,\n",
        "    handleheight=1,\n",
        "    borderpad=0.2,\n",
        "    columnspacing=0.5\n",
        ")\n",
        "\n",
        "# Add Data Source\n",
        "plt.text(0, -0.18, 'Data Source:', \n",
        "    transform=plt.gca().transAxes, \n",
        "    fontsize=8,\n",
        "    fontweight='bold',\n",
        "    color='gray')\n",
        "space = \" \" * 23\n",
        "plt.text(0, -0.18, space + 'National Bureau of Statistics of China (NBS), World Inequality Database (WID)', \n",
        "    transform=plt.gca().transAxes, \n",
        "    fontsize=8,\n",
        "    color='gray')\n",
        "\n",
        "# Add Notes\n",
        "plt.text(0, -0.21, 'Ratio:', \n",
        "    transform=plt.gca().transAxes, \n",
        "    fontsize=8,\n",
        "    fontweight='bold',\n",
        "    color='gray')\n",
        "space = \" \" * 11\n",
        "plt.text(0, -0.21, space + 'Urban-Rural Ratio measures the relative size between urban and rural for population and consumption', \n",
        "    transform=plt.gca().transAxes, \n",
        "    fontsize=8,\n",
        "    color='gray')\n",
        "\n",
        "# Add Notes\n",
        "plt.text(0, -0.24, 'Gini:', \n",
        "    transform=plt.gca().transAxes, \n",
        "    fontsize=8,\n",
        "    fontweight='bold',\n",
        "    color='gray')\n",
        "space = \" \" * 9\n",
        "plt.text(0, -0.24, space + 'Gini coefficient is calculated using post-tax national income to measure income inequality', \n",
        "    transform=plt.gca().transAxes, \n",
        "    fontsize=8,\n",
        "    color='gray')\n",
        "\n",
        "# Adjust\n",
        "plt.tight_layout()\n",
        "\n",
        "# Save it...\n",
        "download_folder = os.path.join(os.path.expanduser(\"~\"), \"Downloads\")\n",
        "filename = os.path.join(download_folder, f\"FIG_NBS_Inequality_China.png\")\n",
        "plt.savefig(filename, dpi=300, bbox_inches='tight')\n",
        "\n",
        "# Show it :)\n",
        "plt.show()"
      ],
      "id": "China-Urban-Rural",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "::: {layout-ncol=\"1\"}\n",
        "![](FIG_NBS_Inequality_China.png){.lightbox}\n",
        ":::"
      ],
      "id": "d7fd9b51"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\guill\\AppData\\Roaming\\Python\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}