{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"A history of global debt\"\n",
        "\n",
        "description: \"Exploring the evolution of global debt and its structure.\"\n",
        "\n",
        "categories: [economy, python]\n",
        "\n",
        "date: \"2026-05-18\"\n",
        "\n",
        "keywords: [\"global debt\"]\n",
        "\n",
        "format:\n",
        "  html:\n",
        "    code-fold: true\n",
        "---\n",
        "\n",
        "\n",
        "## Summary\n",
        "\n",
        "The chart shows the evolution of `global debt` over time, highlighting its structural composition. It provides insights into how debt levels have changed reached record levels during last years.\n"
      ],
      "id": "c55c25fe"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| eval: false\n",
        "#| echo: true\n",
        "#| output: false\n",
        "#| warning: false\n",
        "#| label: Debt\n",
        "# Libraries\n",
        "# =====================================================================\n",
        "import requests\n",
        "import wbgapi as wb\n",
        "import pandas as pd\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "import matplotlib.patches as mpatches\n",
        "import matplotlib.ticker as ticker\n",
        "import matplotlib.ticker as mticker\n",
        "import os\n",
        "\n",
        "# Data Extraction (Countries)\n",
        "# =====================================================================\n",
        "# Extract JSON and bring data to a dataframe\n",
        "url = 'https://raw.githubusercontent.com/guillemmaya92/world_map/main/Dim_Country.json'\n",
        "response = requests.get(url)\n",
        "data = response.json()\n",
        "df = pd.DataFrame(data)\n",
        "df = pd.DataFrame.from_dict(data, orient='index').reset_index()\n",
        "df_countries = df.rename(columns={'index': 'ISO3'})\n",
        "\n",
        "# Data Extraction - WBD (1960-1980)\n",
        "# ========================================================\n",
        "# To use the built-in plotting method\n",
        "indicator = ['NY.GDP.PCAP.KD', 'SP.POP.TOTL']\n",
        "countries = df_countries['ISO3'].tolist()\n",
        "data_range = range(1960, 1980)\n",
        "data = wb.data.DataFrame(indicator, countries, data_range, numericTimeKeys=True, labels=False, columns='series').reset_index()\n",
        "df_wb = data.rename(columns={\n",
        "    'economy': 'ISO3',\n",
        "    'time': 'Year',\n",
        "    'SP.POP.TOTL': 'pop',\n",
        "    'NY.GDP.PCAP.KD': 'gdpc'\n",
        "})\n",
        "\n",
        "# Filter nulls and create total\n",
        "df_wb = df_wb[~df_wb['gdpc'].isna()]\n",
        "df_wb['Value'] = df_wb['gdpc'] * df_wb['pop']\n",
        "df_wb['Parameter'] = 'NGDPD'\n",
        "df_wb = df_wb[['Parameter', 'ISO3', 'Year', 'Value']]\n",
        "\n",
        "# Data Extraction (IMF)\n",
        "# =====================================================================\n",
        "#Parametro\n",
        "parameters = ['NGDPD', 'PVD_LS', 'HH_LS', 'NFC_LS', 'CG_DEBT_GDP', 'GG_DEBT_GDP', 'NFPS_DEBT_GDP', 'PS_DEBT_GDP']\n",
        "\n",
        "# Create an empty list\n",
        "records = []\n",
        "\n",
        "# Iterar sobre cada parámetro\n",
        "for parameter in parameters:\n",
        "    # Request URL\n",
        "    url = f\"https://www.imf.org/external/datamapper/api/v1/{parameter}\"\n",
        "    response = requests.get(url)\n",
        "    data = response.json()\n",
        "    values = data.get('values', {})\n",
        "\n",
        "    # Iterate over each country and year\n",
        "    for country, years in values.get(parameter, {}).items():\n",
        "        for year, value in years.items():\n",
        "            records.append({\n",
        "                'Parameter': parameter,\n",
        "                'ISO3': country,\n",
        "                'Year': int(year),\n",
        "                'Value': float(value)\n",
        "            })\n",
        "    \n",
        "# Create dataframe\n",
        "df_imf = pd.DataFrame(records)\n",
        "\n",
        "# Data Manipulation\n",
        "# =====================================================================\n",
        "# Merge IMF and WBD\n",
        "df = pd.concat([df_imf, df_wb], ignore_index=True)\n",
        "\n",
        "# Pivot Parameter to columns and filter nulls\n",
        "df = df.pivot(index=['ISO3', 'Year'], columns='Parameter', values='Value').reset_index()\n",
        "df = df.dropna(subset=['PVD_LS', 'HH_LS', 'NFC_LS', 'CG_DEBT_GDP', 'GG_DEBT_GDP', 'NFPS_DEBT_GDP', 'PS_DEBT_GDP'], how='all')\n",
        "\n",
        "# Calculate Totals\n",
        "df['GDP'] = df['NGDPD']\n",
        "df['Public'] = df['GG_DEBT_GDP'].fillna(df['CG_DEBT_GDP']).fillna(df['NFPS_DEBT_GDP']) * df['GDP']\n",
        "df['HH'] =  df['HH_LS'] * df['GDP']\n",
        "df['NFC'] = df['NFC_LS'].fillna(df['PVD_LS']) * df['GDP']\n",
        "\n",
        "# Merge countries\n",
        "df = df.merge(df_countries, how='left', left_on='ISO3', right_on='ISO3')\n",
        "df = df[['ISO3', 'Country', 'Year', 'GDP', 'NFC', 'HH', 'Public']]\n",
        "df = df[df['Country'].notna()]\n",
        "\n",
        "# Groupping data\n",
        "df = df.groupby('Year', as_index=False)[['GDP', 'NFC', 'HH', 'Public']].sum()\n",
        "\n",
        "# Percent\n",
        "df['NFC'] = df['NFC'] / df['GDP']\n",
        "df['HH'] = df['HH'] / df['GDP']\n",
        "df['Public'] = df['Public'] / df['GDP']\n",
        "\n",
        "# Adjust table\n",
        "df.drop(columns=['GDP'], inplace=True)\n",
        "df = df[df['Year'] >= 1960]\n",
        "df.set_index('Year', inplace=True)\n",
        "\n",
        "print(df)\n",
        "\n",
        "# Data Visualization\n",
        "# =====================================================================\n",
        "# Font and style\n",
        "plt.rcParams.update({'font.family': 'sans-serif', 'font.sans-serif': ['Franklin Gothic'], 'font.size': 9})\n",
        "sns.set(style=\"white\", palette=\"muted\")\n",
        "\n",
        "# Palette\n",
        "palette = [\"#004b96\", \"#009bde\", \"#f1a900\"]\n",
        "\n",
        "# Create figure\n",
        "fig, ax = plt.subplots(figsize=(8, 6))\n",
        "\n",
        "# Crear figure and plot\n",
        "df.plot(kind=\"bar\", stacked=True, width=0.9, color=palette, legend=False, ax=ax)\n",
        "\n",
        "# Add title and labels\n",
        "fig.add_artist(plt.Line2D([0.07, 0.07], [0.87, 0.97], linewidth=6, color='#203764', solid_capstyle='butt'))\n",
        "plt.text(0.02, 1.13, f'A history of debt', fontsize=16, fontweight='bold', ha='left', transform=plt.gca().transAxes)\n",
        "plt.text(0.02, 1.09, f'While global debt has risen dramatically since 1980', fontsize=11, color='#262626', ha='left', transform=plt.gca().transAxes)\n",
        "plt.text(0.02, 1.05, f'(debt as percent of GDP)', fontsize=9, color='#262626', ha='left', transform=plt.gca().transAxes)\n",
        "\n",
        "# Adjust ticks and grid\n",
        "plt.ylim(0, 250)\n",
        "ax.yaxis.set_major_formatter(mticker.FuncFormatter(lambda x, pos: f'{int(x):,}'.replace(\",\", \".\")))\n",
        "ax.xaxis.set_major_locator(ticker.MultipleLocator(10))\n",
        "plt.gca().set_xlabel('')\n",
        "plt.yticks(fontsize=9, color='#282828')\n",
        "plt.xticks(fontsize=9, rotation=0)\n",
        "plt.grid(axis='y', linestyle='--', color='gray', linewidth=0.5, alpha=0.3)\n",
        "\n",
        "# Custom legend values\n",
        "handles = [\n",
        "    mpatches.Patch(color=palette[2], label=\"Public debt\", linewidth=2),\n",
        "    mpatches.Patch(color=palette[1], label=\"Household debt (HH)\", linewidth=2),\n",
        "    mpatches.Patch(color=palette[0], label=\"Nonfinancial Corporate debt (NFC)\", linewidth=2)\n",
        "]\n",
        "\n",
        "# Legend\n",
        "plt.legend(\n",
        "    handles=handles,\n",
        "    loc='lower center', \n",
        "    bbox_to_anchor=(0.5, -0.12),\n",
        "    ncol=4,\n",
        "    fontsize=8,\n",
        "    frameon=False,\n",
        "    handlelength=0.5,\n",
        "    handleheight=0.5,\n",
        "    borderpad=0.2,\n",
        "    columnspacing=0.4\n",
        ")\n",
        "\n",
        "# Add Data Source\n",
        "plt.text(0, -0.15, 'Data Source:', \n",
        "    transform=plt.gca().transAxes, \n",
        "    fontsize=8,\n",
        "    fontweight='bold',\n",
        "    color='gray')\n",
        "space = \" \" * 23\n",
        "plt.text(0, -0.15, space + 'IMF World Economic Outlook Database, World Bank Data', \n",
        "    transform=plt.gca().transAxes, \n",
        "    fontsize=8,\n",
        "    color='gray')\n",
        "\n",
        "# Remove spines\n",
        "for spine in plt.gca().spines.values():\n",
        "    spine.set_visible(False)\n",
        "\n",
        "# Add text\n",
        "public = df.loc[2023, 'Public']\n",
        "household = df.loc[2023, 'HH']\n",
        "nonfinancial = df.loc[2023, 'NFC']\n",
        "\n",
        "plt.text(len(df)+1.5, nonfinancial/2, f\"NFC\\n← {nonfinancial:.0f}%\", fontsize=7, ha='center', va='bottom', color='#004b96')\n",
        "plt.text(len(df)+1.5, nonfinancial + (household/2), f\"HH\\n← {household:.0f}%\", fontsize=7, ha='center', va='bottom', color='#009bde')\n",
        "plt.text(len(df)+1.5, nonfinancial + household + (public/2), f\"Public\\n← {public:.0f}%\", fontsize=7, ha='center', va='bottom', color='#f1a900')\n",
        "plt.text(len(df)+1.5, nonfinancial + household + public, f\"Total\\n← {nonfinancial+household+public:.0f}%\", fontsize=7, ha='center', va='bottom', fontweight='bold', color='black')\n",
        "\n",
        "# Añadir el texto estirado\n",
        "plt.text(len(df)+5, (nonfinancial + household) / 2, \"}\", fontsize=40, ha='center', va='bottom', color='#ffffff')\n",
        "\n",
        "# Adjust layout\n",
        "plt.tight_layout()\n",
        "\n",
        "# Save it...\n",
        "download_folder = os.path.join(os.path.expanduser(\"~\"), \"Downloads\")\n",
        "filename = os.path.join(download_folder, f\"FIG_IMF_Global_Debt.png\")\n",
        "plt.savefig(filename, dpi=300, bbox_inches='tight')\n",
        "\n",
        "# Show :)\n",
        "plt.show()"
      ],
      "id": "Debt",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "::: {layout-ncol=\"1\"}\n",
        "![](FIG_IMF_Global_Debt.png){.lightbox}\n",
        ":::\n"
      ],
      "id": "6776ef03"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| eval: false\n",
        "#| echo: true\n",
        "#| output: false\n",
        "#| warning: false\n",
        "#| label: Debt Countries\n",
        "# Libraries\n",
        "# =====================================================================\n",
        "import requests\n",
        "import wbgapi as wb\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "import matplotlib.patches as mpatches\n",
        "import matplotlib.ticker as ticker\n",
        "import matplotlib.ticker as mticker\n",
        "import os\n",
        "\n",
        "# Data Extraction (Countries)\n",
        "# =====================================================================\n",
        "# Extract JSON and bring data to a dataframe\n",
        "url = 'https://raw.githubusercontent.com/guillemmaya92/world_map/main/Dim_Country.json'\n",
        "response = requests.get(url)\n",
        "data = response.json()\n",
        "df = pd.DataFrame(data)\n",
        "df = pd.DataFrame.from_dict(data, orient='index').reset_index()\n",
        "df_countries = df.rename(columns={'index': 'ISO3'})\n",
        "\n",
        "# Data Extraction - WBD (1960-1980)\n",
        "# ========================================================\n",
        "# To use the built-in plotting method\n",
        "indicator = ['NY.GDP.PCAP.KD', 'SP.POP.TOTL']\n",
        "countries = df_countries['ISO3'].tolist()\n",
        "data_range = range(1960, 1980)\n",
        "data = wb.data.DataFrame(indicator, countries, data_range, numericTimeKeys=True, labels=False, columns='series').reset_index()\n",
        "df_wb = data.rename(columns={\n",
        "    'economy': 'ISO3',\n",
        "    'time': 'Year',\n",
        "    'SP.POP.TOTL': 'pop',\n",
        "    'NY.GDP.PCAP.KD': 'gdpc'\n",
        "})\n",
        "\n",
        "# Filter nulls and create total\n",
        "df_wb = df_wb[~df_wb['gdpc'].isna()]\n",
        "df_wb['Value'] = df_wb['gdpc'] * df_wb['pop']\n",
        "df_wb['Parameter'] = 'NGDPD'\n",
        "df_wb = df_wb[['Parameter', 'ISO3', 'Year', 'Value']]\n",
        "\n",
        "# Data Extraction (IMF)\n",
        "# =====================================================================\n",
        "#Parametro\n",
        "parameters = ['NGDPD', 'PVD_LS', 'HH_LS', 'NFC_LS', 'CG_DEBT_GDP', 'GG_DEBT_GDP', 'NFPS_DEBT_GDP', 'PS_DEBT_GDP']\n",
        "\n",
        "# Create an empty list\n",
        "records = []\n",
        "\n",
        "# Iterar sobre cada parámetro\n",
        "for parameter in parameters:\n",
        "    # Request URL\n",
        "    url = f\"https://www.imf.org/external/datamapper/api/v1/{parameter}\"\n",
        "    response = requests.get(url)\n",
        "    data = response.json()\n",
        "    values = data.get('values', {})\n",
        "\n",
        "    # Iterate over each country and year\n",
        "    for country, years in values.get(parameter, {}).items():\n",
        "        for year, value in years.items():\n",
        "            records.append({\n",
        "                'Parameter': parameter,\n",
        "                'ISO3': country,\n",
        "                'Year': int(year),\n",
        "                'Value': float(value)\n",
        "            })\n",
        "    \n",
        "# Create dataframe\n",
        "df_imf = pd.DataFrame(records)\n",
        "\n",
        "# Data Manipulation\n",
        "# =====================================================================\n",
        "# Merge IMF and WBD\n",
        "df = pd.concat([df_imf, df_wb], ignore_index=True)\n",
        "\n",
        "# Pivot Parameter to columns and filter nulls\n",
        "df = df.pivot(index=['ISO3', 'Year'], columns='Parameter', values='Value').reset_index()\n",
        "df = df.dropna(subset=['PVD_LS', 'HH_LS', 'NFC_LS', 'CG_DEBT_GDP', 'GG_DEBT_GDP', 'NFPS_DEBT_GDP', 'PS_DEBT_GDP'], how='all')\n",
        "\n",
        "# Calculate Totals\n",
        "df['GDP'] = df['NGDPD']\n",
        "df['Public'] = df['GG_DEBT_GDP'].fillna(df['CG_DEBT_GDP']).fillna(df['NFPS_DEBT_GDP']) * df['GDP']\n",
        "df['HH'] =  df['HH_LS'] * df['GDP']\n",
        "df['NFC'] = df['NFC_LS'].fillna(df['PVD_LS']) * df['GDP']\n",
        "df['Total'] = df['Public'].fillna(0) + df['HH'].fillna(0) + df['NFC'].fillna(0)\n",
        "\n",
        "# Merge countries\n",
        "df = df.merge(df_countries, how='left', left_on='ISO3', right_on='ISO3')\n",
        "df = df[['ISO3', 'Cod_Currency', 'Year', 'Total', 'GDP']]\n",
        "df = df[df['Cod_Currency'].notna()]\n",
        "df['Region'] = np.where(df['Cod_Currency'] == 'EUR', 'EUR', np.where(df['ISO3'].isin(['USA', 'CHN', 'JPN', 'AUS', 'IND', 'KOR', 'CAN']), df['ISO3'], 'OTH'))\n",
        "\n",
        "# Groupping data\n",
        "df = df.groupby(['Year', 'Region'], as_index=False)[['GDP', 'Total']].sum()\n",
        "\n",
        "# Percent\n",
        "df['Total'] = df['Total'] / df.groupby('Year')['GDP'].transform('sum')\n",
        "\n",
        "# Adjust table\n",
        "df.drop(columns=['GDP'], inplace=True)\n",
        "df = df[df['Year'] >= 1960]\n",
        "df = df.pivot_table(index='Year', columns='Region', values='Total', aggfunc='sum', fill_value=0)\n",
        "df = df[['OTH', 'AUS', 'CAN', 'CHN', 'IND', 'JPN', 'KOR', 'EUR', 'USA']]\n",
        "\n",
        "print(df)\n",
        "\n",
        "# Data Visualization\n",
        "# =====================================================================\n",
        "# Font and style\n",
        "plt.rcParams.update({'font.family': 'sans-serif', 'font.sans-serif': ['Franklin Gothic'], 'font.size': 9})\n",
        "sns.set(style=\"white\", palette=\"muted\")\n",
        "\n",
        "df = df[['OTH', 'IND', 'KOR', 'CHN', 'JPN', 'CAN', 'AUS', 'EUR', 'USA']]\n",
        "\n",
        "# Palette\n",
        "palette = [\n",
        "    \"#004b96\",  # OTH\n",
        "    \"#0068b8\",  # IND\n",
        "    \"#0080d6\",  # KOR\n",
        "    \"#009bde\",  # CHN\n",
        "    \"#4bb1e1\",  # JPN\n",
        "    \"#88c7e4\",  # CAN\n",
        "    \"#f1a900\",  # AUS\n",
        "    \"#f3b433\",  # EUR\n",
        "    \"#f7c863\"   # USA\n",
        "]\n",
        "\n",
        "# Create figure\n",
        "fig, ax = plt.subplots(figsize=(8, 6))\n",
        "\n",
        "# Crear figure and plot\n",
        "df.plot(kind=\"area\", stacked=True, color=palette, legend=False, ax=ax)\n",
        "\n",
        "# Add title and labels\n",
        "fig.add_artist(plt.Line2D([0.07, 0.07], [0.87, 0.97], linewidth=6, color='#203764', solid_capstyle='butt'))\n",
        "plt.text(0.02, 1.13, f'A history of debt', fontsize=16, fontweight='bold', ha='left', transform=plt.gca().transAxes)\n",
        "plt.text(0.02, 1.09, f'Global debt across common currency areas', fontsize=11, color='#262626', ha='left', transform=plt.gca().transAxes)\n",
        "plt.text(0.02, 1.05, f'(debt as percent of GDP)', fontsize=9, color='#262626', ha='left', transform=plt.gca().transAxes)\n",
        "\n",
        "# Adjust ticks and grid\n",
        "plt.ylim(0, 260)\n",
        "plt.xlim(1960, 2023)\n",
        "ax.yaxis.set_major_formatter(mticker.FuncFormatter(lambda x, pos: f'{int(x):,}'.replace(\",\", \".\")))\n",
        "ax.xaxis.set_major_locator(ticker.MultipleLocator(10))\n",
        "plt.gca().set_xlabel('')\n",
        "plt.yticks(fontsize=9, color='#282828')\n",
        "plt.xticks(fontsize=9, rotation=0)\n",
        "plt.grid(axis='y', linestyle='--', color='gray', linewidth=0.5, alpha=0.3)\n",
        "\n",
        "# Custom legend values\n",
        "handles = [\n",
        "    mpatches.Patch(color=palette[0], label=\"Rest of Wolrd\", linewidth=2),\n",
        "    mpatches.Patch(color=palette[1], label=\"India\", linewidth=2),\n",
        "    mpatches.Patch(color=palette[2], label=\"South Korea\", linewidth=2),\n",
        "    mpatches.Patch(color=palette[3], label=\"China\", linewidth=2),\n",
        "    mpatches.Patch(color=palette[4], label=\"Australia\", linewidth=2),\n",
        "    mpatches.Patch(color=palette[5], label=\"Japan\", linewidth=2),\n",
        "    mpatches.Patch(color=palette[6], label=\"Canada\", linewidth=2),\n",
        "    mpatches.Patch(color=palette[7], label=\"Eurozone\", linewidth=2),\n",
        "    mpatches.Patch(color=palette[8], label=\"United States\", linewidth=2)\n",
        "]\n",
        "\n",
        "# Legend\n",
        "plt.legend(\n",
        "    handles=handles,\n",
        "    loc='lower center', \n",
        "    bbox_to_anchor=(0.5, -0.12),\n",
        "    ncol=9,\n",
        "    fontsize=8,\n",
        "    frameon=False,\n",
        "    handlelength=0.5,\n",
        "    handleheight=0.5,\n",
        "    borderpad=0.2,\n",
        "    columnspacing=0.4\n",
        ")\n",
        "\n",
        "df = df[['OTH', 'IND', 'KOR', 'CHN', 'JPN', 'AUS', 'CAN', 'EUR', 'USA']]\n",
        "\n",
        "# Add text\n",
        "oth = df.loc[2023, 'OTH']\n",
        "ind = df.loc[2023, 'IND']\n",
        "kor = df.loc[2023, 'KOR']\n",
        "chn = df.loc[2023, 'CHN']\n",
        "jpn = df.loc[2023, 'JPN']\n",
        "can = df.loc[2023, 'AUS']\n",
        "aus = df.loc[2023, 'CAN']\n",
        "eur = df.loc[2023, 'EUR']\n",
        "usd = df.loc[2023, 'USA']\n",
        "\n",
        "plt.text(1.01, 0.07, f\"OTH ←{oth:.0f}%\", fontsize=7, ha='left', va='bottom', color=palette[0], transform=plt.gca().transAxes)\n",
        "plt.text(1.01, 0.14, f\"IND ←{ind:.0f}%\", fontsize=7, ha='left', va='bottom', color=palette[1], transform=plt.gca().transAxes)\n",
        "plt.text(1.01, 0.17, f\"KOR ←{kor:.0f}%\", fontsize=7, ha='left', va='bottom', color=palette[2], transform=plt.gca().transAxes)\n",
        "plt.text(1.01, 0.27, f\"CHN ←{chn:.0f}%\", fontsize=7, ha='left', va='bottom', color=palette[3], transform=plt.gca().transAxes)\n",
        "plt.text(1.01, 0.4, f\"JPN ←{jpn:.0f}%\", fontsize=7, ha='left', va='bottom', color=palette[4], transform=plt.gca().transAxes)\n",
        "plt.text(1.01, 0.44, f\"AUS ←{aus:.0f}%\", fontsize=7, ha='left', va='bottom', color=palette[5], transform=plt.gca().transAxes)\n",
        "plt.text(1.01, 0.48, f\"CAN ←{can:.0f}%\", fontsize=7, ha='left', va='bottom', color=palette[6], transform=plt.gca().transAxes)\n",
        "plt.text(1.01, 0.55, f\"EUR ←{eur:.0f}%\", fontsize=7, ha='left', va='bottom', color=palette[7], transform=plt.gca().transAxes)\n",
        "plt.text(1.01, 0.75, f\"USA ←{usd:.0f}%\", fontsize=7, ha='left', va='bottom', fontweight='bold', color=palette[8], transform=plt.gca().transAxes)\n",
        "plt.text(1.01, 0.88, f\"Total ← {oth+ind+kor+chn+jpn+can+aus+eur+usd:.0f}%\", fontsize=7, ha='left', va='bottom', fontweight='bold', color='black', transform=plt.gca().transAxes)\n",
        "\n",
        "# Add Data Source\n",
        "plt.text(0, -0.15, 'Data Source:', \n",
        "    transform=plt.gca().transAxes, \n",
        "    fontsize=8,\n",
        "    fontweight='bold',\n",
        "    color='gray')\n",
        "space = \" \" * 23\n",
        "plt.text(0, -0.15, space + 'IMF World Economic Outlook Database, World Bank Data', \n",
        "    transform=plt.gca().transAxes, \n",
        "    fontsize=8,\n",
        "    color='gray')\n",
        "\n",
        "# Remove spines\n",
        "for spine in plt.gca().spines.values():\n",
        "    spine.set_visible(False)\n",
        "\n",
        "# Adjust layout\n",
        "plt.tight_layout()\n",
        "\n",
        "# Save it...\n",
        "download_folder = os.path.join(os.path.expanduser(\"~\"), \"Downloads\")\n",
        "filename = os.path.join(download_folder, f\"FIG_IMF_Global_Debt_Countries.png\")\n",
        "plt.savefig(filename, dpi=300, bbox_inches='tight')\n",
        "\n",
        "# Show it :)\n",
        "plt.show()"
      ],
      "id": "Debt-Countries",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "::: {layout-ncol=\"1\"}\n",
        "![](FIG_IMF_Global_Debt_Countries.png){.lightbox}\n",
        ":::"
      ],
      "id": "8e108b18"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\guill\\AppData\\Roaming\\Python\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}