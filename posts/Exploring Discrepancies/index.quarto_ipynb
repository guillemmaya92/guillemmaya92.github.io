{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Exploring Discrepancies between Market Exchanges Rates and Purchasing Power Parity\"\n",
        "\n",
        "description: \"Examines the differences between market exchange rates and PPP, highlighting how these discrepancies reflect economic imbalances and price level variations across countries.\"\n",
        "\n",
        "categories: \"Economy\"\n",
        "\n",
        "date: \"2025-02-17\"\n",
        "\n",
        "keywords: [\"Inequalities\"]\n",
        "\n",
        "jupyter: python3\n",
        "\n",
        "format:\n",
        "  html:\n",
        "    code-fold: true\n",
        "---\n",
        "\n",
        "\n",
        "## Summary\n",
        "\n",
        "A plot that shows the current `Inequalities` in capital productivity.\n"
      ],
      "id": "13436e8d"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| eval: false\n",
        "#| echo: true\n",
        "#| output: false\n",
        "#| warning: false\n",
        "# Libraries\n",
        "# =====================================================================\n",
        "import requests\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import requests\n",
        "import plotly.graph_objects as go\n",
        "import numpy as np\n",
        "\n",
        "# Data Extraction (Countries)\n",
        "# =====================================================================\n",
        "# Extract JSON and bring data to a dataframe\n",
        "url = 'https://raw.githubusercontent.com/guillemmaya92/world_map/main/Dim_Country.json'\n",
        "response = requests.get(url)\n",
        "data = response.json()\n",
        "df = pd.DataFrame(data)\n",
        "df = pd.DataFrame.from_dict(data, orient='index').reset_index()\n",
        "df_countries = df.rename(columns={'index': 'ISO3'})\n",
        "\n",
        "# Data Extraction - IMF (1980-2030)\n",
        "# =====================================================================\n",
        "#Parametro\n",
        "parameters = ['NGDPD', 'PPPGDP', 'LP']\n",
        "\n",
        "# Create an empty list\n",
        "records = []\n",
        "\n",
        "# Iterar sobre cada parámetro\n",
        "for parameter in parameters:\n",
        "    # Request URL\n",
        "    url = f\"https://www.imf.org/external/datamapper/api/v1/{parameter}\"\n",
        "    response = requests.get(url)\n",
        "    data = response.json()\n",
        "    values = data.get('values', {})\n",
        "\n",
        "    # Iterate over each country and year\n",
        "    for country, years in values.get(parameter, {}).items():\n",
        "        for year, value in years.items():\n",
        "            records.append({\n",
        "                'Parameter': parameter,\n",
        "                'ISO3': country,\n",
        "                'Year': int(year),\n",
        "                'Value': float(value)\n",
        "            })\n",
        "    \n",
        "# Create dataframe\n",
        "df_imf = pd.DataFrame(records)\n",
        "\n",
        "# Pivot Parameter to columns and filter nulls\n",
        "df_imf = df_imf.pivot(index=['ISO3', 'Year'], columns='Parameter', values='Value').reset_index()\n",
        "\n",
        "# Filter after 2024\n",
        "df_imf = df_imf[df_imf['Year'] == 2024]\n",
        "\n",
        "# Data Manipulation\n",
        "# =====================================================================\n",
        "# Concat and filter dataframes\n",
        "df = df_imf.dropna(subset=['NGDPD', 'PPPGDP', 'LP'], how='any')\n",
        "\n",
        "# Merge queries\n",
        "df = df.merge(df_countries, how='left', left_on='ISO3', right_on='ISO3')\n",
        "df = df[['Region', 'ISO2', 'Country', 'Cod_Currency', 'Year', 'NGDPD', 'PPPGDP', 'LP']]\n",
        "df = df[df['Cod_Currency'].notna()]\n",
        "\n",
        "# Calculate PPP\n",
        "df = df.groupby(['Region', 'ISO2', 'Country', 'Cod_Currency', 'Year'])[['NGDPD', 'PPPGDP', 'LP']].sum()\n",
        "df = df.reset_index()\n",
        "df['PPP'] = df['NGDPD'] / df['PPPGDP']\n",
        "df['NGDPDPC'] = df['NGDPD'] / df['LP']\n",
        "df['PPPPC'] = df['PPPGDP'] / df['LP']\n",
        "\n",
        "# Calculate Average Weight and Percent\n",
        "df['AVG_Weight'] = df.groupby('Year')['NGDPDPC'].transform(lambda x: np.average(x, weights=df.loc[x.index, 'LP']))\n",
        "df['Percent'] = df['NGDPD'] / df.groupby('Year')['NGDPD'].transform('sum')\n",
        "\n",
        "# Filtering\n",
        "df = df[df['NGDPDPC'] < 115 ]\n",
        "df = df[df['PPP'] < 1.25]\n",
        "df = df[~df['ISO2'].isin(['SZ', 'VA', 'NC', 'CI', 'MW', 'SS', 'MY'])]\n",
        "\n",
        "# Data Visualization\n",
        "# =====================================================================\n",
        "fig = go.Figure()\n",
        "\n",
        "# Tamaño de los marcadores\n",
        "marker_size = np.sqrt(df[\"NGDPD\"] / df[\"NGDPD\"].max()) * 100 + 3\n",
        "line_width  = np.sqrt(df[\"NGDPD\"] / df[\"NGDPD\"].max()) * 4 + 0.5\n",
        "\n",
        "# Add scatter plot\n",
        "fig.add_trace(go.Scatter(\n",
        "    x=df[\"PPP\"],\n",
        "    y=df[\"NGDPDPC\"],\n",
        "    mode='markers',\n",
        "    text=df[\"Country\"],\n",
        "    marker=dict(\n",
        "        size=marker_size,\n",
        "        color=\"rgba(0,0,0,0)\",\n",
        "        line=dict(\n",
        "            width=line_width,\n",
        "            color='black'\n",
        "        )\n",
        "    ),\n",
        "    hovertemplate=\"<b>Country:</b> %{text}<br>\" +\n",
        "                  \"<b>GDP per Capita:</b> $%{y:.2f}<br>\" + \n",
        "                  \"<b>PPP:</b> $%{x:.2f}<extra></extra>\",\n",
        "    showlegend=False\n",
        "))\n",
        "\n",
        "# Add flag images to scatterplot\n",
        "for i, row in df.iterrows():\n",
        "    country_iso = row[\"ISO2\"]\n",
        "    \n",
        "    # Calculate image size\n",
        "    image_size = marker_size[i] * 0.21\n",
        "\n",
        "    # Add the flag image\n",
        "    fig.add_layout_image(\n",
        "        dict(\n",
        "            source=f\"https://raw.githubusercontent.com/matahombres/CSS-Country-Flags-Rounded/master/flags/{country_iso}.png\",\n",
        "            xref=\"x\",\n",
        "            yref=\"y\",\n",
        "            xanchor=\"center\",\n",
        "            yanchor=\"middle\",\n",
        "            x=row[\"PPP\"],\n",
        "            y=row[\"NGDPDPC\"],\n",
        "            sizex=image_size,\n",
        "            sizey=image_size,\n",
        "            sizing=\"contain\",\n",
        "            opacity=0.8,\n",
        "            layer=\"above\"\n",
        "        )\n",
        "    )\n",
        "    \n",
        "# Modeling a line trend\n",
        "z = np.polyfit(df['PPP'], df['NGDPDPC'], 2, w=df['NGDPD'])\n",
        "p = np.poly1d(z)\n",
        "x_range = np.linspace(df['PPP'].min(), df['PPP'].max(), 100)\n",
        "y_range = p(x_range)\n",
        "\n",
        "# Add the line trend\n",
        "fig.add_trace(go.Scatter(\n",
        "    x=x_range,\n",
        "    y=y_range,\n",
        "    mode='lines',\n",
        "    name='Trend Line',\n",
        "    line=dict(color='darkred', width=0.5),\n",
        "    showlegend=False\n",
        "))\n",
        "\n",
        "# Add red and green shapes\n",
        "fig.add_shape(\n",
        "    type=\"rect\",\n",
        "    xref=\"x\", yref=\"paper\",\n",
        "    x0=0, x1=1,\n",
        "    y0=0, y1=1,\n",
        "    fillcolor=\"red\",\n",
        "    opacity=0.04,\n",
        "    layer=\"below\",\n",
        "    line_width=0\n",
        ")\n",
        "fig.add_shape(\n",
        "    type=\"rect\",\n",
        "    xref=\"x\", yref=\"paper\",\n",
        "    x0=1, x1=1.2,\n",
        "    y0=0, y1=1,\n",
        "    fillcolor=\"green\",\n",
        "    opacity=0.04,\n",
        "    layer=\"below\",\n",
        "    line_width=0\n",
        ")\n",
        "\n",
        "# Configuration plot\n",
        "fig.update_layout(\n",
        "    title=\"<b>Global Inequalities in GDP per Capita</b>\",\n",
        "    title_x=0.11,\n",
        "    title_font=dict(size=16),\n",
        "    annotations=[\n",
        "        dict(\n",
        "            text=\"Exploring Discrepancies between Market Exchanges Rates and Purchasing Power Parity\",\n",
        "            xref=\"paper\",\n",
        "            yref=\"paper\",\n",
        "            x=0,\n",
        "            y=1.07,\n",
        "            showarrow=False,\n",
        "            font=dict(size=11)\n",
        "        ),\n",
        "        dict(\n",
        "            text=\"<b>Data Source:</b> IMF World Economic Outlook Database, 2024\",\n",
        "            xref=\"paper\",\n",
        "            yref=\"paper\",\n",
        "            x=0,\n",
        "            y=-0.13,\n",
        "            showarrow=False,\n",
        "            font=dict(size=10),\n",
        "            align=\"left\"\n",
        "        ),\n",
        "        dict(\n",
        "            text=f\"2024\",\n",
        "            xref=\"paper\", \n",
        "            yref=\"paper\",\n",
        "            x=1, \n",
        "            y=1.1,\n",
        "            showarrow=False,\n",
        "            font=dict(size=22, color='lightgray', weight='bold'),\n",
        "            align=\"right\"\n",
        "        )\n",
        "    ],\n",
        "    xaxis=dict(\n",
        "        title=\"<b>GAP Between PPP and Market Exchange Rate</b>\",\n",
        "        range=[0, 1.2],\n",
        "        tickvals=[i * 1.2 / 6 for i in range(7)],\n",
        "        showline=True,\n",
        "        linewidth=1,\n",
        "        linecolor=\"black\",\n",
        "        gridcolor=\"#ebebeb\"\n",
        "    ),\n",
        "    yaxis=dict(\n",
        "        title=\"<b>GDP per Capita (US$)</b>\",\n",
        "        range=[0, 120],\n",
        "        tickvals=[i * 120 / 6 for i in range(7)],\n",
        "        ticktext=[f\"{int(i * 120 / 6)}k\" for i in range(7)],\n",
        "        showline=True,\n",
        "        linewidth=1,\n",
        "        linecolor=\"black\",\n",
        "        gridcolor=\"#ebebeb\"\n",
        "    ),\n",
        "    height=750,\n",
        "    width=750,\n",
        "    plot_bgcolor=\"white\",\n",
        "    paper_bgcolor=\"white\"\n",
        ")\n",
        "\n",
        "# Add a custom legend\n",
        "size_legend = ['Smaller', 'Middle', 'Bigger']\n",
        "size_values = [5, 10, 20]\n",
        "\n",
        "for label, size in zip(size_legend, size_values):\n",
        "    fig.add_trace(go.Scatter(\n",
        "        x=[None],\n",
        "        y=[None],\n",
        "        mode='markers',\n",
        "        marker=dict(\n",
        "            size=size,\n",
        "            color=\"rgba(0,0,0,0)\",\n",
        "            line=dict(\n",
        "                width=1,\n",
        "                color='black'\n",
        "            )\n",
        "        ),\n",
        "        legendgroup='size',\n",
        "        showlegend=True,\n",
        "        name=f'{label}'\n",
        "    ))\n",
        "\n",
        "fig.update_layout(\n",
        "    legend=dict(\n",
        "        title=dict(text='<b>   GDP Scale</b>'), \n",
        "        font=dict(size=11),\n",
        "        x=0.025,\n",
        "        y=0.95,\n",
        "        xanchor='left',\n",
        "        bgcolor='white',\n",
        "        bordercolor='black',\n",
        "        borderwidth=1\n",
        "    )\n",
        ")\n",
        "\n",
        "# Show the plot!\n",
        "fig.show()"
      ],
      "id": "67782e35",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "```{=html}\n",
        "<iframe width=\"800\" height=\"800\" \n",
        "  src=\"FIG_PPP_Inequalities_Flag.html\" \n",
        "  style=\"border:none;\">\n",
        "</iframe>\n",
        "```"
      ],
      "id": "8dfe12e4"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\guill\\AppData\\Roaming\\Python\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}