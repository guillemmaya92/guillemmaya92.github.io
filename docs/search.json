[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Guillem Maya",
    "section": "",
    "text": "Young, eager to learn and with special devotion for technology and computer science. I am looking forward to develop my professional career in the field of data analytics with a deep understanding of finance and business processes. I aim to advance within a constant learning environment and be able to implement new systems that drive companies toward a greater efficient."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "Posts",
    "section": "",
    "text": "Date\n\n\nTitle\n\n\n\n\n\n\nDecember 27, 2024\n\n\nBitcoin Logarithmic Trends\n\n\n\n\nDecember 26, 2024\n\n\nAnalysis of Cars\n\n\n\n\nNovember 26, 2024\n\n\nData-driven web applications basics: Containerizing our application\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "cv.html",
    "href": "cv.html",
    "title": "Guillem Maya",
    "section": "",
    "text": "Download pdf"
  },
  {
    "objectID": "cv.html#education",
    "href": "cv.html#education",
    "title": "Guillem Maya",
    "section": "Education",
    "text": "Education"
  },
  {
    "objectID": "cv.html#experience",
    "href": "cv.html#experience",
    "title": "Guillem Maya",
    "section": "Experience",
    "text": "Experience"
  },
  {
    "objectID": "cv.html#about-me",
    "href": "cv.html#about-me",
    "title": "Guillem Maya Business Controller | BI Consultant | Data Analyst",
    "section": "About me",
    "text": "About me"
  },
  {
    "objectID": "polar.html",
    "href": "polar.html",
    "title": "matplotlib demo",
    "section": "",
    "text": "For a demonstration of a line plot on a polar axis, see Figure 1.\n\n\nCode\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(\n  subplot_kw = {'projection': 'polar'} \n)\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n\n\n\n\n\n\n\n\nFigure 1: A line plot on a polar axis"
  },
  {
    "objectID": "cv.html#section",
    "href": "cv.html#section",
    "title": "Guillem Maya Business Controller | BI Consultant | Data Analyst",
    "section": "",
    "text": "Download pdf"
  },
  {
    "objectID": "cv.html#ejemplo-de-caja-desplegable",
    "href": "cv.html#ejemplo-de-caja-desplegable",
    "title": "Caja Desplegable Estilo Código",
    "section": "",
    "text": "**Business Intelligence Developer**  \nKingspan Insulation | *feb 2024 - present*\nWorking on the IT team alongside Agility ERP software developers, we design a customized solution for many factories around the world. My tasks are focused on data analytics with a deep understanding of all business processes. Managing data pipelines using T-SQL queries and ETL techniques supported by stored procedures and job schedules. Developing advanced analytical models and reporting in SSAS, Power BI, SSRS, and Report Builder. Providing actionable insights to business users in order to facilitate an informed decision-making and driving the company to an organizational efficiency model.\n\n\n\nHere is a warning.\n\nMore content.\n\n\n\n\n\n\nflowchart LR\n  A[Hard edge] --&gt; B(Round edge)\n  B --&gt; C{Decision}\n  C --&gt; D[Result one]\n  C --&gt; E[Result two]"
  },
  {
    "objectID": "cv.html#education-1",
    "href": "cv.html#education-1",
    "title": "Guillem Maya",
    "section": "Education",
    "text": "Education"
  },
  {
    "objectID": "cv.html#language",
    "href": "cv.html#language",
    "title": "Guillem Maya",
    "section": "Language",
    "text": "Language"
  },
  {
    "objectID": "cv.html#skills",
    "href": "cv.html#skills",
    "title": "Guillem Maya",
    "section": "Skills",
    "text": "Skills"
  },
  {
    "objectID": "posts/polars2/index.html",
    "href": "posts/polars2/index.html",
    "title": "Analysis of Cars",
    "section": "",
    "text": "Let’s investigate the relationship between fuel efficiency (mpg) and engine displacement (disp) from the mtcars dataset. Those variables have a correlation of -0.85.\n\n\nHere is a plot:\n\nlibrary(tidyverse)\ndata(mtcars)\nmtcars |&gt;\n  ggplot(aes(mpg, disp)) + \n  geom_point(color=\"dodgerblue4\", size=2)"
  },
  {
    "objectID": "posts/polars/index.html",
    "href": "posts/polars/index.html",
    "title": "Data-driven web applications basics: Containerizing our application",
    "section": "",
    "text": "For a demonstration of a line plot on a polar axis, see Figure 1.\n\n\nCode\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(\n  subplot_kw = {'projection': 'polar'} \n)\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n\n\n\n\n\n\n\n\nFigure 1: A line plot on a polar axis"
  },
  {
    "objectID": "posts/polars2/index.html#sub-header",
    "href": "posts/polars2/index.html#sub-header",
    "title": "Analysis of Cars",
    "section": "",
    "text": "Here is a plot:\n\nlibrary(tidyverse)\ndata(mtcars)\nmtcars |&gt;\n  ggplot(aes(mpg, disp)) + \n  geom_point(color=\"dodgerblue4\", size=2)"
  },
  {
    "objectID": "posts/Bitcoin Halving Trends/index.html",
    "href": "posts/Bitcoin Halving Trends/index.html",
    "title": "Bitcoin Logarithmic Trends",
    "section": "",
    "text": "A plot that shows the logarithmic price of Bitcoin over each halving period.\n\n\nCode\n# Libraries\n# ==============================================================================\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport requests\n\n# Get API Data\n# ==============================================================================\n# Create a df with final year dates\ndp = pd.DataFrame({'date': pd.date_range(start='2010-12-31', end='2024-12-31', freq='Y')})\ndp['to_ts'] = dp['date'].apply(lambda x: int(pd.to_datetime(x).timestamp()))\n\n# Create an empty list\ndataframes = []\n\n# Iterate API with each date\nfor to_ts in dp['to_ts']:\n    # Build an URL with parameters and transform data\n    url = f\"https://min-api.cryptocompare.com/data/v2/histoday?fsym=BTC&tsym=USD&limit=365&toTs={to_ts}\"\n    response = requests.get(url)\n    data = response.json().get(\"Data\", {}).get(\"Data\", [])\n    df = pd.DataFrame([\n        {\n            \"symbol\": \"BTCUSD\",\n            \"date\": pd.to_datetime(entry[\"time\"], unit=\"s\").date(),\n            \"open\": entry[\"open\"],\n            \"close\": entry[\"close\"],\n            \"low\": entry[\"low\"],\n            \"high\": entry[\"high\"],\n            \"volume\": entry[\"volumeto\"]\n        }\n        for entry in data\n    ])\n    dataframes.append(df)\n# Combine all df into one\nbtc = pd.concat(dataframes, ignore_index=True)\n\n# DataSet 0 - Halving\n#================================================================================\nhalving = {'halving': [0 , 1, 2, 3, 4],\n           'date': ['2009-01-03', '2012-11-28', '2016-07-09', '2020-05-11', '2024-04-20'] \n           }\n\nhalving = pd.DataFrame(halving)\nhalving['date'] = pd.to_datetime(halving['date'])\n\n# DataSet 1 - BTC Price\n# ==============================================================================\n# Definir y ordenar dataset\nbtc = btc.drop_duplicates()\nbtc['date'] = pd.to_datetime(btc['date'])\nbtc['year_month'] = btc['date'].dt.strftime('%Y-%m')\nbtc = btc.set_index('date')\nbtc = btc.asfreq('D').ffill()\nbtc = btc.reset_index()\nbtc.sort_values(by=['date'], inplace=True)\nbtc = pd.merge(btc, halving, on='date', how='left')\nbtc['halving'].fillna(method='ffill', inplace=True)\nbtc['halving'].fillna(0, inplace=True)\nbtc['halving'] = btc['halving'].astype(int)\nbtc['first_close'] = btc.groupby('halving')['close'].transform('first')\nbtc['increase'] = (btc['close'] - btc['first_close']) / btc['first_close'] * 100\nbtc['days'] = btc.groupby('halving').cumcount() + 1\nbtc['closelog'] = np.log10(btc['close'])\nbtc = btc[btc['halving'] &gt;= 1]\nbtc['daystotal'] = btc.groupby('symbol').cumcount() + 1\n\n# Graph 1 - SEABORN\n# ==============================================================================\n# Font Style\nplt.rcParams.update({'font.family': 'sans-serif', 'font.sans-serif': ['Open Sans'], 'font.size': 10})\n\n# Colors Background\nregions = [\n    (0, 500, '#6B8E23'), # Green\n    (500, 1000, '#FF4500'), # Red\n    (1000, 1500, '#FFA500') # Orange\n    ]  \n\n# Colors Palette Lines\nlines = {\n    0: '#E0E0E0',  # Very Light Grey\n    1: '#C0C0C0',  # Light Grey\n    2: '#808080',  # Medium Grey\n    3: '#404040',  # Dark Grey\n    4: '#8B0000'   # Red\n}\n\n# Seaborn to plot a graph\nsns.set(style=\"whitegrid\", rc={\"grid.color\": \"0.95\", \"axes.grid.axis\": \"y\"})\nplt.figure(figsize=(16, 9))\nsns.lineplot(x='days', y='closelog', hue='halving', data=btc, markers=True, palette=lines, linewidth=1)\n\n# Add region colors in the background\nfor start, end, color in regions:\n    plt.axvspan(start, end, color=color, alpha=0.05)\n\n# Title and axis\nplt.title('Bitcoin Logarithmic Trends: Analysis Since Each Halving', fontsize=16, fontweight='bold', pad=20)\nplt.xlabel('Days',  fontsize=10, fontweight='bold')\nplt.ylabel('Log Price', fontsize=10, fontweight='bold')\nplt.xlim(0, 1500)\nplt.xticks(range(0, 1501, 125), fontsize=9)\nplt.tick_params(axis='both', labelsize=8)\nplt.yticks(fontsize=9)\n\n# Custom legend\nlegend = plt.legend(title=\"Halving\", loc='lower right', fontsize=8, title_fontsize='10')\nnew_title = 'Dates:'\nlegend.set_title(new_title)\nnew_labels = ['1st Halving: 2012-11-28 to 2016-07-09', '2nd Halving: 2016-07-09 to 2020-05-11', '3rd Halving: 2020-05-11 to 2024-04-20', '4th Halving: 2024-04-20 to present'] # Adjust the number of labels according to your data\nfor text, new_label in zip(legend.texts, new_labels):\n    text.set_text(new_label)\n\n# Maximo First 750 days\nbtc1 = btc[(btc['days'] &gt;= 0) & (btc['days'] &lt;= 750)]\nfor halving, group in btc1.groupby('halving'):\n    max_value = group['closelog'].max()\n    max_row = group[group['closelog'] == max_value].iloc[0]\n    plt.plot(max_row['days'], max_row['closelog'] +0.05, marker='*', color='darkgoldenrod', markersize=5)\n    plt.text(max_row['days'], max_row['closelog'] +0.1, f'{max_row[\"close\"]:,.0f} ({max_row[\"increase\"]:,.0f})%', fontsize=7, ha='center', color='darkgoldenrod')\n\n# Min Between 500 and 1000 days\nbtc2 = btc[(btc['days'] &gt;= 500) & (btc['days'] &lt;= 1000)]\nfor halving, group in btc2.groupby('halving'):\n    min_value = group['closelog'].min()\n    min_row = group[group['closelog'] == min_value].iloc[0]\n    plt.plot(min_row['days'], min_row['closelog'] - 0.05, marker='v', color='darkred', markersize=5)\n    plt.text(min_row['days'], min_row['closelog'] -0.15, f'{min_row[\"close\"]:,.0f} ({min_row[\"increase\"]:,.0f})%', fontsize=7, ha='center', color='darkred')\n\n# Max After 750 days \nbtc3 = btc[(btc['days'] &gt;= 750) & (btc['days'] &lt;= 1500)]\nfor halving, group in btc3.groupby('halving'):\n    max_value = group['closelog'].max()\n    max_row = group[group['closelog'] == max_value].iloc[0]\n    plt.plot(max_row['days'], max_row['closelog'] +0.05, marker='^', color='darkgreen', markersize=5)\n    plt.text(max_row['days'], max_row['closelog'] +0.1, f'{max_row[\"close\"]:,.0f} ({max_row[\"increase\"]:,.0f})%', fontsize=7, ha='center', color='darkgreen')\n\n# Custom Last Dots\nmax_vals = btc.groupby('halving').agg({'closelog': 'last', 'days': 'max'}).reset_index()\nfor index, row in max_vals.iterrows():\n    plt.plot(row['days'], row['closelog'], 'ro', markersize=2)\n\n# Custom Line labels\nfor halving, group in btc.groupby('halving'):\n    last_point = group.iloc[-1]\n    x = last_point['days']\n    y = last_point['closelog']\n    max_days = group['days'].max()\n    plt.text(x + 8, y, f'Halving {halving}\\n{max_days} days', color=lines[halving], fontsize=8, ha='left', va='center')\n    \n# Add Year Label\ncurrent_year_month = btc['year_month'].max() \nplt.text(1, 1.05, f'{current_year_month}',\n    transform=plt.gca().transAxes,\n    fontsize=22, ha='right', va='top',\n    fontweight='bold', color='#D3D3D3')\n\n# Add Data Source\nplt.text(0, -0.065, 'Data Source: CryptoCompare', \n         transform=plt.gca().transAxes, \n         fontsize=8, \n         color='gray')\n\n# Adjust layout\nplt.tight_layout()\n\n# Print it!\nplt.show()"
  }
]